# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-30 08:10+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Generator: Poedit 3.2.2\n"

#: whatsnew/3.12.rst:4
msgid "What's New In Python 3.12"
msgstr "Novità in Python 3.12"

#: whatsnew/3.12.rst:0
msgid "Editor"
msgstr "Editor"

#: whatsnew/3.12.rst:6
msgid "Adam Turner"
msgstr "Adam Turner"

#: whatsnew/3.12.rst:48
msgid ""
"This article explains the new features in Python 3.12, compared to 3.11. "
"Python 3.12 was released on October 2, 2023. For full details, see the "
":ref:`changelog <changelog>`."
msgstr ""
"Questo articolo spiega le nuove funzionalità in Python 3.12, rispetto alla "
"versione 3.11. Python 3.12 è stato rilasciato il 2 ottobre 2023. Per i "
"dettagli completi, consultare il :ref:`changelog <changelog>`."

#: whatsnew/3.12.rst:54
msgid ":pep:`693` -- Python 3.12 Release Schedule"
msgstr ":pep:`693` -- Programma di rilascio di Python 3.12"

#: whatsnew/3.12.rst:57
msgid "Summary -- Release highlights"
msgstr "Sommario -- Punti salienti del rilascio"

#: whatsnew/3.12.rst:62
msgid ""
"Python 3.12 is the latest stable release of the Python programming language,"
" with a mix of changes to the language and the standard library. The library"
" changes focus on cleaning up deprecated APIs, usability, and correctness. "
"Of note, the :mod:`!distutils` package has been removed from the standard "
"library. Filesystem support in :mod:`os` and :mod:`pathlib` has seen a "
"number of improvements, and several modules have better performance."
msgstr ""
"Python 3.12 è l'ultima versione stabile del linguaggio di programmazione "
"Python, che a portato a una serie di cambiamenti al linguaggio e alla libreria "
"standard. Le modifiche alla libreria si concentrano sulla pulizia delle API "
"deprecate, l'usabilità e la correttezza. Da notare, il pacchetto "
":mod:`!distutils` è stato rimosso dalla libreria standard. Il supporto ai "
"file system in :mod:`os` e :mod:`pathlib` ha visto numerosi miglioramenti, e"
" diversi moduli hanno ora una performance migliore."

#: whatsnew/3.12.rst:69
msgid ""
"The language changes focus on usability, as :term:`f-strings <f-string>` "
"have had many limitations removed and 'Did you mean ...' suggestions "
"continue to improve. The new :ref:`type parameter syntax "
"<whatsnew312-pep695>` and :keyword:`type` statement improve ergonomics for "
"using :term:`generic types <generic type>` and :term:`type aliases <type "
"alias>` with static type checkers."
msgstr ""
"Le modifiche al linguaggio si concentrano sull'usabilità, in quanto molte "
"limitazioni dei :term:`f-strings <f-string>` sono state rimosse e i "
"suggerimenti 'Intendevi dire ...' continuano a migliorare. La nuova "
":ref:`sintassi dei parametri di tipo <whatsnew312-pep695>` e l'istruzione "
":keyword:`type` migliorano l'ergonomia per l'utilizzo di :term:`tipi "
"generici <generic type>` e :term:`alias di tipo <type alias>` con i checker "
"di tipo statico."

#: whatsnew/3.12.rst:76
msgid ""
"This article doesn't attempt to provide a complete specification of all new "
"features, but instead gives a convenient overview. For full details, you "
"should refer to the documentation, such as the  :ref:`Library Reference "
"<library-index>` and :ref:`Language Reference <reference-index>`. If you "
"want to understand the complete implementation and design rationale for a "
"change, refer to the PEP for a particular new feature; but note that PEPs "
"usually are not kept up-to-date once a feature has been fully implemented."
msgstr ""
"Questo articolo non tenta di fornire una specifica completa di tutte le "
"nuove funzionalità, ma offre invece una panoramica. Per i "
"dettagli completi, dovresti fare riferimento alla documentazione, come il "
":ref:`Library Reference <library-index>` e il :ref:`Language Reference "
"<reference-index>`. Se vuoi comprendere l'implementazione completa e la "
"motivazione dietro una modifica, fai riferimento al PEP per una particolare "
"nuova funzionalità; ma tieni presente che i PEP di solito non vengono "
"aggiornati una volta che una funzionalità è stata completamente "
"implementata."

#: whatsnew/3.12.rst:90
msgid "New syntax features:"
msgstr "Nuove funzionalità sintattiche:"

#: whatsnew/3.12.rst:92
msgid ""
":ref:`PEP 695 <whatsnew312-pep695>`, type parameter syntax and the "
":keyword:`type` statement"
msgstr ""
":ref:`PEP 695 <whatsnew312-pep695>`, sintassi dei parametri di tipo e "
"l'istruzione :keyword:`type`"

#: whatsnew/3.12.rst:94
msgid "New grammar features:"
msgstr "Nuove funzionalità grammaticali:"

#: whatsnew/3.12.rst:96
msgid ""
":ref:`PEP 701 <whatsnew312-pep701>`, :term:`f-strings <f-string>` in the "
"grammar"
msgstr ""
":ref:`PEP 701 <whatsnew312-pep701>`, :term:`f-strings <f-string>` nella "
"grammatica"

#: whatsnew/3.12.rst:98
msgid "Interpreter improvements:"
msgstr "Miglioramenti dell'interprete:"

#: whatsnew/3.12.rst:100
msgid ""
":ref:`PEP 684 <whatsnew312-pep684>`, a unique per-interpreter :term:`GIL "
"<global interpreter lock>`"
msgstr ""
":ref:`PEP 684 <whatsnew312-pep684>`, un :term:`GIL <global interpreter "
"lock>` univoco per interprete"

#: whatsnew/3.12.rst:102
msgid ":ref:`PEP 669 <whatsnew312-pep669>`, low impact monitoring"
msgstr ":ref:`PEP 669 <whatsnew312-pep669>`, monitoraggio a basso impatto"

#: whatsnew/3.12.rst:103
msgid ""
"`Improved 'Did you mean ...' suggestions <improved error messages_>`_ for "
":exc:`NameError`, :exc:`ImportError`, and :exc:`SyntaxError` exceptions"
msgstr ""
"`Suggerimenti migliorati 'Intendevi dire ...' <improved error messages_>`_ "
"per eccezioni :exc:`NameError`, :exc:`ImportError`, e :exc:`SyntaxError`"

#: whatsnew/3.12.rst:106
msgid "Python data model improvements:"
msgstr "Miglioramenti al modello di dati di Python:"

#: whatsnew/3.12.rst:108
msgid ""
":ref:`PEP 688 <whatsnew312-pep688>`, using the :ref:`buffer protocol "
"<bufferobjects>` from Python"
msgstr ""
":ref:`PEP 688 <whatsnew312-pep688>`, usando il :ref:`protocollo del buffer "
"<bufferobjects>` da Python"

#: whatsnew/3.12.rst:111
msgid "Significant improvements in the standard library:"
msgstr "Miglioramenti significativi nella libreria standard:"

#: whatsnew/3.12.rst:113
msgid "The :class:`pathlib.Path` class now supports subclassing"
msgstr "La classe :class:`pathlib.Path` ora supporta la sottoclassificazione"

#: whatsnew/3.12.rst:114
msgid "The :mod:`os` module received several improvements for Windows support"
msgstr ""
"Il modulo :mod:`os` ha ricevuto diversi miglioramenti per il supporto di "
"Windows"

#: whatsnew/3.12.rst:115
msgid ""
"A :ref:`command-line interface <sqlite3-cli>` has been added to the "
":mod:`sqlite3` module"
msgstr ""
"Un'interfaccia a riga di comando :ref:`interface <sqlite3-cli>` è stata "
"aggiunta al modulo :mod:`sqlite3`"

#: whatsnew/3.12.rst:117
msgid ""
":func:`isinstance` checks against :func:`runtime-checkable protocols "
"<typing.runtime_checkable>` enjoy a speed up of between two and 20 times"
msgstr ""
"I controlli :func:`isinstance` contro i protocolli :func:`runtime-checkable "
"<typing.runtime_checkable>` godono di un'accelerazione tra due e 20 volte"

#: whatsnew/3.12.rst:119
msgid ""
"The :mod:`asyncio` package has had a number of performance improvements, "
"with some benchmarks showing a 75% speed up."
msgstr ""
"Il pacchetto :mod:`asyncio` ha avuto numerosi miglioramenti di performance, "
"con alcuni benchmark che mostrano un'accelerazione del 75%."

#: whatsnew/3.12.rst:121
msgid ""
"A :ref:`command-line interface <uuid-cli>` has been added to the :mod:`uuid`"
" module"
msgstr ""
"Un'interfaccia a riga di comando :ref:`interface <uuid-cli>` è stata "
"aggiunta al modulo :mod:`uuid`"

#: whatsnew/3.12.rst:123
msgid ""
"Due to the changes in :ref:`PEP 701 <whatsnew312-pep701>`, producing tokens "
"via the :mod:`tokenize` module is up to 64% faster."
msgstr ""
"A causa delle modifiche nel :ref:`PEP 701 <whatsnew312-pep701>`, la "
"produzione di token tramite il modulo :mod:`tokenize` è fino al 64% più "
"veloce."

#: whatsnew/3.12.rst:126
msgid "Security improvements:"
msgstr "Miglioramenti alla sicurezza:"

#: whatsnew/3.12.rst:128
msgid ""
"Replace the builtin :mod:`hashlib` implementations of SHA1, SHA3, SHA2-384, "
"SHA2-512, and MD5 with formally verified code from the `HACL* "
"<https://github.com/hacl-star/hacl-star/>`__ project. These builtin "
"implementations remain as fallbacks that are only used when OpenSSL does not"
" provide them."
msgstr ""
"Sostituire le implementazioni integrate del modulo :mod:`hashlib` di SHA1, "
"SHA3, SHA2-384, SHA2-512 e MD5 con codice formalmente verificato dal "
"progetto `HACL* <https://github.com/hacl-star/hacl-star/>`__. Queste "
"implementazioni integrate rimangono come fallback che vengono utilizzate "
"solo quando OpenSSL non le fornisce."

#: whatsnew/3.12.rst:134
msgid "C API improvements:"
msgstr "Miglioramenti all'API C:"

#: whatsnew/3.12.rst:136
msgid ":ref:`PEP 697 <whatsnew312-pep697>`, unstable C API tier"
msgstr ":ref:`PEP 697 <whatsnew312-pep697>`, livello instabile dell'API C"

#: whatsnew/3.12.rst:137
msgid ":ref:`PEP 683 <whatsnew312-pep683>`, immortal objects"
msgstr ":ref:`PEP 683 <whatsnew312-pep683>`, oggetti immortali"

#: whatsnew/3.12.rst:139
msgid "CPython implementation improvements:"
msgstr "Miglioramenti all'implementazione di CPython:"

#: whatsnew/3.12.rst:141
msgid ":ref:`PEP 709 <whatsnew312-pep709>`, comprehension inlining"
msgstr ":ref:`PEP 709 <whatsnew312-pep709>`, inlining delle comprensioni"

#: whatsnew/3.12.rst:142
msgid ""
":ref:`CPython support <perf_profiling>` for the Linux ``perf`` profiler"
msgstr ""
":ref:`Supporto CPython <perf_profiling>` per il profiler ``perf`` su Linux"

#: whatsnew/3.12.rst:143
msgid "Implement stack overflow protection on supported platforms"
msgstr ""
"Implementare la protezione da overflow dello stack su piattaforme supportate"

#: whatsnew/3.12.rst:145
msgid "New typing features:"
msgstr "Nuove funzionalità di typing:"

#: whatsnew/3.12.rst:147
msgid ""
":ref:`PEP 692 <whatsnew312-pep692>`, using :class:`~typing.TypedDict` to "
"annotate :term:`**kwargs <argument>`"
msgstr ""
":ref:`PEP 692 <whatsnew312-pep692>`, utilizzo di :class:`~typing.TypedDict` "
"per annotare :term:`**kwargs <argument>`"

#: whatsnew/3.12.rst:149
msgid ":ref:`PEP 698 <whatsnew312-pep698>`, :func:`typing.override` decorator"
msgstr ""
":ref:`PEP 698 <whatsnew312-pep698>`, decoratore :func:`typing.override`"

#: whatsnew/3.12.rst:151
msgid "Important deprecations, removals or restrictions:"
msgstr "Deprecazioni, rimozioni o restrizioni importanti:"

#: whatsnew/3.12.rst:153
msgid ""
":pep:`623`: Remove ``wstr`` from Unicode objects in Python's C API, reducing"
" the size of every :class:`str` object by at least 8 bytes."
msgstr ""
":pep:`623`: Rimuovere ``wstr`` dagli oggetti Unicode nell'API C di Python, "
"riducendo la dimensione di ogni oggetto :class:`str` di almeno 8 byte."

#: whatsnew/3.12.rst:156
msgid ""
":pep:`632`: Remove the :mod:`!distutils` package. See `the migration guide "
"<https://peps.python.org/pep-0632/#migration-advice>`_ for advice replacing "
"the APIs it provided. The third-party `Setuptools "
"<https://setuptools.pypa.io/en/latest/deprecated/distutils-legacy.html>`__ "
"package continues to provide :mod:`!distutils`, if you still require it in "
"Python 3.12 and beyond."
msgstr ""
":pep:`632`: Rimuovere il pacchetto :mod:`!distutils`. Vedi `la guida alla "
"migrazione <https://peps.python.org/pep-0632/#migration-advice>`_ per "
"consigli sulla sostituzione delle API che forniva. Il pacchetto di terze "
"parti `Setuptools "
"<https://setuptools.pypa.io/en/latest/deprecated/distutils-legacy.html>`__ "
"continua a fornire :mod:`!distutils`, se ne hai ancora bisogno in Python "
"3.12 e oltre."

#: whatsnew/3.12.rst:163
msgid ""
":gh:`95299`: Do not pre-install ``setuptools`` in virtual environments "
"created with :mod:`venv`. This means that ``distutils``, ``setuptools``, "
"``pkg_resources``, and ``easy_install`` will no longer available by default;"
" to access these run ``pip install setuptools`` in the :ref:`activated "
"<venv-explanation>` virtual environment."
msgstr ""
":gh:`95299`: Non preinstallare ``setuptools`` negli ambienti virtuali creati"
" con :mod:`venv`. Ciò significa che ``distutils``, ``setuptools``, "
"``pkg_resources`` e ``easy_install`` non saranno più disponibili di default;"
" per accedervi eseguire ``pip install setuptools`` nell'ambiente virtuale "
":ref:`attivato <venv-explanation>`."

#: whatsnew/3.12.rst:170
msgid ""
"The :mod:`!asynchat`, :mod:`!asyncore`, and :mod:`!imp` modules have been "
"removed, along with several :class:`unittest.TestCase` `method aliases "
"<unittest-TestCase-removed-aliases_>`_."
msgstr ""
"I moduli :mod:`!asynchat`, :mod:`!asyncore` e :mod:`!imp` sono stati "
"rimossi, insieme a diversi `alias di metodo <unittest-TestCase-removed-"
"aliases_>`_ di :class:`unittest.TestCase`."

#: whatsnew/3.12.rst:1962
msgid "New Features"
msgstr "Nuove Funzionalità"

#: whatsnew/3.12.rst:181
msgid "PEP 695: Type Parameter Syntax"
msgstr "PEP 695: Sintassi dei Parametri di Tipo"

#: whatsnew/3.12.rst:183
msgid ""
"Generic classes and functions under :pep:`484` were declared using a verbose"
" syntax that left the scope of type parameters unclear and required explicit"
" declarations of variance."
msgstr ""
"Le classi generiche e le funzioni sotto :pep:`484` erano dichiarate "
"utilizzando una sintassi verbosa che lasciava poco chiaro l'ambito dei "
"parametri di tipo e richiedeva dichiarazioni esplicite di varianza."

#: whatsnew/3.12.rst:187
msgid ""
":pep:`695` introduces a new, more compact and explicit way to create "
":ref:`generic classes <generic-classes>` and :ref:`functions <generic-"
"functions>`::"
msgstr ""
":pep:`695` introduce un nuovo modo, più compatto ed esplicito, per creare "
":ref:`classi generiche <generic-classes>` e :ref:`funzioni <generic-"
"functions>`::"

#: whatsnew/3.12.rst:200
msgid ""
"In addition, the PEP introduces a new way to declare :ref:`type aliases "
"<type-aliases>` using the :keyword:`type` statement, which creates an "
"instance of :class:`~typing.TypeAliasType`::"
msgstr ""
"Inoltre, il PEP introduce un nuovo modo di dichiarare :ref:`alias di tipo "
"<type-aliases>` utilizzando l'istruzione :keyword:`type`, che crea "
"un'istanza di :class:`~typing.TypeAliasType`::"

#: whatsnew/3.12.rst:206
msgid "Type aliases can also be :ref:`generic <generic-type-aliases>`::"
msgstr ""
"Gli alias di tipo possono anche essere :ref:`generici <generic-type-"
"aliases>`::"

#: whatsnew/3.12.rst:210
msgid ""
"The new syntax allows declaring :class:`~typing.TypeVarTuple` and "
":class:`~typing.ParamSpec` parameters, as well as :class:`~typing.TypeVar` "
"parameters with bounds or constraints::"
msgstr ""
"La nuova sintassi consente di dichiarare parametri "
":class:`~typing.TypeVarTuple` e :class:`~typing.ParamSpec`, nonché parametri"
" :class:`~typing.TypeVar` con limiti o vincoli::"

#: whatsnew/3.12.rst:219
msgid ""
"The value of type aliases and the bound and constraints of type variables "
"created through this syntax are evaluated only on demand (see :ref:`lazy "
"evaluation <lazy-evaluation>`). This means type aliases are able to refer to"
" other types defined later in the file."
msgstr ""
"Il valore degli alias di tipo e i limiti e vincoli delle variabili di tipo "
"creati con questa sintassi sono valutati solo su richiesta (vedi :ref:`lazy "
"evaluation <lazy-evaluation>`). Ciò significa che gli alias di tipo possono "
"riferirsi ad altri tipi definiti successivamente nel file."

#: whatsnew/3.12.rst:224
msgid ""
"Type parameters declared through a type parameter list are visible within "
"the scope of the declaration and any nested scopes, but not in the outer "
"scope. For example, they can be used in the type annotations for the methods"
" of a generic class or in the class body. However, they cannot be used in "
"the module scope after the class is defined. See :ref:`type-params` for a "
"detailed description of the runtime semantics of type parameters."
msgstr ""
"I parametri di tipo dichiarati attraverso una lista di parametri di tipo "
"sono visibili all'interno dell'ambito della dichiarazione e in qualsiasi "
"ambito annidato, ma non nell'ambito esterno. Ad esempio, possono essere "
"utilizzati nelle annotazioni di tipo per i metodi di una classe generica o "
"nel corpo della classe. Tuttavia, non possono essere utilizzati nell'ambito "
"del modulo dopo che la classe è stata definita. Vedi :ref:`type-params` per "
"una descrizione dettagliata della semantica di runtime dei parametri di "
"tipo."

#: whatsnew/3.12.rst:231
msgid ""
"In order to support these scoping semantics, a new kind of scope is "
"introduced, the :ref:`annotation scope <annotation-scopes>`. Annotation "
"scopes behave for the most part like function scopes, but interact "
"differently with enclosing class scopes. In Python 3.13, :term:`annotations "
"<annotation>` will also be evaluated in annotation scopes."
msgstr ""
"Per supportare questa semantica di ambito, è stato introdotto un nuovo tipo "
"di ambito, l':ref:`annotation scope <annotation-scopes>`. Gli ambiti di "
"annotazione si comportano per lo più come gli ambiti delle funzioni, ma "
"interagiscono in modo diverso con gli ambiti della classe che li contengono."
" In Python 3.13, le :term:`annotazioni <annotation>` saranno valutate negli "
"ambiti di annotazione."

#: whatsnew/3.12.rst:237
msgid "See :pep:`695` for more details."
msgstr "Vedi :pep:`695` per ulteriori dettagli."

#: whatsnew/3.12.rst:239
msgid ""
"(PEP written by Eric Traut. Implementation by Jelle Zijlstra, Eric Traut, "
"and others in :gh:`103764`.)"
msgstr ""
"(PEP scritto da Eric Traut. Implementazione di Jelle Zijlstra, Eric Traut e "
"altri in :gh:`103764`.)"

#: whatsnew/3.12.rst:245
msgid "PEP 701: Syntactic formalization of f-strings"
msgstr "PEP 701: Formalizzazione sintattica delle f-string"

#: whatsnew/3.12.rst:247
msgid ""
":pep:`701` lifts some restrictions on the usage of :term:`f-strings "
"<f-string>`. Expression components inside f-strings can now be any valid "
"Python expression, including strings reusing the same quote as the "
"containing f-string, multi-line expressions, comments, backslashes, and "
"unicode escape sequences. Let's cover these in detail:"
msgstr ""
":pep:`701` rimuove alcune restrizioni sull'uso delle :term:`f-string "
"<f-string>`. Gli elementi dell'espressione all'interno delle f-string "
"possono ora essere qualsiasi espressione Python valida, incluse stringhe che"
" riutilizzano la stessa virgoletta della f-string contenente, espressioni "
"multilinea, commenti, backslash e sequenze di escape unicode. Approfondiamo "
"questi aspetti in dettaglio:"

#: whatsnew/3.12.rst:253
msgid ""
"Quote reuse: in Python 3.11, reusing the same quotes as the enclosing "
"f-string raises a :exc:`SyntaxError`, forcing the user to either use other "
"available quotes (like using double quotes or triple quotes if the f-string "
"uses single quotes). In Python 3.12, you can now do things like this:"
msgstr ""
"Riutilizzo delle virgolette: in Python 3.11, riutilizzare le stesse "
"virgolette della f-string contenente genera un'eccezione :exc:`SyntaxError`,"
" costringendo l'utente a utilizzare altre virgolette disponibili (come l'uso"
" delle virgolette doppie o delle virgolette triple se la f-string usa "
"virgolette singole). In Python 3.12, è ora possibile fare cose come questa:"

#: whatsnew/3.12.rst:262
msgid ""
"Note that before this change there was no explicit limit in how f-strings "
"can be nested, but the fact that string quotes cannot be reused inside the "
"expression component of f-strings made it impossible to nest f-strings "
"arbitrarily. In fact, this is the most nested f-string that could be "
"written:"
msgstr ""
"Prima di questa modifica non esisteva un limite esplicito su come le "
"f-string potessero essere annidate, ma il fatto che le virgolette delle "
"stringhe non potessero essere riutilizzate all'interno dell'elemento di "
"espressione delle f-string rendeva impossibile annidare le f-string "
"arbitrariamente. Infatti, questa è l'f-string più annidata che poteva essere"
" scritta:"

#: whatsnew/3.12.rst:270
msgid ""
"As now f-strings can contain any valid Python expression inside expression "
"components, it is now possible to nest f-strings arbitrarily:"
msgstr ""
"Poiché ora le f-string possono contenere qualsiasi espressione Python valida"
" all'interno degli elementi di espressione, è ora possibile annidare le "
"f-string arbitrariamente:"

#: whatsnew/3.12.rst:276
msgid ""
"Multi-line expressions and comments: In Python 3.11, f-string expressions "
"must be defined in a single line, even if the expression within the f-string"
" could normally span multiple lines (like literal lists being defined over "
"multiple lines), making them harder to read. In Python 3.12 you can now "
"define f-strings spanning multiple lines, and add inline comments:"
msgstr ""
"Espressioni multilinea e commenti: in Python 3.11, le espressioni "
"all'interno delle f-string devono essere definite in una singola riga, anche"
" se l'espressione all'interno della f-string potrebbe normalmente estendersi"
" su più righe (come le liste letterali definite su più righe), rendendole "
"più difficili da leggere. In Python 3.12 è ora possibile definire f-string "
"che si estendono su più righe e aggiungere commenti in linea:"

#: whatsnew/3.12.rst:290
msgid ""
"Backslashes and unicode characters: before Python 3.12 f-string expressions "
"couldn't contain any ``\\`` character. This also affected unicode "
":ref:`escape sequences <escape-sequences>` (such as ``\\N{snowman}``) as "
"these contain the ``\\N`` part that previously could not be part of "
"expression components of f-strings. Now, you can define expressions like "
"this:"
msgstr ""
"Backslash e caratteri unicode: prima di Python 3.12, le espressioni f-string"
" non potevano contenere alcun carattere ``\\``. Questo influenzava anche le "
":ref:`sequenze di escape <escape-sequences>` unicode (come ``\\N{snowman}``)"
" poiché contengono la parte ``\\N`` che prima non poteva far parte degli "
"elementi di espressione delle f-string. Ora puoi definire espressioni come "
"questa:"

#: whatsnew/3.12.rst:303
msgid "See :pep:`701` for more details."
msgstr "Vedi :pep:`701` per ulteriori dettagli."

#: whatsnew/3.12.rst:305
msgid ""
"As a positive side-effect of how this feature has been implemented (by "
"parsing f-strings with :pep:`the PEG parser <617>`), now error messages for "
"f-strings are more precise and include the exact location of the error. For "
"example, in Python 3.11, the following f-string raises a :exc:`SyntaxError`:"
msgstr ""
"Come effetto collaterale positivo di come questa funzione è stata "
"implementata (parsing delle f-string con :pep:`il PEG parser <617>`), ora i "
"messaggi di errore per le f-string sono più precisi e includono l'esatta "
"posizione dell'errore. Ad esempio, in Python 3.11, la seguente f-string "
"genera un'eccezione :exc:`SyntaxError`:"

#: whatsnew/3.12.rst:318
msgid ""
"but the error message doesn't include the exact location of the error within"
" the line and also has the expression artificially surrounded by "
"parentheses. In Python 3.12, as f-strings are parsed with the PEG parser, "
"error messages can be more precise and show the entire line:"
msgstr ""
"ma il messaggio di errore non include l'esatta posizione dell'errore "
"all'interno della riga e ha anche l'espressione circondata artificialmente "
"da parentesi. In Python 3.12, poiché le f-string sono parse con il PEG "
"parser, i messaggi di errore possono essere più precisi e mostrare l'intera "
"riga:"

#: whatsnew/3.12.rst:330
msgid ""
"(Contributed by Pablo Galindo, Batuhan Taskaya, Lysandros Nikolaou, Cristián"
" Maureira-Fredes and Marta Gómez in :gh:`102856`. PEP written by Pablo "
"Galindo, Batuhan Taskaya, Lysandros Nikolaou and Marta Gómez)."
msgstr ""
"(Contributi da Pablo Galindo, Batuhan Taskaya, Lysandros Nikolaou, Cristián "
"Maureira-Fredes e Marta Gómez in :gh:`102856`. PEP scritto da Pablo Galindo,"
" Batuhan Taskaya, Lysandros Nikolaou e Marta Gómez)."

#: whatsnew/3.12.rst:337
msgid "PEP 684: A Per-Interpreter GIL"
msgstr "PEP 684: Un GIL per interprete"

#: whatsnew/3.12.rst:339
msgid ""
":pep:`684` introduces a per-interpreter :term:`GIL <global interpreter "
"lock>`, so that sub-interpreters may now be created with a unique GIL per "
"interpreter. This allows Python programs to take full advantage of multiple "
"CPU cores. This is currently only available through the C-API, though a "
"Python API is :pep:`anticipated for 3.13 <554>`."
msgstr ""
":pep:`684` introduce un :term:`GIL <global interpreter lock>` per "
"interprete, in modo che gli interpreti secondari possano ora essere creati "
"con un GIL unico per interprete. Questo consente ai programmi Python di "
"sfruttare appieno i core della CPU multipli. Attualmente è disponibile solo "
"tramite la C-API, sebbene si :pep:`preveda una API Python per la versione "
"3.13 <554>`."

#: whatsnew/3.12.rst:345
msgid ""
"Use the new :c:func:`Py_NewInterpreterFromConfig` function to create an "
"interpreter with its own GIL:"
msgstr ""
"Usa la nuova funzione :c:func:`Py_NewInterpreterFromConfig` per creare un "
"interprete con il proprio GIL:"

#: whatsnew/3.12.rst:361
msgid ""
"For further examples how to use the C-API for sub-interpreters with a per-"
"interpreter GIL, see :source:`Modules/_xxsubinterpretersmodule.c`."
msgstr ""
"Per ulteriori esempi su come utilizzare la C-API per interpreti secondari "
"con un GIL per interprete, vedi "
":source:`Modules/_xxsubinterpretersmodule.c`."

#: whatsnew/3.12.rst:364
msgid "(Contributed by Eric Snow in :gh:`104210`, etc.)"
msgstr "(Contributi da Eric Snow in :gh:`104210`, ecc.)"

#: whatsnew/3.12.rst:369
msgid "PEP 669: Low impact monitoring for CPython"
msgstr "PEP 669: Monitoraggio a basso impatto per CPython"

#: whatsnew/3.12.rst:371
msgid ""
":pep:`669` defines a new :mod:`API <sys.monitoring>` for profilers, "
"debuggers, and other tools to monitor events in CPython. It covers a wide "
"range of events, including calls, returns, lines, exceptions, jumps, and "
"more. This means that you only pay for what you use, providing support for "
"near-zero overhead debuggers and coverage tools. See  :mod:`sys.monitoring` "
"for details."
msgstr ""
":pep:`669` definisce una nuova :mod:`API <sys.monitoring>` per profiler, "
"debugger e altri strumenti per monitorare eventi in CPython. Copre una vasta"
" gamma di eventi, inclusi chiamate, ritorni, righe, eccezioni, salti e "
"altro. Questo significa che paghi solo per quello che usi, fornendo supporto"
" per strumenti di debug e copertura a quasi zero overhead. Vedi "
":mod:`sys.monitoring` per i dettagli."

#: whatsnew/3.12.rst:379
msgid "(Contributed by Mark Shannon in :gh:`103082`.)"
msgstr "(Contributi da Mark Shannon in :gh:`103082`.)"

#: whatsnew/3.12.rst:384
msgid "PEP 688: Making the buffer protocol accessible in Python"
msgstr "PEP 688: Rendere accessibile il protocollo buffer in Python"

#: whatsnew/3.12.rst:386
msgid ""
":pep:`688` introduces a way to use the :ref:`buffer protocol "
"<bufferobjects>` from Python code. Classes that implement the "
":meth:`~object.__buffer__` method are now usable as buffer types."
msgstr ""
":pep:`688` introduce un modo per utilizzare il :ref:`protocollo buffer "
"<bufferobjects>` dal codice Python. Le classi che implementano il metodo "
":meth:`~object.__buffer__` sono ora utilizzabili come tipi di buffer."

#: whatsnew/3.12.rst:390
msgid ""
"The new :class:`collections.abc.Buffer` ABC provides a standard way to "
"represent buffer objects, for example in type annotations. The new "
":class:`inspect.BufferFlags` enum represents the flags that can be used to "
"customize buffer creation. (Contributed by Jelle Zijlstra in :gh:`102500`.)"
msgstr ""
"Il nuovo ABC :class:`collections.abc.Buffer` fornisce un modo standard per "
"rappresentare oggetti buffer, ad esempio nelle annotazioni di tipo. Il nuovo"
" enumerativo :class:`inspect.BufferFlags` rappresenta i flag che possono "
"essere utilizzati per personalizzare la creazione del buffer. (Contributo di"
" Jelle Zijlstra in :gh:`102500`.)"

#: whatsnew/3.12.rst:399
msgid "PEP 709: Comprehension inlining"
msgstr "PEP 709: Inlining delle comprehension"

#: whatsnew/3.12.rst:401
msgid ""
"Dictionary, list, and set comprehensions are now inlined, rather than "
"creating a new single-use function object for each execution of the "
"comprehension. This speeds up execution of a comprehension by up to two "
"times. See :pep:`709` for further details."
msgstr ""
"Le comprehension di dizionari, liste e set sono ora inlined, piuttosto che "
"creare un nuovo oggetto funzione monouso per ogni esecuzione della "
"comprehension. Questo accelera l'esecuzione di una comprehension fino a due "
"volte. Vedi :pep:`709` per ulteriori dettagli."

#: whatsnew/3.12.rst:406
msgid ""
"Comprehension iteration variables remain isolated and don't overwrite a "
"variable of the same name in the outer scope, nor are they visible after the"
" comprehension. Inlining does result in a few visible behavior changes:"
msgstr ""
"Le variabili di iterazione delle comprehension rimangono isolate e non "
"sovrascrivono una variabile con lo stesso nome nell'ambito esterno, né sono "
"visibili dopo la comprehension. L'inlining comporta alcuni cambiamenti di "
"comportamento visibili:"

#: whatsnew/3.12.rst:410
msgid ""
"There is no longer a separate frame for the comprehension in tracebacks, and"
" tracing/profiling no longer shows the comprehension as a function call."
msgstr ""
"Nei traceback non c'è più un frame separato per la comprehension, e il "
"tracciamento/profiling non mostra più la comprehension come una chiamata di "
"funzione."

#: whatsnew/3.12.rst:412
msgid ""
"The :mod:`symtable` module will no longer produce child symbol tables for "
"each comprehension; instead, the comprehension's locals will be included in "
"the parent function's symbol table."
msgstr ""
"Il modulo :mod:`symtable` non produrrà più tabelle simbolo figlie per ogni "
"comprehension; invece, le variabili locali della comprehension saranno "
"incluse nella tabella simbolo della funzione principale."

#: whatsnew/3.12.rst:415
msgid ""
"Calling :func:`locals` inside a comprehension now includes variables from "
"outside the comprehension, and no longer includes the synthetic ``.0`` "
"variable for the comprehension \"argument\"."
msgstr ""
"Chiamando :func:`locals` all'interno di una comprehension ora include "
"variabili dall'esterno della comprehension e non include più la variabile "
"sintetica ``.0`` per \"l'argomento\" della comprehension."

#: whatsnew/3.12.rst:418
msgid ""
"A comprehension iterating directly over ``locals()`` (e.g. ``[k for k in "
"locals()]``) may see \"RuntimeError: dictionary changed size during "
"iteration\" when run under tracing (e.g. code coverage measurement). This is"
" the same behavior already seen in e.g. ``for k in locals():``. To avoid the"
" error, first create a list of keys to iterate over: ``keys = "
"list(locals()); [k for k in keys]``."
msgstr ""
"Una comprehension che itera direttamente su ``locals()`` (ad es. ``[k for k "
"in locals()]``) potrebbe vedere \"RuntimeError: dimensione del dizionario "
"cambiata durante l'iterazione\" quando eseguita sotto tracciamento (ad es. "
"misurazione della copertura del codice). Questo è lo stesso comportamento "
"già visto, ad es. ``for k in locals():``. Per evitare l'errore, prima crea "
"una lista di chiavi da iterare: ``keys = list(locals()); [k for k in "
"keys]``."

#: whatsnew/3.12.rst:425
msgid "(Contributed by Carl Meyer and Vladimir Matveev in :pep:`709`.)"
msgstr "(Contributi di Carl Meyer e Vladimir Matveev in :pep:`709`.)"

#: whatsnew/3.12.rst:428
msgid "Improved Error Messages"
msgstr "Messaggi di errore migliorati"

#: whatsnew/3.12.rst:430
msgid ""
"Modules from the standard library are now potentially suggested as part of "
"the error messages displayed by the interpreter when a :exc:`NameError` is "
"raised to the top level. (Contributed by Pablo Galindo in :gh:`98254`.)"
msgstr ""
"I moduli della libreria standard sono ora potenzialmente suggeriti come "
"parte dei messaggi di errore visualizzati dall'interprete quando "
"un'eccezione :exc:`NameError` viene sollevata a livello superiore. "
"(Contributi da Pablo Galindo in :gh:`98254`.)"

#: whatsnew/3.12.rst:439
msgid ""
"Improve the error suggestion for :exc:`NameError` exceptions for instances. "
"Now if a :exc:`NameError` is raised in a method and the instance has an "
"attribute that's exactly equal to the name in the exception, the suggestion "
"will include ``self.<NAME>`` instead of the closest match in the method "
"scope. (Contributed by Pablo Galindo in :gh:`99139`.)"
msgstr ""
"Migliora il suggerimento di errore per le eccezioni :exc:`NameError` per le "
"istanze. Ora, se un'eccezione :exc:`NameError` viene sollevata in un metodo "
"e l'istanza ha un attributo esattamente uguale al nome nell'eccezione, il "
"suggerimento includerà ``self.<NAME>`` invece della corrispondenza più "
"vicina nell'ambito del metodo. (Contributi da Pablo Galindo in :gh:`99139`.)"

#: whatsnew/3.12.rst:459
msgid ""
"Improve the :exc:`SyntaxError` error message when the user types ``import x "
"from y`` instead of ``from y import x``. (Contributed by Pablo Galindo in "
":gh:`98931`.)"
msgstr ""
"Migliora il messaggio di errore :exc:`SyntaxError` quando l'utente digita "
"``import x from y`` invece di ``from y import x``. (Contributi da Pablo "
"Galindo in :gh:`98931`.)"

#: whatsnew/3.12.rst:469
msgid ""
":exc:`ImportError` exceptions raised from failed ``from <module> import "
"<name>`` statements now include suggestions for the value of ``<name>`` "
"based on the available names in ``<module>``. (Contributed by Pablo Galindo "
"in :gh:`91058`.)"
msgstr ""
"Le eccezioni :exc:`ImportError` sollevate da dichiarazioni di ``from "
"<module> import <name>`` fallite includono ora suggerimenti per il valore di"
" ``<name>`` basati sui nomi disponibili in ``<module>``. (Contributi da "
"Pablo Galindo in :gh:`91058`.)"

#: whatsnew/3.12.rst:480
msgid "New Features Related to Type Hints"
msgstr "Nuove funzionalità relative agli hint di tipo"

#: whatsnew/3.12.rst:482
msgid ""
"This section covers major changes affecting :pep:`type hints <484>` and the "
":mod:`typing` module."
msgstr ""
"Questa sezione copre le principali modifiche che riguardano :pep:`type hints"
" <484>` e il modulo :mod:`typing`."

#: whatsnew/3.12.rst:488
msgid "PEP 692: Using ``TypedDict`` for more precise ``**kwargs`` typing"
msgstr ""
"PEP 692: Utilizzo di ``TypedDict`` per una digitazione ``**kwargs`` più "
"precisa"

#: whatsnew/3.12.rst:490
msgid ""
"Typing ``**kwargs`` in a function signature as introduced by :pep:`484` "
"allowed for valid annotations only in cases where all of the ``**kwargs`` "
"were of the same type."
msgstr ""
"La digitazione di ``**kwargs`` in una firma di funzione introdotta da "
":pep:`484` consentiva annotazioni valide solo nei casi in cui tutti i "
"``**kwargs`` erano dello stesso tipo."

#: whatsnew/3.12.rst:494
msgid ""
":pep:`692` specifies a more precise way of typing ``**kwargs`` by relying on"
" typed dictionaries::"
msgstr ""
":pep:`692` specifica un modo più preciso di digitare ``**kwargs`` "
"affidandosi a dizionari tipizzati::"

#: whatsnew/3.12.rst:505
msgid "See :pep:`692` for more details."
msgstr "Vedi :pep:`692` per ulteriori dettagli."

#: whatsnew/3.12.rst:507
msgid "(Contributed by Franek Magiera in :gh:`103629`.)"
msgstr "(Contributo di Franek Magiera in :gh:`103629`.)"

#: whatsnew/3.12.rst:512
msgid "PEP 698: Override Decorator for Static Typing"
msgstr "PEP 698: Decoratore Override per tipizzazione statica"

#: whatsnew/3.12.rst:514
msgid ""
"A new decorator :func:`typing.override` has been added to the :mod:`typing` "
"module. It indicates to type checkers that the method is intended to "
"override a method in a superclass. This allows type checkers to catch "
"mistakes where a method that is intended to override something in a base "
"class does not in fact do so."
msgstr ""
"Un nuovo decoratore :func:`typing.override` è stato aggiunto al modulo "
":mod:`typing`. Indica ai checker di tipo che il metodo è destinato a "
"sovrascrivere un metodo in una superclasse. Questo consente ai checker di "
"tipo di rilevare errori in cui un metodo che dovrebbe sovrascrivere qualcosa"
" in una classe base in realtà non lo fa."

#: whatsnew/3.12.rst:520
msgid "Example::"
msgstr "Esempio::"

#: whatsnew/3.12.rst:538
msgid "See :pep:`698` for more details."
msgstr "Vedere :pep:`698` per maggiori dettagli."

#: whatsnew/3.12.rst:540
msgid "(Contributed by Steven Troxler in :gh:`101561`.)"
msgstr "(Contributo di Steven Troxler in :gh:`101561`.)"

#: whatsnew/3.12.rst:543
msgid "Other Language Changes"
msgstr "Altre modifiche al Linguaggio"

#: whatsnew/3.12.rst:545
msgid ""
"The parser now raises :exc:`SyntaxError` when parsing source code containing"
" null bytes. (Contributed by Pablo Galindo in :gh:`96670`.)"
msgstr ""
"Il parser ora solleva :exc:`SyntaxError` quando analizza il codice sorgente "
"contenente byte nulli. (Contributo di Pablo Galindo in :gh:`96670`.)"

#: whatsnew/3.12.rst:548
msgid ""
"A backslash-character pair that is not a valid escape sequence now generates"
" a :exc:`SyntaxWarning`, instead of :exc:`DeprecationWarning`. For example, "
"``re.compile(\"\\d+\\.\\d+\")`` now emits a :exc:`SyntaxWarning` "
"(``\"\\d\"`` is an invalid escape sequence, use raw strings for regular "
"expression: ``re.compile(r\"\\d+\\.\\d+\")``). In a future Python version, "
":exc:`SyntaxError` will eventually be raised, instead of "
":exc:`SyntaxWarning`. (Contributed by Victor Stinner in :gh:`98401`.)"
msgstr ""
"Una coppia carattere-barra rovesciata che non è una sequenza di escape "
"valida ora genera un :exc:`SyntaxWarning`, invece di un "
":exc:`DeprecationWarning`. Ad esempio, ``re.compile(\"\\d+\\.\\d+\")`` ora "
"emette un :exc:`SyntaxWarning` (``\"\\d\"`` è una sequenza di escape non "
"valida, utilizzare stringhe raw per le espressioni regolari: "
"``re.compile(r\"\\d+\\.\\d+\")``). In una futura versione di Python, verrà "
"infine sollevato un :exc:`SyntaxError`, invece di un :exc:`SyntaxWarning`. "
"(Contributo di Victor Stinner in :gh:`98401`.)"

#: whatsnew/3.12.rst:557
msgid ""
"Octal escapes with value larger than ``0o377`` (ex: ``\"\\477\"``), "
"deprecated in Python 3.11, now produce a :exc:`SyntaxWarning`, instead of "
":exc:`DeprecationWarning`. In a future Python version they will be "
"eventually a :exc:`SyntaxError`. (Contributed by Victor Stinner in "
":gh:`98401`.)"
msgstr ""
"Le sequenze di escape ottali con valore maggiore di ``0o377`` (es: "
"``\"\\477\"``), deprecate in Python 3.11, ora producono un "
":exc:`SyntaxWarning`, invece di un :exc:`DeprecationWarning`. In una futura "
"versione di Python, diventeranno infine un :exc:`SyntaxError`. (Contributo "
"di Victor Stinner in :gh:`98401`.)"

#: whatsnew/3.12.rst:563
msgid ""
"Variables used in the target part of comprehensions that are not stored to "
"can now be used in assignment expressions (``:=``). For example, in ``[(b :="
" 1) for a, b.prop in some_iter]``, the assignment to ``b`` is now allowed. "
"Note that assigning to variables stored to in the target part of "
"comprehensions (like ``a``) is still disallowed, as per :pep:`572`. "
"(Contributed by Nikita Sobolev in :gh:`100581`.)"
msgstr ""
"Le variabili utilizzate nella parte target delle comprensioni che non "
"vengono memorizzate possono ora essere utilizzate nelle espressioni di "
"assegnazione (``:=``). Ad esempio, in ``[(b := 1) for a, b.prop in "
"some_iter]``, l'assegnazione a ``b`` è ora consentita. Si noti che "
"l'assegnazione a variabili memorizzate nella parte target delle comprensioni"
" (come ``a``) è ancora vietata, come per :pep:`572`. (Contributo di Nikita "
"Sobolev in :gh:`100581`.)"

#: whatsnew/3.12.rst:570
msgid ""
"Exceptions raised in a class or type's ``__set_name__`` method are no longer"
" wrapped by a :exc:`RuntimeError`. Context information is added to the "
"exception as a :pep:`678` note. (Contributed by Irit Katriel in "
":gh:`77757`.)"
msgstr ""
"Le eccezioni sollevate nel metodo ``__set_name__`` di una classe o di un "
"tipo non vengono più avvolte da un :exc:`RuntimeError`. Le informazioni di "
"contesto vengono aggiunte all'eccezione come nota :pep:`678`. (Contributo di"
" Irit Katriel in :gh:`77757`.)"

#: whatsnew/3.12.rst:574
msgid ""
"When a ``try-except*`` construct handles the entire :exc:`ExceptionGroup` "
"and raises one other exception, that exception is no longer wrapped in an "
":exc:`ExceptionGroup`. Also changed in version 3.11.4. (Contributed by Irit "
"Katriel in :gh:`103590`.)"
msgstr ""
"Quando una costruzione ``try-except*`` gestisce l'intero "
":exc:`ExceptionGroup` e solleva un'altra eccezione, quella eccezione non è "
"più avvolta in un :exc:`ExceptionGroup`. Anche modificato nella versione "
"3.11.4. (Contributo di Irit Katriel in :gh:`103590`.)"

#: whatsnew/3.12.rst:579
msgid ""
"The Garbage Collector now runs only on the eval breaker mechanism of the "
"Python bytecode evaluation loop instead of object allocations. The GC can "
"also run when :c:func:`PyErr_CheckSignals` is called so C extensions that "
"need to run for a long time without executing any Python code also have a "
"chance to execute the GC periodically. (Contributed by Pablo Galindo in "
":gh:`97922`.)"
msgstr ""
"Il Garbage Collector ora viene eseguito solo sul meccanismo eval breaker del"
" ciclo di valutazione del bytecode Python invece delle allocazioni di "
"oggetti. Il GC può anche essere eseguito quando viene chiamato "
":c:func:`PyErr_CheckSignals` in modo che le estensioni C che devono essere "
"eseguite per lungo tempo senza eseguire alcun codice Python abbiano anche la"
" possibilità di eseguire periodicamente il GC. (Contributo di Pablo Galindo "
"in :gh:`97922`.)"

#: whatsnew/3.12.rst:586
msgid ""
"All builtin and extension callables expecting boolean parameters now accept "
"arguments of any type instead of just :class:`bool` and :class:`int`. "
"(Contributed by Serhiy Storchaka in :gh:`60203`.)"
msgstr ""
"Tutti i callable builtin e delle estensioni che si aspettano parametri "
"booleani ora accettano argomenti di qualsiasi tipo invece di soli "
":class:`bool` e :class:`int`. (Contributo di Serhiy Storchaka in "
":gh:`60203`.)"

#: whatsnew/3.12.rst:590
msgid ""
":class:`memoryview` now supports the half-float type (the \"e\" format "
"code). (Contributed by Donghee Na and Antoine Pitrou in :gh:`90751`.)"
msgstr ""
":class:`memoryview` supporta ora il tipo half-float (il codice di formato "
"\"e\"). (Contributo di Donghee Na e Antoine Pitrou in :gh:`90751`.)"

#: whatsnew/3.12.rst:593
msgid ""
":class:`slice` objects are now hashable, allowing them to be used as dict "
"keys and set items. (Contributed by Will Bradshaw, Furkan Onder, and Raymond"
" Hettinger in :gh:`101264`.)"
msgstr ""
"Gli oggetti :class:`slice` sono ora hashabili, consentendo loro di essere "
"utilizzati come chiavi di dizionari e elementi di insiemi. (Contributo di "
"Will Bradshaw, Furkan Onder e Raymond Hettinger in :gh:`101264`.)"

#: whatsnew/3.12.rst:596
msgid ""
":func:`sum` now uses Neumaier summation to improve accuracy and "
"commutativity when summing floats or mixed ints and floats. (Contributed by "
"Raymond Hettinger in :gh:`100425`.)"
msgstr ""
":func:`sum` utilizza ora la sommatoria Neumaier per migliorare la precisione"
" e la commutatività quando si sommano float o mix di int e float. "
"(Contributo di Raymond Hettinger in :gh:`100425`.)"

#: whatsnew/3.12.rst:600
msgid ""
":func:`ast.parse` now raises :exc:`SyntaxError` instead of :exc:`ValueError`"
" when parsing source code containing null bytes. (Contributed by Pablo "
"Galindo in :gh:`96670`.)"
msgstr ""
":func:`ast.parse` solleva ora :exc:`SyntaxError` invece di :exc:`ValueError`"
" quando analizza il codice sorgente contenente byte nulli. (Contributo di "
"Pablo Galindo in :gh:`96670`.)"

#: whatsnew/3.12.rst:604
msgid ""
"The extraction methods in :mod:`tarfile`, and :func:`shutil.unpack_archive`,"
" have a new a *filter* argument that allows limiting tar features than may "
"be surprising or dangerous, such as creating files outside the destination "
"directory. See :ref:`tarfile extraction filters <tarfile-extraction-filter>`"
" for details. In Python 3.14, the default will switch to ``'data'``. "
"(Contributed by Petr Viktorin in :pep:`706`.)"
msgstr ""
"I metodi di estrazione in :mod:`tarfile`, e :func:`shutil.unpack_archive`, "
"hanno un nuovo argomento *filter* che consente di limitare le funzionalità "
"tar che possono essere sorprendenti o pericolose, come la creazione di file "
"al di fuori della directory di destinazione. Vedere :ref:`tarfile extraction"
" filters <tarfile-extraction-filter>` per ulteriori dettagli. In Python "
"3.14, il valore predefinito passerà a ``'data'``. (Contributo di Petr "
"Viktorin in :pep:`706`.)"

#: whatsnew/3.12.rst:612
msgid ""
":class:`types.MappingProxyType` instances are now hashable if the underlying"
" mapping is hashable. (Contributed by Serhiy Storchaka in :gh:`87995`.)"
msgstr ""
"Le istanze di :class:`types.MappingProxyType` sono ora hashabili se la mappa"
" sottostante è hashabile. (Contributo di Serhiy Storchaka in :gh:`87995`.)"

#: whatsnew/3.12.rst:616
msgid ""
"Add :ref:`support for the perf profiler <perf_profiling>` through the new "
"environment variable :envvar:`PYTHONPERFSUPPORT` and command-line option "
":option:`-X perf <-X>`, as well as the new "
":func:`sys.activate_stack_trampoline`, "
":func:`sys.deactivate_stack_trampoline`, and "
":func:`sys.is_stack_trampoline_active` functions. (Design by Pablo Galindo. "
"Contributed by Pablo Galindo and Christian Heimes with contributions from "
"Gregory P. Smith [Google] and Mark Shannon in :gh:`96123`.)"
msgstr ""
"Aggiungo :ref:`supporto per il profiler perf <perf_profiling>` attraverso la"
" nuova variabile di ambiente :envvar:`PYTHONPERFSUPPORT` e l'opzione da riga"
" di comando :option:`-X perf <-X>`, così come le nuove funzioni "
":func:`sys.activate_stack_trampoline`, "
":func:`sys.deactivate_stack_trampoline` e "
":func:`sys.is_stack_trampoline_active`. (Progettazione di Pablo Galindo. "
"Contributo di Pablo Galindo e Christian Heimes con contributi di Gregory P. "
"Smith [Google] e Mark Shannon in :gh:`96123`.)"

#: whatsnew/3.12.rst:628
msgid "New Modules"
msgstr "Nuovi Moduli"

#: whatsnew/3.12.rst:630
msgid "None."
msgstr "Nessuno."

#: whatsnew/3.12.rst:634
msgid "Improved Modules"
msgstr "Moduli Migliorati"

#: whatsnew/3.12.rst:637
msgid "array"
msgstr "array"

#: whatsnew/3.12.rst:639
msgid ""
"The :class:`array.array` class now supports subscripting, making it a "
":term:`generic type`. (Contributed by Jelle Zijlstra in :gh:`98658`.)"
msgstr ""
"La classe :class:`array.array` ora supporta il subscript, rendendola un "
":term:`generic type`. (Contributo di Jelle Zijlstra in :gh:`98658`.)"

#: whatsnew/3.12.rst:643
msgid "asyncio"
msgstr "asyncio"

#: whatsnew/3.12.rst:645
msgid ""
"The performance of writing to sockets in :mod:`asyncio` has been "
"significantly improved. ``asyncio`` now avoids unnecessary copying when "
"writing to sockets and uses :meth:`~socket.socket.sendmsg` if the platform "
"supports it. (Contributed by Kumar Aditya in :gh:`91166`.)"
msgstr ""
"Le prestazioni della scrittura sui socket in :mod:`asyncio` sono state "
"notevolmente migliorate. ``asyncio`` ora evita copie non necessarie durante "
"la scrittura sui socket e utilizza :meth:`~socket.socket.sendmsg` se la "
"piattaforma lo supporta. (Contributo di Kumar Aditya in :gh:`91166`.)"

#: whatsnew/3.12.rst:650
msgid ""
"Add :func:`asyncio.eager_task_factory` and "
":func:`asyncio.create_eager_task_factory` functions to allow opting an event"
" loop in to eager task execution, making some use-cases 2x to 5x faster. "
"(Contributed by Jacob Bower & Itamar Oren in :gh:`102853`, :gh:`104140`, and"
" :gh:`104138`)"
msgstr ""
"Aggiungo le funzioni :func:`asyncio.eager_task_factory` e "
":func:`asyncio.create_eager_task_factory` per permettere a un event loop di "
"optare per l'esecuzione rapida dei task, rendendo alcuni casi d'uso 2x a 5x "
"più veloci. (Contributo di Jacob Bower & Itamar Oren in :gh:`102853`, "
":gh:`104140` e :gh:`104138`)"

#: whatsnew/3.12.rst:655
msgid ""
"On Linux, :mod:`asyncio` uses :class:`asyncio.PidfdChildWatcher` by default "
"if :func:`os.pidfd_open` is available and functional instead of "
":class:`asyncio.ThreadedChildWatcher`. (Contributed by Kumar Aditya in "
":gh:`98024`.)"
msgstr ""
"Su Linux, :mod:`asyncio` utilizza :class:`asyncio.PidfdChildWatcher` di "
"default se :func:`os.pidfd_open` è disponibile e funzionale invece di "
":class:`asyncio.ThreadedChildWatcher`. (Contributo di Kumar Aditya in "
":gh:`98024`.)"

#: whatsnew/3.12.rst:660
msgid ""
"The event loop now uses the best available child watcher for each platform "
"(:class:`asyncio.PidfdChildWatcher` if supported and "
":class:`asyncio.ThreadedChildWatcher` otherwise), so manually configuring a "
"child watcher is not recommended. (Contributed by Kumar Aditya in "
":gh:`94597`.)"
msgstr ""
"L'event loop ora utilizza il miglior watcher per figli disponibile per ogni "
"piattaforma (:class:`asyncio.PidfdChildWatcher` se supportato e "
":class:`asyncio.ThreadedChildWatcher` altrimenti), quindi configurare "
"manualmente un watcher per figli non è consigliato. (Contributo di Kumar "
"Aditya in :gh:`94597`.)"

#: whatsnew/3.12.rst:666
msgid ""
"Add *loop_factory* parameter to :func:`asyncio.run` to allow specifying a "
"custom event loop factory. (Contributed by Kumar Aditya in :gh:`99388`.)"
msgstr ""
"Aggiungo il parametro *loop_factory* a :func:`asyncio.run` per consentire di"
" specificare una factory per event loop personalizzata. (Contributo di Kumar"
" Aditya in :gh:`99388`.)"

#: whatsnew/3.12.rst:670
msgid ""
"Add C implementation of :func:`asyncio.current_task` for 4x-6x speedup. "
"(Contributed by Itamar Oren and Pranav Thulasiram Bhat in :gh:`100344`.)"
msgstr ""
"Aggiungo l'implementazione in C di :func:`asyncio.current_task` per un "
"miglioramento delle prestazioni da 4x a 6x. (Contributo di Itamar Oren e "
"Pranav Thulasiram Bhat in :gh:`100344`.)"

#: whatsnew/3.12.rst:673
msgid ""
":func:`asyncio.iscoroutine` now returns ``False`` for generators as "
":mod:`asyncio` does not support legacy generator-based coroutines. "
"(Contributed by Kumar Aditya in :gh:`102748`.)"
msgstr ""
":func:`asyncio.iscoroutine` ora restituisce ``False`` per i generatori "
"poiché :mod:`asyncio` non supporta le coroutine basate su generatori legacy."
" (Contributo di Kumar Aditya in :gh:`102748`.)"

#: whatsnew/3.12.rst:677
msgid ""
":func:`asyncio.wait` and :func:`asyncio.as_completed` now accepts generators"
" yielding tasks. (Contributed by Kumar Aditya in :gh:`78530`.)"
msgstr ""
":func:`asyncio.wait` e :func:`asyncio.as_completed` accettano ora generatori"
" che generano task. (Contributo di Kumar Aditya in :gh:`78530`.)"

#: whatsnew/3.12.rst:682
msgid "calendar"
msgstr "calendar"

#: whatsnew/3.12.rst:684
msgid ""
"Add enums :data:`calendar.Month` and :data:`calendar.Day` defining months of"
" the year and days of the week. (Contributed by Prince Roshan in "
":gh:`103636`.)"
msgstr ""
"Aggiungo gli enum :data:`calendar.Month` e :data:`calendar.Day` che "
"definiscono i mesi dell'anno e i giorni della settimana. (Contributo di "
"Prince Roshan in :gh:`103636`.)"

#: whatsnew/3.12.rst:689
msgid "csv"
msgstr "csv"

#: whatsnew/3.12.rst:691
msgid ""
"Add :const:`csv.QUOTE_NOTNULL` and :const:`csv.QUOTE_STRINGS` flags to "

msgstr ""
"Aggiungo le flag :const:`csv.QUOTE_NOTNULL` e :const:`csv.QUOTE_STRINGS` per"
" fornire un controllo più fine di ``None`` e delle stringhe vuote da parte "
"degli oggetti :class:`csv.writer`."

#: whatsnew/3.12.rst:696
msgid "dis"
msgstr "dis"

#: whatsnew/3.12.rst:698
msgid ""
"Pseudo instruction opcodes (which are used by the compiler but do not appear"
" in executable bytecode) are now exposed in the :mod:`dis` module. "
":opcode:`HAVE_ARGUMENT` is still relevant to real opcodes, but it is not "
"useful for pseudo instructions. Use the new :data:`dis.hasarg` collection "
"instead. (Contributed by Irit Katriel in :gh:`94216`.)"
msgstr ""
"Gli opcode delle pseudo-istruzioni (che sono utilizzati dal compilatore ma "
"non compaiono nel bytecode eseguibile) sono ora esposti nel modulo "
":mod:`dis`. :opcode:`HAVE_ARGUMENT` è ancora rilevante per i reali opcode, "
"ma non è utile per le pseudo-istruzioni. Usare la nuova collezione "
":data:`dis.hasarg` al suo posto. (Contributo di Irit Katriel in "
":gh:`94216`.)"

#: whatsnew/3.12.rst:706
msgid ""
"Add the :data:`dis.hasexc` collection to signify instructions that set an "
"exception handler. (Contributed by Irit Katriel in :gh:`94216`.)"
msgstr ""
"Aggiungo la collezione :data:`dis.hasexc` per indicare le istruzioni che "
"impostano un gestore di eccezioni. (Contributo di Irit Katriel in "
":gh:`94216`.)"

#: whatsnew/3.12.rst:710
msgid "fractions"
msgstr "fractions"

#: whatsnew/3.12.rst:712
msgid ""
"Objects of type :class:`fractions.Fraction` now support float-style "
"formatting. (Contributed by Mark Dickinson in :gh:`100161`.)"
msgstr ""
"Gli oggetti di tipo :class:`fractions.Fraction` ora supportano il formato "
"float-style. (Contributo di Mark Dickinson in :gh:`100161`.)"

#: whatsnew/3.12.rst:716
msgid "importlib.resources"
msgstr "importlib.resources"

#: whatsnew/3.12.rst:718
msgid ""
":func:`importlib.resources.as_file` now supports resource directories. "
"(Contributed by Jason R. Coombs in :gh:`97930`.)"
msgstr ""
":func:`importlib.resources.as_file` supporta ora le directory di risorse. "
"(Contributo di Jason R. Coombs in :gh:`97930`.)"

#: whatsnew/3.12.rst:721
msgid ""
"Rename first parameter of :func:`importlib.resources.files` to *anchor*. "
"(Contributed by Jason R. Coombs in :gh:`100598`.)"
msgstr ""
"Rinominare il primo parametro di :func:`importlib.resources.files` in "
"*anchor*. (Contributo di Jason R. Coombs in :gh:`100598`.)"

#: whatsnew/3.12.rst:725
msgid "inspect"
msgstr "inspect"

#: whatsnew/3.12.rst:727
msgid ""
"Add :func:`inspect.markcoroutinefunction` to mark sync functions that return"
" a :term:`coroutine` for use with :func:`inspect.iscoroutinefunction`. "
"(Contributed by Carlton Gibson in :gh:`99247`.)"
msgstr ""
"Aggiungo :func:`inspect.markcoroutinefunction` per contrassegnare le "
"funzioni sync che restituiscono una :term:`coroutine` per l'uso con "
":func:`inspect.iscoroutinefunction`. (Contributo di Carlton Gibson in "
":gh:`99247`.)"

#: whatsnew/3.12.rst:731
msgid ""
"Add :func:`inspect.getasyncgenstate` and :func:`inspect.getasyncgenlocals` "
"for determining the current state of asynchronous generators. (Contributed "
"by Thomas Krennwallner in :gh:`79940`.)"
msgstr ""
"Aggiungo :func:`inspect.getasyncgenstate` e "
":func:`inspect.getasyncgenlocals` per determinare lo stato corrente dei "
"generatori asincroni. (Contributo di Thomas Krennwallner in :gh:`79940`.)"

#: whatsnew/3.12.rst:735
msgid ""
"The performance of :func:`inspect.getattr_static` has been considerably "
"improved. Most calls to the function should be at least 2x faster than they "
"were in Python 3.11. (Contributed by Alex Waygood in :gh:`103193`.)"
msgstr ""
"Le prestazioni di :func:`inspect.getattr_static` sono state notevolmente "
"migliorate. La maggior parte delle chiamate a questa funzione dovrebbe "
"essere almeno 2x più veloce rispetto a Python 3.11. (Contributo di Alex "
"Waygood in :gh:`103193`.)"

#: whatsnew/3.12.rst:740
msgid "itertools"
msgstr "itertools"

#: whatsnew/3.12.rst:742
msgid ""
"Add :class:`itertools.batched()` for collecting into even-sized tuples where"
" the last batch may be shorter than the rest. (Contributed by Raymond "
"Hettinger in :gh:`98363`.)"
msgstr ""
"Aggiungi :class:`itertools.batched()` per raccogliere tuple di dimensioni "
"uniformi dove l'ultima batch può essere più corta delle altre. (Contribuito "
"da Raymond Hettinger in :gh:`98363`.)"

#: whatsnew/3.12.rst:747
msgid "math"
msgstr "matematica"

#: whatsnew/3.12.rst:749
msgid ""
"Add :func:`math.sumprod` for computing a sum of products. (Contributed by "
"Raymond Hettinger in :gh:`100485`.)"
msgstr ""
"Aggiungi :func:`math.sumprod` per calcolare una somma di prodotti. "
"(Contribuito da Raymond Hettinger in :gh:`100485`.)"

#: whatsnew/3.12.rst:752
msgid ""
"Extend :func:`math.nextafter` to include a *steps* argument for moving up or"
" down multiple steps at a time. (Contributed by Matthias Goergens, Mark "
"Dickinson, and Raymond Hettinger in :gh:`94906`.)"
msgstr ""
"Estendere :func:`math.nextafter` per includere un argomento *steps* per "
"muoversi su o giù di più passi alla volta. (Contribuito da Matthias "
"Goergens, Mark Dickinson, e Raymond Hettinger in :gh:`94906`.)"

#: whatsnew/3.12.rst:757
msgid "os"
msgstr "os"

#: whatsnew/3.12.rst:759
msgid ""
"Add :const:`os.PIDFD_NONBLOCK` to open a file descriptor for a process with "
":func:`os.pidfd_open` in non-blocking mode. (Contributed by Kumar Aditya in "
":gh:`93312`.)"
msgstr ""
"Aggiungi :const:`os.PIDFD_NONBLOCK` per aprire un file descriptor per un "
"processo con :func:`os.pidfd_open` in modalità non bloccante. (Contribuito "
"da Kumar Aditya in :gh:`93312`.)"

#: whatsnew/3.12.rst:763
msgid ""
":class:`os.DirEntry` now includes an :meth:`os.DirEntry.is_junction` method "
"to check if the entry is a junction. (Contributed by Charles Machalow in "
":gh:`99547`.)"
msgstr ""
":class:`os.DirEntry` ora include un metodo :meth:`os.DirEntry.is_junction` "
"per verificare se l'elemento è una giunzione. (Contribuito da Charles "
"Machalow in :gh:`99547`.)"

#: whatsnew/3.12.rst:767
msgid ""
"Add :func:`os.listdrives`, :func:`os.listvolumes` and :func:`os.listmounts` "
"functions on Windows for enumerating drives, volumes and mount points. "
"(Contributed by Steve Dower in :gh:`102519`.)"
msgstr ""
"Aggiungi le funzioni :func:`os.listdrives`, :func:`os.listvolumes` e "
":func:`os.listmounts` su Windows per enumerare unità, volumi e punti di "
"montaggio. (Contribuito da Steve Dower in :gh:`102519`.)"

#: whatsnew/3.12.rst:771
msgid ""
":func:`os.stat` and :func:`os.lstat` are now more accurate on Windows. The "
"``st_birthtime`` field will now be filled with the creation time of the "
"file, and ``st_ctime`` is deprecated but still contains the creation time "
"(but in the future will return the last metadata change, for consistency "
"with other platforms). ``st_dev`` may be up to 64 bits and ``st_ino`` up to "
"128 bits depending on your file system, and ``st_rdev`` is always set to "
"zero rather than incorrect values. Both functions may be significantly "
"faster on newer releases of Windows. (Contributed by Steve Dower in "
":gh:`99726`.)"
msgstr ""
"Le funzioni :func:`os.stat` e :func:`os.lstat` sono ora più precise su "
"Windows. Il campo ``st_birthtime`` verrà ora riempito con il tempo di "
"creazione del file e ``st_ctime`` è deprecato ma contiene ancora il tempo di"
" creazione (ma in futuro restituirà l'ultima modifica ai metadati, per "
"coerenza con altre piattaforme). ``st_dev`` può essere fino a 64 bit e "
"``st_ino`` fino a 128 bit a seconda del file system, e ``st_rdev`` è sempre "
"impostato su zero anziché valori errati. Entrambe le funzioni possono essere"
" significativamente più veloci nelle nuove versioni di Windows. (Contribuito"
" da Steve Dower in :gh:`99726`.)"


msgid "os.path"
msgstr "os.path"

#: whatsnew/3.12.rst:784
msgid ""
"Add :func:`os.path.isjunction` to check if a given path is a junction. "
"(Contributed by Charles Machalow in :gh:`99547`.)"
msgstr ""
"Aggiungi :func:`os.path.isjunction` per verificare se un determinato "
"percorso è una giunzione. (Contribuito da Charles Machalow in :gh:`99547`.)"

#: whatsnew/3.12.rst:787
msgid ""
"Add :func:`os.path.splitroot` to split a path into a triad ``(drive, root, "
"tail)``. (Contributed by Barney Gale in :gh:`101000`.)"
msgstr ""
"Aggiungi :func:`os.path.splitroot` per dividere un percorso in una triade "
"``(drive, root, tail)``. (Contribuito da Barney Gale in :gh:`101000`.)"

#: whatsnew/3.12.rst:791
msgid "pathlib"
msgstr "pathlib"

#: whatsnew/3.12.rst:793
msgid ""
"Add support for subclassing :class:`pathlib.PurePath` and "
":class:`pathlib.Path`, plus their Posix- and Windows-specific variants. "
"Subclasses may override the :meth:`pathlib.PurePath.with_segments` method to"
" pass information between path instances."
msgstr ""
"Aggiungi il supporto per la sottoclassificazione di "
":class:`pathlib.PurePath` e :class:`pathlib.Path`, oltre alle loro varianti "
"specifiche Posix e Windows. Le sottoclassi possono sovrascrivere il metodo "
":meth:`pathlib.PurePath.with_segments` per passare informazioni tra le "
"istanze del cammino."

#: whatsnew/3.12.rst:798
msgid ""
"Add :meth:`pathlib.Path.walk` for walking the directory trees and generating"
" all file or directory names within them, similar to :func:`os.walk`. "
"(Contributed by Stanislav Zmiev in :gh:`90385`.)"
msgstr ""
"Aggiungi :meth:`pathlib.Path.walk` per attraversare gli alberi delle "
"directory e generare tutti i nomi di file o directory al loro interno, "
"simile a :func:`os.walk`. (Contribuito da Stanislav Zmiev in :gh:`90385`.)"

#: whatsnew/3.12.rst:802
msgid ""
"Add *walk_up* optional parameter to :meth:`pathlib.PurePath.relative_to` to "
"allow the insertion of ``..`` entries in the result; this behavior is more "
"consistent with :func:`os.path.relpath`. (Contributed by Domenico Ragusa in "
":gh:`84538`.)"
msgstr ""
"Aggiungi il parametro opzionale *walk_up* a "
":meth:`pathlib.PurePath.relative_to` per permettere l'inserimento di voci "
"``..`` nel risultato; questo comportamento è più coerente con "
":func:`os.path.relpath`. (Contribuito da Domenico Ragusa in :gh:`84538`.)"

#: whatsnew/3.12.rst:807
msgid ""
"Add :meth:`pathlib.Path.is_junction` as a proxy to "
":func:`os.path.isjunction`. (Contributed by Charles Machalow in "
":gh:`99547`.)"
msgstr ""
"Aggiungi :meth:`pathlib.Path.is_junction` come proxy per "
":func:`os.path.isjunction`. (Contribuito da Charles Machalow in "
":gh:`99547`.)"

#: whatsnew/3.12.rst:810
msgid ""
"Add *case_sensitive* optional parameter to :meth:`pathlib.Path.glob`, "
":meth:`pathlib.Path.rglob` and :meth:`pathlib.PurePath.match` for matching "
"the path's case sensitivity, allowing for more precise control over the "
"matching process."
msgstr ""
"Aggiungi il parametro opzionale *case_sensitive* a "
":meth:`pathlib.Path.glob`, :meth:`pathlib.Path.rglob` e "
":meth:`pathlib.PurePath.match` per abbinare la sensibilità del percorso, "
"consentendo un controllo più preciso sul processo di abbinamento."

#: whatsnew/3.12.rst:815
msgid "pdb"
msgstr "pdb"

#: whatsnew/3.12.rst:817
msgid ""
"Add convenience variables to hold values temporarily for debug session and "
"provide quick access to values like the current frame or the return value. "
"(Contributed by Tian Gao in :gh:`103693`.)"
msgstr ""
"Aggiungi variabili di convenienza per tenere temporaneamente i valori per la"
" sessione di debug e fornire un accesso rapido a valori come il frame "
"corrente o il valore di ritorno. (Contribuito da Tian Gao in :gh:`103693`.)"

#: whatsnew/3.12.rst:823
msgid "random"
msgstr "random"

#: whatsnew/3.12.rst:825
msgid ""
"Add :func:`random.binomialvariate`. (Contributed by Raymond Hettinger in "
":gh:`81620`.)"
msgstr ""
"Aggiungi :func:`random.binomialvariate`. (Contribuito da Raymond Hettinger "
"in :gh:`81620`.)"

#: whatsnew/3.12.rst:828
msgid ""
"Add a default of ``lambd=1.0`` to :func:`random.expovariate`. (Contributed "
"by Raymond Hettinger in :gh:`100234`.)"
msgstr ""
"Aggiungi un default di ``lambd=1.0`` a :func:`random.expovariate`. "
"(Contribuito da Raymond Hettinger in :gh:`100234`.)"

#: whatsnew/3.12.rst:832
msgid "shutil"
msgstr "shutil"

#: whatsnew/3.12.rst:834
msgid ""
":func:`shutil.make_archive` now passes the *root_dir* argument to custom "
"archivers which support it. In this case it no longer temporarily changes "
"the current working directory of the process to *root_dir* to perform "
"archiving. (Contributed by Serhiy Storchaka in :gh:`74696`.)"
msgstr ""
":func:`shutil.make_archive` ora passa l'argomento *root_dir* agli "
"archiviatori personalizzati che lo supportano. In questo caso, non cambia "
"più temporaneamente la directory di lavoro corrente del processo in "
"*root_dir* per eseguire l'archiviazione. (Contribuito da Serhiy Storchaka in"
" :gh:`74696`.)"

#: whatsnew/3.12.rst:840
msgid ""
":func:`shutil.rmtree` now accepts a new argument *onexc* which is an error "
"handler like *onerror* but which expects an exception instance rather than a"
" *(typ, val, tb)* triplet. *onerror* is deprecated. (Contributed by Irit "
"Katriel in :gh:`102828`.)"
msgstr ""
":func:`shutil.rmtree` ora accetta un nuovo argomento *onexc* che è un "
"gestore di errori simile a *onerror* ma che si aspetta un'istanza di "
"eccezione piuttosto che un terzetto *(typ, val, tb)*. *onerror* è deprecato."
" (Contribuito da Irit Katriel in :gh:`102828`.)"

#: whatsnew/3.12.rst:845
msgid ""
":func:`shutil.which` now consults the *PATHEXT* environment variable to find"
" matches within *PATH* on Windows even when the given *cmd* includes a "
"directory component. (Contributed by Charles Machalow in :gh:`103179`.)"
msgstr ""
":func:`shutil.which` ora consulta la variabile d'ambiente *PATHEXT* per "
"trovare corrispondenze all'interno di *PATH* su Windows anche quando il "
"*cmd* dato include un componente di directory. (Contribuito da Charles "
"Machalow in :gh:`103179`.)"

#: whatsnew/3.12.rst:850
msgid ""
":func:`shutil.which` will call ``NeedCurrentDirectoryForExePathW`` when "
"querying for executables on Windows to determine if the current working "
"directory should be prepended to the search path. (Contributed by Charles "
"Machalow in :gh:`103179`.)"
msgstr ""
":func:`shutil.which` chiamerà ``NeedCurrentDirectoryForExePathW`` quando "
"interroga per eseguibili su Windows per determinare se la directory di "
"lavoro corrente dovrebbe essere aggiunta al percorso di ricerca. "
"(Contribuito da Charles Machalow in :gh:`103179`.)"

#: whatsnew/3.12.rst:855
msgid ""
":func:`shutil.which` will return a path matching the *cmd* with a component "
"from ``PATHEXT`` prior to a direct match elsewhere in the search path on "
"Windows. (Contributed by Charles Machalow in :gh:`103179`.)"
msgstr ""
":func:`shutil.which` restituirà un percorso corrispondente al *cmd* con un "
"componente da ``PATHEXT`` prima di una corrispondenza diretta altrove nel "
"percorso di ricerca su Windows. (Contribuito da Charles Machalow in "
":gh:`103179`.)"

#: whatsnew/3.12.rst:1666
msgid "sqlite3"
msgstr "sqlite3"

#: whatsnew/3.12.rst:863
msgid ""
"Add a :ref:`command-line interface <sqlite3-cli>`. (Contributed by Erlend E."
" Aasland in :gh:`77617`.)"
msgstr ""
"Aggiungi una :ref:`interfaccia da linea di comando <sqlite3-cli>`. "
"(Contribuito da Erlend E. Aasland in :gh:`77617`.)"

#: whatsnew/3.12.rst:866
msgid ""
"Add the :attr:`sqlite3.Connection.autocommit` attribute to "
":class:`sqlite3.Connection` and the *autocommit* parameter to "
":func:`sqlite3.connect` to control :pep:`249`-compliant :ref:`transaction "
"handling <sqlite3-transaction-control-autocommit>`. (Contributed by Erlend "
"E. Aasland in :gh:`83638`.)"
msgstr ""
"Aggiungi l'attributo :attr:`sqlite3.Connection.autocommit` a "
":class:`sqlite3.Connection` e il parametro *autocommit* a "
":func:`sqlite3.connect` per controllare la :pep:`249`-compliant "
":ref:`gestione delle transazioni <sqlite3-transaction-control-autocommit>`. "
"(Contribuito da Erlend E. Aasland in :gh:`83638`.)"

#: whatsnew/3.12.rst:873
msgid ""
"Add *entrypoint* keyword-only parameter to "
":meth:`sqlite3.Connection.load_extension`, for overriding the SQLite "
"extension entry point. (Contributed by Erlend E. Aasland in :gh:`103015`.)"
msgstr ""
"Aggiungi il parametro keyword-only *entrypoint* a "
":meth:`sqlite3.Connection.load_extension`, per sovrascrivere il punto di "
"ingresso dell'estensione SQLite. (Contribuito da Erlend E. Aasland in "
":gh:`103015`.)"

#: whatsnew/3.12.rst:878
msgid ""
"Add :meth:`sqlite3.Connection.getconfig` and "
":meth:`sqlite3.Connection.setconfig` to :class:`sqlite3.Connection` to make "
"configuration changes to a database connection. (Contributed by Erlend E. "
"Aasland in :gh:`103489`.)"
msgstr ""
"Aggiungi :meth:`sqlite3.Connection.getconfig` e "
":meth:`sqlite3.Connection.setconfig` a :class:`sqlite3.Connection` per "
"apportare modifiche di configurazione a una connessione al database. "
"(Contribuito da Erlend E. Aasland in :gh:`103489`.)"

#: whatsnew/3.12.rst:884
msgid "statistics"
msgstr "statistica"

#: whatsnew/3.12.rst:886
msgid ""
"Extend :func:`statistics.correlation` to include as a ``ranked`` method for "
"computing the Spearman correlation of ranked data. (Contributed by Raymond "
"Hettinger in :gh:`95861`.)"
msgstr ""
"Estendere :func:`statistics.correlation` per includere un metodo ``ranked`` "
"per calcolare la correlazione di Spearman di dati classificati. (Contribuito"
" da Raymond Hettinger in :gh:`95861`.)"

#: whatsnew/3.12.rst:891
msgid "sys"
msgstr "sys"

#: whatsnew/3.12.rst:893
msgid ""
"Add the :mod:`sys.monitoring` namespace to expose the new :ref:`PEP 669 "
"<whatsnew312-pep669>` monitoring API. (Contributed by Mark Shannon in "
":gh:`103082`.)"
msgstr ""
"Aggiungi lo spazio dei nomi :mod:`sys.monitoring` per esporre la nuova API "
"di monitoraggio :ref:`PEP 669 <whatsnew312-pep669>`. (Contribuito da Mark "
"Shannon in :gh:`103082`.)"

#: whatsnew/3.12.rst:897
msgid ""
"Add :func:`sys.activate_stack_trampoline` and "
":func:`sys.deactivate_stack_trampoline` for activating and deactivating "
"stack profiler trampolines, and :func:`sys.is_stack_trampoline_active` for "
"querying if stack profiler trampolines are active. (Contributed by Pablo "
"Galindo and Christian Heimes with contributions from Gregory P. Smith "
"[Google] and Mark Shannon in :gh:`96123`.)"
msgstr ""
"Aggiungi :func:`sys.activate_stack_trampoline` e "
":func:`sys.deactivate_stack_trampoline` per attivare e disattivare i "
"trampolini del profiler di stack, e :func:`sys.is_stack_trampoline_active` "
"per verificare se i trampolini del profiler di stack sono attivi. "
"(Contribuito da Pablo Galindo e Christian Heimes con contributi di Gregory "
"P. Smith [Google] e Mark Shannon in :gh:`96123`.)"

#: whatsnew/3.12.rst:906
msgid ""
"Add :data:`sys.last_exc` which holds the last unhandled exception that was "
"raised (for post-mortem debugging use cases). Deprecate the three fields "
"that have the same information in its legacy form: :data:`sys.last_type`, "
":data:`sys.last_value` and :data:`sys.last_traceback`. (Contributed by Irit "
"Katriel in :gh:`102778`.)"
msgstr ""
"Aggiungi :data:`sys.last_exc` che contiene l'ultima eccezione non gestita "
"che è stata sollevata (per casi d'uso di debug post-mortem). Deprecati i tre"
" campi che contengono le stesse informazioni nella loro forma legacy: "
":data:`sys.last_type`, :data:`sys.last_value` e :data:`sys.last_traceback`. "
"(Contribuito da Irit Katriel in :gh:`102778`.)"

#: whatsnew/3.12.rst:1861
msgid ""
":func:`sys._current_exceptions` now returns a mapping from thread-id to an "
"exception instance, rather than to a ``(typ, exc, tb)`` tuple. (Contributed "
"by Irit Katriel in :gh:`103176`.)"
msgstr ""
":func:`sys._current_exceptions` ora restituisce una mappa da thread-id a "
"un'istanza di eccezione, anziché a una tupla ``(typ, exc, tb)``. "
"(Contribuito da Irit Katriel in :gh:`103176`.)"

#: whatsnew/3.12.rst:916
msgid ""
":func:`sys.setrecursionlimit` and :func:`sys.getrecursionlimit`. The "
"recursion limit now applies only to Python code. Builtin functions do not "
"use the recursion limit, but are protected by a different mechanism that "
"prevents recursion from causing a virtual machine crash."
msgstr ""
":func:`sys.setrecursionlimit` e :func:`sys.getrecursionlimit`. Il limite di "
"ricorsione ora si applica solo al codice Python. Le funzioni built-in non "
"utilizzano il limite di ricorsione, ma sono protette da un diverso "
"meccanismo che impedisce alla ricorsione di causare il crash della macchina "
"virtuale."

#: whatsnew/3.12.rst:922
msgid "tempfile"
msgstr "tempfile"

#: whatsnew/3.12.rst:924
msgid ""
"The :class:`tempfile.NamedTemporaryFile` function has a new optional "
"parameter *delete_on_close* (Contributed by Evgeny Zorin in :gh:`58451`.)"
msgstr ""
"La funzione :class:`tempfile.NamedTemporaryFile` ha un nuovo parametro "
"opzionale *delete_on_close* (Contribuito da Evgeny Zorin in :gh:`58451`.)"

#: whatsnew/3.12.rst:926
msgid ""
":func:`tempfile.mkdtemp` now always returns an absolute path, even if the "
"argument provided to the *dir* parameter is a relative path."
msgstr ""
":func:`tempfile.mkdtemp` ora ritorna sempre un percorso assoluto, anche se "
"l'argomento fornito al parametro *dir* è un percorso relativo."


msgid "threading"
msgstr "threading"

#: whatsnew/3.12.rst:932
msgid ""
"Add :func:`threading.settrace_all_threads` and "
":func:`threading.setprofile_all_threads` that allow to set tracing and "
"profiling functions in all running threads in addition to the calling one. "
"(Contributed by Pablo Galindo in :gh:`93503`.)"
msgstr ""
"Aggiungi :func:`threading.settrace_all_threads` e "
":func:`threading.setprofile_all_threads` che permettono di impostare "
"funzioni di traccia e di profilazione in tutti i thread in esecuzione oltre "
"a quello chiamante. (Contribuito da Pablo Galindo in :gh:`93503`.)"

#: whatsnew/3.12.rst:938
msgid "tkinter"
msgstr "tkinter"

#: whatsnew/3.12.rst:940
msgid ""
"``tkinter.Canvas.coords()`` now flattens its arguments. It now accepts not "
"only coordinates as separate arguments (``x1, y1, x2, y2, ...``) and a "
"sequence of coordinates (``[x1, y1, x2, y2, ...]``), but also coordinates "
"grouped in pairs (``(x1, y1), (x2, y2), ...`` and ``[(x1, y1), (x2, y2), "
"...]``), like ``create_*()`` methods. (Contributed by Serhiy Storchaka in "
":gh:`94473`.)"
msgstr ""
"``tkinter.Canvas.coords()`` ora appiattisce i suoi argomenti. Ora accetta "
"non solo coordinate come argomenti separati (``x1, y1, x2, y2, ...``) e una "
"sequenza di coordinate (``[x1, y1, x2, y2, ...]``), ma anche coordinate "
"raggruppate in coppie (``(x1, y1), (x2, y2), ...`` e ``[(x1, y1), (x2, y2), "
"...]``), come i metodi ``create_*()``. (Contributo di Serhiy Storchaka in "
":gh:`94473`.)"

#: whatsnew/3.12.rst:949
msgid "tokenize"
msgstr "tokenize"

#: whatsnew/3.12.rst:951
msgid ""
"The :mod:`tokenize` module includes the changes introduced in :pep:`701`. "
"(Contributed by Marta Gómez Macías and Pablo Galindo in :gh:`102856`.) See "
":ref:`whatsnew312-porting-to-python312` for more information on the changes "
"to the :mod:`tokenize` module."
msgstr ""
"Il modulo :mod:`tokenize` include le modifiche introdotte in :pep:`701`. "
"(Contributo di Marta Gómez Macías e Pablo Galindo in :gh:`102856`.) Vedi "
":ref:`whatsnew312-porting-to-python312` per maggiori informazioni sulle "
"modifiche al modulo :mod:`tokenize`."

#: whatsnew/3.12.rst:957
msgid "types"
msgstr "types"

#: whatsnew/3.12.rst:959
msgid ""
"Add :func:`types.get_original_bases` to allow for further introspection of "
":ref:`user-defined-generics` when subclassed. (Contributed by James Hilton-"
"Balfe and Alex Waygood in :gh:`101827`.)"
msgstr ""
"Aggiungi :func:`types.get_original_bases` per consentire ulteriori "
"introspezioni dei :ref:`user-defined-generics` quando sottoclassati. "
"(Contributo di James Hilton-Balfe e Alex Waygood in :gh:`101827`.)"

#: whatsnew/3.12.rst:966
msgid "typing"
msgstr "typing"

#: whatsnew/3.12.rst:968
msgid ""
":func:`isinstance` checks against :func:`runtime-checkable protocols "
"<typing.runtime_checkable>` now use :func:`inspect.getattr_static` rather "
"than :func:`hasattr` to lookup whether attributes exist. This means that "
"descriptors and :meth:`~object.__getattr__` methods are no longer "
"unexpectedly evaluated during ``isinstance()`` checks against runtime-"
"checkable protocols. However, it may also mean that some objects which used "
"to be considered instances of a runtime-checkable protocol may no longer be "
"considered instances of that protocol on Python 3.12+, and vice versa. Most "
"users are unlikely to be affected by this change. (Contributed by Alex "
"Waygood in :gh:`102433`.)"
msgstr ""
"I controlli :func:`isinstance` contro i :func:`runtime-checkable protocols "
"<typing.runtime_checkable>` ora utilizzano :func:`inspect.getattr_static` "
"anziché :func:`hasattr` per verificare l'esistenza degli attributi. Ciò "
"significa che i descrittori e i metodi :meth:`~object.__getattr__` non "
"vengono più valutati inaspettatamente durante i controlli ``isinstance()`` "
"contro i protocolli verificabili a runtime. Tuttavia, ciò può anche "
"significare che alcuni oggetti che in precedenza erano considerati istanze "
"di un protocollo verificabile a runtime potrebbero non essere più "
"considerati tali con Python 3.12+ e viceversa. La maggior parte degli utenti"
" non dovrebbe essere influenzata da questo cambiamento. (Contributo di Alex "
"Waygood in :gh:`102433`.)"

#: whatsnew/3.12.rst:979
msgid ""
"The members of a runtime-checkable protocol are now considered \"frozen\" at"
" runtime as soon as the class has been created. Monkey-patching attributes "
"onto a runtime-checkable protocol will still work, but will have no impact "
"on :func:`isinstance` checks comparing objects to the protocol. For "
"example::"
msgstr ""
"I membri di un protocollo verificabile a runtime sono ora considerati "
"\"congelati\" a runtime non appena la classe è stata creata. Il monkey-"
"patching degli attributi in un protocollo verificabile a runtime funzionerà "
"ancora, ma non avrà alcun impatto sui controlli :func:`isinstance` che "
"confrontano oggetti con il protocollo. Per esempio::"

#: whatsnew/3.12.rst:1001
msgid ""
"This change was made in order to speed up ``isinstance()`` checks against "
"runtime-checkable protocols."
msgstr ""
"Questa modifica è stata apportata per velocizzare i controlli "
"``isinstance()`` contro i protocolli verificabili a runtime."

#: whatsnew/3.12.rst:1004
msgid ""
"The performance profile of :func:`isinstance` checks against :func:`runtime-"
"checkable protocols <typing.runtime_checkable>` has changed significantly. "
"Most ``isinstance()`` checks against protocols with only a few members "
"should be at least 2x faster than in 3.11, and some may be 20x faster or "
"more. However, ``isinstance()`` checks against protocols with many members "
"may be slower than in Python 3.11. (Contributed by Alex Waygood in "
":gh:`74690` and :gh:`103193`.)"
msgstr ""
"Il profilo delle prestazioni dei controlli :func:`isinstance` contro i "
":func:`runtime-checkable protocols <typing.runtime_checkable>` è cambiato "
"significativamente. La maggior parte dei controlli ``isinstance()`` contro i"
" protocolli con pochi membri dovrebbe essere almeno 2 volte più veloce "
"rispetto alla versione 3.11, e alcuni potrebbero essere 20 volte più veloci "
"o più. Tuttavia, i controlli ``isinstance()`` contro i protocolli con molti "
"membri potrebbero risultare più lenti rispetto a Python 3.11. (Contributo di"
" Alex Waygood in :gh:`74690` e :gh:`103193`.)"

#: whatsnew/3.12.rst:1012
msgid ""
"All :data:`typing.TypedDict` and :data:`typing.NamedTuple` classes now have "
"the ``__orig_bases__`` attribute. (Contributed by Adrian Garcia Badaracco in"
" :gh:`103699`.)"
msgstr ""
"Tutte le classi :data:`typing.TypedDict` e :data:`typing.NamedTuple` ora "
"possiedono l'attributo ``__orig_bases__``. (Contributo di Adrian Garcia "
"Badaracco in :gh:`103699`.)"

#: whatsnew/3.12.rst:1016
msgid ""
"Add ``frozen_default`` parameter to :func:`typing.dataclass_transform`. "
"(Contributed by Erik De Bonte in :gh:`99957`.)"
msgstr ""
"Aggiungi il parametro ``frozen_default`` a "
":func:`typing.dataclass_transform`. (Contributo di Erik De Bonte in "
":gh:`99957`.)"

#: whatsnew/3.12.rst:1020
msgid "unicodedata"
msgstr "unicodedata"

#: whatsnew/3.12.rst:1022
msgid ""
"The Unicode database has been updated to version 15.0.0. (Contributed by "
"Benjamin Peterson in :gh:`96734`)."
msgstr ""
"Il database Unicode è stato aggiornato alla versione 15.0.0. (Contributo di "
"Benjamin Peterson in :gh:`96734`)."

#: whatsnew/3.12.rst:1706
msgid "unittest"
msgstr "unittest"

#: whatsnew/3.12.rst:1028
msgid ""
"Add a ``--durations`` command line option, showing the N slowest test "
"cases::"
msgstr ""
"Aggiungi l'opzione di linea di comando ``--durations``, che mostra i N casi "
"di test più lenti::"

#: whatsnew/3.12.rst:1044
msgid "(Contributed by Giampaolo Rodola in :gh:`48330`)"
msgstr "(Contributo di Giampaolo Rodola in :gh:`48330`)"

#: whatsnew/3.12.rst:1047
msgid "uuid"
msgstr "uuid"

#: whatsnew/3.12.rst:1049
msgid ""
"Add a :ref:`command-line interface <uuid-cli>`. (Contributed by Adam Chhina "
"in :gh:`88597`.)"
msgstr ""
"Aggiungi una :ref:`interfaccia della linea di comando <uuid-cli>`. "
"(Contributo di Adam Chhina in :gh:`88597`.)"

#: whatsnew/3.12.rst:1054
msgid "Optimizations"
msgstr "Ottimizzazioni"

#: whatsnew/3.12.rst:1056
msgid ""
"Remove ``wstr`` and ``wstr_length`` members from Unicode objects. It reduces"
" object size by 8 or 16 bytes on 64bit platform. (:pep:`623`) (Contributed "
"by Inada Naoki in :gh:`92536`.)"
msgstr ""
"Rimuovi i membri ``wstr`` e ``wstr_length`` dagli oggetti Unicode. Ciò "
"riduce la dimensione degli oggetti di 8 o 16 byte sulla piattaforma a 64 "
"bit. (:pep:`623`) (Contributo di Inada Naoki in :gh:`92536`.)"

#: whatsnew/3.12.rst:1060
msgid ""
"Add experimental support for using the BOLT binary optimizer in the build "
"process, which improves performance by 1-5%. (Contributed by Kevin "
"Modzelewski in :gh:`90536` and tuned by Donghee Na in :gh:`101525`)"
msgstr ""
"Aggiungi il supporto sperimentale per l'uso dell'ottimizzatore binario BOLT "
"nel processo di build, che migliora le prestazioni dell'1-5%. (Contributo di"
" Kevin Modzelewski in :gh:`90536` e ottimizzato da Donghee Na in "
":gh:`101525`)"

#: whatsnew/3.12.rst:1064
msgid ""
"Speed up the regular expression substitution (functions :func:`re.sub` and "
":func:`re.subn` and corresponding :class:`!re.Pattern` methods) for "
"replacement strings containing group references by 2--3 times. (Contributed "
"by Serhiy Storchaka in :gh:`91524`.)"
msgstr ""
"Velocizza la sostituzione delle espressioni regolari (funzioni "
":func:`re.sub` e :func:`re.subn` e i corrispondenti metodi di "
":class:`!re.Pattern`) per le stringhe di sostituzione contenenti riferimenti"
" di gruppo di 2-3 volte. (Contributo di Serhiy Storchaka in :gh:`91524`.)"

#: whatsnew/3.12.rst:1069
msgid ""
"Speed up :class:`asyncio.Task` creation by deferring expensive string "
"formatting. (Contributed by Itamar Oren in :gh:`103793`.)"
msgstr ""
"Velocizza la creazione di :class:`asyncio.Task` rimandando la formattazione "
"delle stringhe costosa. (Contributo di Itamar Oren in :gh:`103793`.)"

#: whatsnew/3.12.rst:1072
msgid ""
"The :func:`tokenize.tokenize` and :func:`tokenize.generate_tokens` functions"
" are up to 64% faster as a side effect of the changes required to cover "
":pep:`701` in the :mod:`tokenize` module. (Contributed by Marta Gómez Macías"
" and Pablo Galindo in :gh:`102856`.)"
msgstr ""
"Le funzioni :func:`tokenize.tokenize` e :func:`tokenize.generate_tokens` "
"sono fino al 64% più veloci come effetto collaterale delle modifiche "
"necessarie per coprire :pep:`701` nel modulo :mod:`tokenize`. (Contributo di"
" Marta Gómez Macías e Pablo Galindo in :gh:`102856`.)"

#: whatsnew/3.12.rst:1077
msgid ""
"Speed up :func:`super` method calls and attribute loads via the new "
":opcode:`LOAD_SUPER_ATTR` instruction. (Contributed by Carl Meyer and "
"Vladimir Matveev in :gh:`103497`.)"
msgstr ""
"Velocizza le chiamate al metodo :func:`super` e i caricamenti degli "
"attributi tramite la nuova istruzione :opcode:`LOAD_SUPER_ATTR`. (Contributo"
" di Carl Meyer e Vladimir Matveev in :gh:`103497`.)"

#: whatsnew/3.12.rst:1083
msgid "CPython bytecode changes"
msgstr "Modifiche al bytecode di CPython"

#: whatsnew/3.12.rst:1085
msgid ""
"Remove the :opcode:`!LOAD_METHOD` instruction. It has been merged into "
":opcode:`LOAD_ATTR`. :opcode:`LOAD_ATTR` will now behave like the old "
":opcode:`!LOAD_METHOD` instruction if the low bit of its oparg is set. "
"(Contributed by Ken Jin in :gh:`93429`.)"
msgstr ""
"Rimuovi l'istruzione :opcode:`!LOAD_METHOD`. È stata unita a "
":opcode:`LOAD_ATTR`. Ora :opcode:`LOAD_ATTR` si comporterà come la vecchia "
"istruzione :opcode:`!LOAD_METHOD` se il bit inferiore del suo oparg è "
"impostato. (Contributo di Ken Jin in :gh:`93429`.)"

#: whatsnew/3.12.rst:1090
msgid ""
"Remove the :opcode:`!JUMP_IF_FALSE_OR_POP` and "
":opcode:`!JUMP_IF_TRUE_OR_POP` instructions. (Contributed by Irit Katriel in"
" :gh:`102859`.)"
msgstr ""
"Rimuovi le istruzioni :opcode:`!JUMP_IF_FALSE_OR_POP` e "
":opcode:`!JUMP_IF_TRUE_OR_POP`. (Contributo di Irit Katriel in "
":gh:`102859`.)"

#: whatsnew/3.12.rst:1093
msgid ""
"Remove the :opcode:`!PRECALL` instruction. (Contributed by Mark Shannon in "
":gh:`92925`.)"
msgstr ""
"Rimuovi l'istruzione :opcode:`!PRECALL`. (Contributo di Mark Shannon in "
":gh:`92925`.)"

#: whatsnew/3.12.rst:1096
msgid ""
"Add the :opcode:`BINARY_SLICE` and :opcode:`STORE_SLICE` instructions. "
"(Contributed by Mark Shannon in :gh:`94163`.)"
msgstr ""
"Aggiungi le istruzioni :opcode:`BINARY_SLICE` e :opcode:`STORE_SLICE`. "
"(Contributo di Mark Shannon in :gh:`94163`.)"

#: whatsnew/3.12.rst:1099
msgid ""
"Add the :opcode:`CALL_INTRINSIC_1` instructions. (Contributed by Mark "
"Shannon in :gh:`99005`.)"
msgstr ""
"Aggiungi le istruzioni :opcode:`CALL_INTRINSIC_1`. (Contributo di Mark "
"Shannon in :gh:`99005`.)"

#: whatsnew/3.12.rst:1102
msgid ""
"Add the :opcode:`CALL_INTRINSIC_2` instruction. (Contributed by Irit Katriel"
" in :gh:`101799`.)"
msgstr ""
"Aggiungi l'istruzione :opcode:`CALL_INTRINSIC_2`. (Contributo di Irit "
"Katriel in :gh:`101799`.)"

#: whatsnew/3.12.rst:1105
msgid ""
"Add the :opcode:`CLEANUP_THROW` instruction. (Contributed by Brandt Bucher "
"in :gh:`90997`.)"
msgstr ""
"Aggiungi l'istruzione :opcode:`CLEANUP_THROW`. (Contributo di Brandt Bucher "
"in :gh:`90997`.)"

#: whatsnew/3.12.rst:1108
msgid ""
"Add the :opcode:`!END_SEND` instruction. (Contributed by Mark Shannon in "
":gh:`103082`.)"
msgstr ""
"Aggiungi l'istruzione :opcode:`!END_SEND`. (Contributo di Mark Shannon in "
":gh:`103082`.)"

#: whatsnew/3.12.rst:1111
msgid ""
"Add the :opcode:`LOAD_FAST_AND_CLEAR` instruction as part of the "
"implementation of :pep:`709`. (Contributed by Carl Meyer in :gh:`101441`.)"
msgstr ""
"Aggiungi l'istruzione :opcode:`LOAD_FAST_AND_CLEAR` come parte "
"dell'implementazione di :pep:`709`. (Contributo di Carl Meyer in "
":gh:`101441`.)"

#: whatsnew/3.12.rst:1114
msgid ""
"Add the :opcode:`LOAD_FAST_CHECK` instruction. (Contributed by Dennis "
"Sweeney in :gh:`93143`.)"
msgstr ""
"Aggiungi l'istruzione :opcode:`LOAD_FAST_CHECK`. (Contributo di Dennis "
"Sweeney in :gh:`93143`.)"

#: whatsnew/3.12.rst:1117
msgid ""
"Add the :opcode:`LOAD_FROM_DICT_OR_DEREF`, "
":opcode:`LOAD_FROM_DICT_OR_GLOBALS`, and :opcode:`LOAD_LOCALS` opcodes as "
"part of the implementation of :pep:`695`. Remove the "
":opcode:`!LOAD_CLASSDEREF` opcode, which can be replaced with "
":opcode:`LOAD_LOCALS` plus :opcode:`LOAD_FROM_DICT_OR_DEREF`. (Contributed "
"by Jelle Zijlstra in :gh:`103764`.)"
msgstr ""
"Aggiungi le istruzioni :opcode:`LOAD_FROM_DICT_OR_DEREF`, "
":opcode:`LOAD_FROM_DICT_OR_GLOBALS`, e :opcode:`LOAD_LOCALS` come parte "
"dell'implementazione di :pep:`695`. Rimuovi l'opcode "
":opcode:`!LOAD_CLASSDEREF`, che può essere sostituito con "
":opcode:`LOAD_LOCALS` più :opcode:`LOAD_FROM_DICT_OR_DEREF`. (Contributo di "
"Jelle Zijlstra in :gh:`103764`.)"

#: whatsnew/3.12.rst:1123
msgid ""
"Add the :opcode:`LOAD_SUPER_ATTR` instruction. (Contributed by Carl Meyer "
"and Vladimir Matveev in :gh:`103497`.)"
msgstr ""
"Aggiungi l'istruzione :opcode:`LOAD_SUPER_ATTR`. (Contributo di Carl Meyer e"
" Vladimir Matveev in :gh:`103497`.)"

#: whatsnew/3.12.rst:1126
msgid ""
"Add the :opcode:`RETURN_CONST` instruction. (Contributed by Wenyang Wang in "
":gh:`101632`.)"
msgstr ""
"Aggiungi l'istruzione :opcode:`RETURN_CONST`. (Contributo di Wenyang Wang in"
" :gh:`101632`.)"

#: whatsnew/3.12.rst:1129
msgid "Demos and Tools"
msgstr "Demos e Tools"

#: whatsnew/3.12.rst:1131
msgid ""
"Remove the ``Tools/demo/`` directory which contained old demo scripts. A "
"copy can be found in the `old-demos project "
"<https://github.com/gvanrossum/old-demos>`_. (Contributed by Victor Stinner "
"in :gh:`97681`.)"
msgstr ""
"Rimuovi la directory ``Tools/demo/`` che conteneva vecchi script demo. Una "
"copia può essere trovata nel `progetto old-demos "
"<https://github.com/gvanrossum/old-demos>`_. (Contributo di Victor Stinner "
"in :gh:`97681`.)"

#: whatsnew/3.12.rst:1136
msgid ""
"Remove outdated example scripts of the ``Tools/scripts/`` directory. A copy "
"can be found in the `old-demos project <https://github.com/gvanrossum/old-"
"demos>`_. (Contributed by Victor Stinner in :gh:`97669`.)"
msgstr ""
"Rimuovi script di esempio obsoleti dalla directory ``Tools/scripts/``. Una "
"copia può essere trovata nel `progetto old-demos "
"<https://github.com/gvanrossum/old-demos>`_. (Contributo di Victor Stinner "
"in :gh:`97669`.)"

#: whatsnew/3.12.rst:2264
msgid "Deprecated"
msgstr "Deprecato"

#: whatsnew/3.12.rst:1145
msgid ""
":mod:`argparse`: The *type*, *choices*, and *metavar* parameters of "
":class:`!argparse.BooleanOptionalAction` are deprecated and will be removed "
"in 3.14. (Contributed by Nikita Sobolev in :gh:`92248`.)"
msgstr ""
":mod:`argparse`: I parametri *type*, *choices* e *metavar* di "
":class:`!argparse.BooleanOptionalAction` sono deprecati e saranno rimossi "
"nella versione 3.14. (Contributo di Nikita Sobolev in :gh:`92248`.)"

#: whatsnew/3.12.rst:1150
msgid ""
":mod:`ast`: The following :mod:`ast` features have been deprecated in "
"documentation since Python 3.8, now cause a :exc:`DeprecationWarning` to be "
"emitted at runtime when they are accessed or used, and will be removed in "
"Python 3.14:"
msgstr ""
":mod:`ast`: Le seguenti caratteristiche di :mod:`ast` sono deprecate nella "
"documentazione da Python 3.8, ora causano un'emissione di "
":exc:`DeprecationWarning` al runtime quando vengono accedute o utilizzate, e"
" saranno rimosse in Python 3.14:"

#: whatsnew/3.12.rst:1400
msgid ":class:`!ast.Num`"
msgstr ":class:`!ast.Num`"

#: whatsnew/3.12.rst:1401
msgid ":class:`!ast.Str`"
msgstr ":class:`!ast.Str`"

#: whatsnew/3.12.rst:1402
msgid ":class:`!ast.Bytes`"
msgstr ":class:`!ast.Bytes`"

#: whatsnew/3.12.rst:1403
msgid ":class:`!ast.NameConstant`"
msgstr ":class:`!ast.NameConstant`"

#: whatsnew/3.12.rst:1404
msgid ":class:`!ast.Ellipsis`"
msgstr ":class:`!ast.Ellipsis`"

#: whatsnew/3.12.rst:1160
msgid ""
"Use :class:`ast.Constant` instead. (Contributed by Serhiy Storchaka in "
":gh:`90953`.)"
msgstr ""
"Utilizzare :class:`ast.Constant` al suo posto. (Contributo di Serhiy "
"Storchaka in :gh:`90953`.)"

#: whatsnew/3.12.rst:1406
msgid ":mod:`asyncio`:"
msgstr ":mod:`asyncio`:"

#: whatsnew/3.12.rst:1165
msgid ""
"The child watcher classes :class:`asyncio.MultiLoopChildWatcher`, "
":class:`asyncio.FastChildWatcher`, :class:`asyncio.AbstractChildWatcher` and"
" :class:`asyncio.SafeChildWatcher` are deprecated and will be removed in "
"Python 3.14. (Contributed by Kumar Aditya in :gh:`94597`.)"
msgstr ""
"Le classi watcher dei processi figli :class:`asyncio.MultiLoopChildWatcher`,"
" :class:`asyncio.FastChildWatcher`, :class:`asyncio.AbstractChildWatcher` e "
":class:`asyncio.SafeChildWatcher` sono deprecate e saranno rimosse in Python"
" 3.14. (Contributo di Kumar Aditya in :gh:`94597`.)"

#: whatsnew/3.12.rst:1171
msgid ""
":func:`asyncio.set_child_watcher`, :func:`asyncio.get_child_watcher`, "
":meth:`asyncio.AbstractEventLoopPolicy.set_child_watcher` and "
":meth:`asyncio.AbstractEventLoopPolicy.get_child_watcher` are deprecated and"
" will be removed in Python 3.14. (Contributed by Kumar Aditya in "
":gh:`94597`.)"
msgstr ""
"Le funzioni :func:`asyncio.set_child_watcher`, "
":func:`asyncio.get_child_watcher`, "
":meth:`asyncio.AbstractEventLoopPolicy.set_child_watcher` e "
":meth:`asyncio.AbstractEventLoopPolicy.get_child_watcher` sono deprecate e "
"saranno rimosse in Python 3.14. (Contributo di Kumar Aditya in :gh:`94597`.)"

#: whatsnew/3.12.rst:1177
msgid ""
"The :meth:`~asyncio.get_event_loop` method of the default event loop policy "
"now emits a :exc:`DeprecationWarning` if there is no current event loop set "
"and it decides to create one. (Contributed by Serhiy Storchaka and Guido van"
" Rossum in :gh:`100160`.)"
msgstr ""
"Il metodo :meth:`~asyncio.get_event_loop` della politica del ciclo di eventi"
" predefinito ora emette un :exc:`DeprecationWarning` se non c'è alcun ciclo "
"di eventi corrente impostato e decide di crearne uno. (Contributo di Serhiy "
"Storchaka e Guido van Rossum in :gh:`100160`.)"

#: whatsnew/3.12.rst:1182
msgid ""
":mod:`calendar`: ``calendar.January`` and ``calendar.February`` constants "
"are deprecated and replaced by :data:`calendar.JANUARY` and "
":data:`calendar.FEBRUARY`. (Contributed by Prince Roshan in :gh:`103636`.)"
msgstr ""
":mod:`calendar`: Le costanti ``calendar.January`` e ``calendar.February`` "
"sono deprecate e sostituite da :data:`calendar.JANUARY` e "
":data:`calendar.FEBRUARY`. (Contributo di Prince Roshan in :gh:`103636`.)"

#: whatsnew/3.12.rst:1186
msgid ""
":mod:`collections.abc`: Deprecated :class:`collections.abc.ByteString`. "
"Prefer :class:`Sequence` or :class:`collections.abc.Buffer`. For use in "
"typing, prefer a union, like ``bytes | bytearray``, or "
":class:`collections.abc.Buffer`. (Contributed by Shantanu Jain in "
":gh:`91896`.)"
msgstr ""
":mod:`collections.abc`: Deprecata :class:`collections.abc.ByteString`. "
"Preferire :class:`Sequence` o :class:`collections.abc.Buffer`. Per l'uso nei"
" tipi, preferire una unione, come ``bytes | bytearray``, o "
":class:`collections.abc.Buffer`. (Contributo di Shantanu Jain in "
":gh:`91896`.)"

#: whatsnew/3.12.rst:1191
msgid ""
":mod:`datetime`: :class:`datetime.datetime`'s "
":meth:`~datetime.datetime.utcnow` and "
":meth:`~datetime.datetime.utcfromtimestamp` are deprecated and will be "
"removed in a future version. Instead, use timezone-aware objects to "
"represent datetimes in UTC: respectively, call "
":meth:`~datetime.datetime.now` and :meth:`~datetime.datetime.fromtimestamp`"
"  with the *tz* parameter set to :const:`datetime.UTC`. (Contributed by Paul"
" Ganssle in :gh:`103857`.)"
msgstr ""
":mod:`datetime`: I metodi :meth:`~datetime.datetime.utcnow` e "
":meth:`~datetime.datetime.utcfromtimestamp` della classe "
":class:`datetime.datetime` sono deprecati e saranno rimossi in una futura "
"versione. Invece, utilizzare oggetti timezone-aware per rappresentare i "
"datetime in UTC: rispettivamente, chiamare :meth:`~datetime.datetime.now` e "
":meth:`~datetime.datetime.fromtimestamp` con il parametro *tz* impostato su "
":const:`datetime.UTC`. (Contributo di Paul Ganssle in :gh:`103857`.)"

#: whatsnew/3.12.rst:1199
msgid ""
":mod:`email`: Deprecate the *isdst* parameter in "
":func:`email.utils.localtime`. (Contributed by Alan Williams in "
":gh:`72346`.)"
msgstr ""
":mod:`email`: Deprecato il parametro *isdst* in "
":func:`email.utils.localtime`. (Contributo di Alan Williams in :gh:`72346`.)"

#: whatsnew/3.12.rst:1202
msgid ""
":mod:`importlib.abc`: Deprecated the following classes, scheduled for "
"removal in Python 3.14:"
msgstr ""
":mod:`importlib.abc`: Deprecate le seguenti classi, pianificate per la "
"rimozione in Python 3.14:"

#: whatsnew/3.12.rst:1423
msgid ":class:`!importlib.abc.ResourceReader`"
msgstr ":class:`!importlib.abc.ResourceReader`"

#: whatsnew/3.12.rst:1424
msgid ":class:`!importlib.abc.Traversable`"
msgstr ":class:`!importlib.abc.Traversable`"

#: whatsnew/3.12.rst:1425
msgid ":class:`!importlib.abc.TraversableResources`"
msgstr ":class:`!importlib.abc.TraversableResources`"

#: whatsnew/3.12.rst:1209
msgid "Use :mod:`importlib.resources.abc` classes instead:"
msgstr ""
"Utilizzare invece le classi del modulo :mod:`importlib.resources.abc`:"

#: whatsnew/3.12.rst:1211
msgid ":class:`importlib.resources.abc.Traversable`"
msgstr ":class:`importlib.resources.abc.Traversable`"

#: whatsnew/3.12.rst:1212
msgid ":class:`importlib.resources.abc.TraversableResources`"
msgstr ":class:`importlib.resources.abc.TraversableResources`"

#: whatsnew/3.12.rst:1214
msgid "(Contributed by Jason R. Coombs and Hugo van Kemenade in :gh:`93963`.)"
msgstr "(Contributo di Jason R. Coombs e Hugo van Kemenade in :gh:`93963`.)"

#: whatsnew/3.12.rst:1216
msgid ""
":mod:`itertools`: Deprecate the support for copy, deepcopy, and pickle "
"operations, which is undocumented, inefficient, historically buggy, and "
"inconsistent. This will be removed in 3.14 for a significant reduction in "
"code volume and maintenance burden. (Contributed by Raymond Hettinger in "
":gh:`101588`.)"
msgstr ""
":mod:`itertools`: Deprecato il supporto per operazioni di copy, deepcopy e "
"pickle, che è non documentato, inefficiente, storicamente soggetto a bug e "
"inconsistente. Questo sarà rimosso in 3.14 per una significativa riduzione "
"del volume di codice e del carico di manutenzione. (Contributo di Raymond "
"Hettinger in :gh:`101588`.)"

#: whatsnew/3.12.rst:1222
msgid ""
":mod:`multiprocessing`: In Python 3.14, the default :mod:`multiprocessing` "
"start method will change to a safer one on Linux, BSDs, and other non-macOS "
"POSIX platforms where ``'fork'`` is currently the default (:gh:`84559`). "
"Adding a runtime warning about this was deemed too disruptive as the "
"majority of code is not expected to care. Use the "
":func:`~multiprocessing.get_context` or "
":func:`~multiprocessing.set_start_method` APIs to explicitly specify when "
"your code *requires* ``'fork'``.  See :ref:`contexts and start methods "
"<multiprocessing-start-methods>`."
msgstr ""
":mod:`multiprocessing`: In Python 3.14, il metodo di avvio predefinito di "
":mod:`multiprocessing` cambierà in uno più sicuro su Linux, BSD e altre "
"piattaforme POSIX non macOS dove ``'fork'`` è attualmente il predefinito "
"(:gh:`84559`). Aggiungere un avviso in fase di runtime su questo cambiamento"
" è stato ritenuto troppo dirompente poiché la maggioranza del codice non "
"dovrebbe risentirne. Utilizzare le API :func:`~multiprocessing.get_context` "
"o :func:`~multiprocessing.set_start_method` per specificare esplicitamente "
"quando il codice *richiede* ``'fork'``. Vedi :ref:`contexts and start "
"methods <multiprocessing-start-methods>`."

#: whatsnew/3.12.rst:1232
msgid ""
":mod:`pkgutil`: :func:`pkgutil.find_loader` and :func:`pkgutil.get_loader` "
"are deprecated and will be removed in Python 3.14; use "
":func:`importlib.util.find_spec` instead. (Contributed by Nikita Sobolev in "
":gh:`97850`.)"
msgstr ""
":mod:`pkgutil`: Le funzioni :func:`pkgutil.find_loader` e "
":func:`pkgutil.get_loader` sono deprecate e saranno rimosse in Python 3.14; "
"utilizzare invece :func:`importlib.util.find_spec`. (Contributo di Nikita "
"Sobolev in :gh:`97850`.)"

#: whatsnew/3.12.rst:1237
msgid ""
":mod:`pty`: The module has two undocumented ``master_open()`` and "
"``slave_open()`` functions that have been deprecated since Python 2 but only"
" gained a proper :exc:`DeprecationWarning` in 3.12. Remove them in 3.14. "
"(Contributed by Soumendra Ganguly and Gregory P. Smith in :gh:`85984`.)"
msgstr ""
":mod:`pty`: Il modulo ha due funzioni non documentate ``master_open()`` e "
"``slave_open()`` che sono deprecate da Python 2 ma hanno ottenuto un vero e "
"proprio :exc:`DeprecationWarning` solo in 3.12. Rimuoverle in 3.14. "
"(Contributo di Soumendra Ganguly e Gregory P. Smith in :gh:`85984`.)"

#: whatsnew/3.12.rst:1242
msgid ":mod:`os`:"
msgstr ":mod:`os`:"

#: whatsnew/3.12.rst:1244
msgid ""
"The ``st_ctime`` fields return by :func:`os.stat` and :func:`os.lstat` on "
"Windows are deprecated. In a future release, they will contain the last "
"metadata change time, consistent with other platforms. For now, they still "
"contain the creation time, which is also available in the new "
"``st_birthtime`` field. (Contributed by Steve Dower in :gh:`99726`.)"
msgstr ""
"I campi ``st_ctime`` restituiti da :func:`os.stat` e :func:`os.lstat` su "
"Windows sono deprecati. In una futura versione, conterranno l'ora "
"dell'ultima modifica dei metadati, in linea con altre piattaforme. Per ora, "
"contengono ancora l'ora di creazione, che è anche disponibile nel nuovo "
"campo ``st_birthtime``. (Contributo di Steve Dower in :gh:`99726`.)"

#: whatsnew/3.12.rst:1250
msgid ""
"On POSIX platforms, :func:`os.fork` can now raise a "
":exc:`DeprecationWarning` when it can detect being called from a "
"multithreaded process. There has always been a fundamental incompatibility "
"with the POSIX platform when doing so. Even if such code *appeared* to work."
" We added the warning to raise awareness as issues encountered by code doing"
" this are becoming more frequent. See the :func:`os.fork` documentation for "
"more details along with `this discussion on fork being incompatible with "
"threads <https://discuss.python.org/t/33555>`_ for *why* we're now surfacing"
" this longstanding platform compatibility problem to developers."
msgstr ""
"Sulle piattaforme POSIX, :func:`os.fork` può ora generare un "
":exc:`DeprecationWarning` quando rileva di essere chiamata da un processo "
"multithread. C'è sempre stata una incompatibilità fondamentale con la "
"piattaforma POSIX quando si fa così. Anche se tale codice *sembrava* "
"funzionare. Abbiamo aggiunto l'avviso per aumentare la consapevolezza poiché"
" i problemi incontrati dal codice che lo fa stanno diventando più frequenti."
" Vedere la documentazione di :func:`os.fork` per ulteriori dettagli insieme "
"a `questa discussione sull'incompatibilità di fork con i thread "
"<https://discuss.python.org/t/33555>`_ per *perché* stiamo ora portando "
"questo problema di compatibilità della piattaforma di lunga data "
"all'attenzione degli sviluppatori."

#: whatsnew/3.12.rst:1260
msgid ""
"When this warning appears due to usage of :mod:`multiprocessing` or "
":mod:`concurrent.futures` the fix is to use a different "
":mod:`multiprocessing` start method such as ``\"spawn\"`` or "
"``\"forkserver\"``."
msgstr ""
"Quando questo avviso appare a causa dell'uso di :mod:`multiprocessing` o "
":mod:`concurrent.futures` la soluzione è di utilizzare un diverso metodo di "
"avvio di :mod:`multiprocessing` come ``\"spawn\"`` o ``\"forkserver\"``."

#: whatsnew/3.12.rst:1264
msgid ""
":mod:`shutil`: The *onerror* argument of :func:`shutil.rmtree` is "
"deprecated; use *onexc* instead. (Contributed by Irit Katriel in "
":gh:`102828`.)"
msgstr ""
":mod:`shutil`: L'argomento *onerror* di :func:`shutil.rmtree` è deprecato; "
"utilizzare *onexc* invece. (Contributo di Irit Katriel in :gh:`102828`.)"

#: whatsnew/3.12.rst:1267
msgid ":mod:`sqlite3`:"
msgstr ":mod:`sqlite3`:"

#: whatsnew/3.12.rst:1269
msgid ""
":ref:`default adapters and converters <sqlite3-default-converters>` are now "
"deprecated. Instead, use the :ref:`sqlite3-adapter-converter-recipes` and "
"tailor them to your needs. (Contributed by Erlend E. Aasland in "
":gh:`90016`.)"
msgstr ""
":ref:`default adapters and converters <sqlite3-default-converters>` sono ora"
" deprecati. Invece, utilizzare :ref:`sqlite3-adapter-converter-recipes` e "
"adattarli alle tue esigenze. (Contributo di Erlend E. Aasland in "
":gh:`90016`.)"

#: whatsnew/3.12.rst:1275
msgid ""
"In :meth:`~sqlite3.Cursor.execute`, :exc:`DeprecationWarning` is now emitted"
" when :ref:`named placeholders <sqlite3-placeholders>` are used together "
"with parameters supplied as a :term:`sequence` instead of as a "
":class:`dict`. Starting from Python 3.14, using named placeholders with "
"parameters supplied as a sequence will raise a "
":exc:`~sqlite3.ProgrammingError`. (Contributed by Erlend E. Aasland in "
":gh:`101698`.)"
msgstr ""
"In :meth:`~sqlite3.Cursor.execute`, ora viene emesso un "
":exc:`DeprecationWarning` quando :ref:`named placeholders "
"<sqlite3-placeholders>` sono utilizzati insieme a parametri forniti come una"
" :term:`sequence` invece che come un :class:`dict`. A partire da Python "
"3.14, l'uso di named placeholders con parametri forniti come una sequence "
"genererà un :exc:`~sqlite3.ProgrammingError`. (Contributo di Erlend E. "
"Aasland in :gh:`101698`.)"

#: whatsnew/3.12.rst:1282
msgid ""
":mod:`sys`: The :data:`sys.last_type`, :data:`sys.last_value` and "
":data:`sys.last_traceback` fields are deprecated. Use :data:`sys.last_exc` "
"instead. (Contributed by Irit Katriel in :gh:`102778`.)"
msgstr ""
":mod:`sys`: I campi :data:`sys.last_type`, :data:`sys.last_value` e "
":data:`sys.last_traceback` sono deprecati. Utilizzare :data:`sys.last_exc` "
"invece. (Contributo di Irit Katriel in :gh:`102778`.)"

#: whatsnew/3.12.rst:1286
msgid ""
":mod:`tarfile`: Extracting tar archives without specifying *filter* is "
"deprecated until Python 3.14, when ``'data'`` filter will become the "
"default. See :ref:`tarfile-extraction-filter` for details."
msgstr ""
":mod:`tarfile`: L'estrazione degli archivi tar senza specificare *filter* è "
"deprecata fino a Python 3.14, quando il filtro ``'data'`` diventerà il "
"predefinito. Vedere :ref:`tarfile-extraction-filter` per i dettagli."

#: whatsnew/3.12.rst:1290
msgid ":mod:`typing`:"
msgstr ":mod:`typing`:"

#: whatsnew/3.12.rst:1292
msgid ""
":class:`typing.Hashable` and :class:`typing.Sized`, aliases for "
":class:`collections.abc.Hashable` and :class:`collections.abc.Sized` "
"respectively, are deprecated. (:gh:`94309`.)"
msgstr ""
":class:`typing.Hashable` e :class:`typing.Sized`, alias rispettivamente di "
":class:`collections.abc.Hashable` e :class:`collections.abc.Sized`, sono "
"deprecati. (:gh:`94309`.)"

#: whatsnew/3.12.rst:1296
msgid ""
":class:`typing.ByteString`, deprecated since Python 3.9, now causes a "
":exc:`DeprecationWarning` to be emitted when it is used. (Contributed by "
"Alex Waygood in :gh:`91896`.)"
msgstr ""
":class:`typing.ByteString`, deprecata da Python 3.9, ora genera un "
":exc:`DeprecationWarning` quando viene utilizzata. (Contributo di Alex "
"Waygood in :gh:`91896`.)"

#: whatsnew/3.12.rst:1300
msgid ""
":mod:`xml.etree.ElementTree`: The module now emits :exc:`DeprecationWarning`"
" when testing the truth value of an :class:`xml.etree.ElementTree.Element`. "
"Before, the Python implementation emitted :exc:`FutureWarning`, and the C "
"implementation emitted nothing. (Contributed by Jacob Walls in :gh:`83122`.)"
msgstr ""
":mod:`xml.etree.ElementTree`: Il modulo ora emette :exc:`DeprecationWarning`"
" quando si testa il valore di verità di un "
":class:`xml.etree.ElementTree.Element`. Prima, l'implementazione in Python "
"emetteva :exc:`FutureWarning`, e l'implementazione in C non emetteva nulla. "
"(Contributo di Jacob Walls in :gh:`83122`.)"

#: whatsnew/3.12.rst:1306
msgid ""
"The 3-arg signatures (type, value, traceback) of :meth:`coroutine throw() "
"<coroutine.throw>`, :meth:`generator throw() <generator.throw>` and "
":meth:`async generator throw() <agen.athrow>` are deprecated and may be "
"removed in a future version of Python. Use the single-arg versions of these "
"functions instead. (Contributed by Ofey Chan in :gh:`89874`.)"
msgstr ""
"Le firme a 3 argomenti (type, value, traceback) di :meth:`coroutine throw() "
"<coroutine.throw>`, :meth:`generator throw() <generator.throw>` e "
":meth:`async generator throw() <agen.athrow>` sono deprecate e potrebbero "
"essere rimosse in una futura versione di Python. Utilizzare invece le "
"versioni a un singolo argomento di queste funzioni. (Contributo di Ofey Chan"
" in :gh:`89874`.)"

#: whatsnew/3.12.rst:1312
msgid ""
":exc:`DeprecationWarning` is now raised when ``__package__`` on a module "
"differs from ``__spec__.parent`` (previously it was :exc:`ImportWarning`). "
"(Contributed by Brett Cannon in :gh:`65961`.)"
msgstr ""
"Ora viene generato un :exc:`DeprecationWarning` quando ``__package__`` in un"
" modulo differisce da ``__spec__.parent`` (in precedenza era "
":exc:`ImportWarning`). (Contributo di Brett Cannon in :gh:`65961`.)"

#: whatsnew/3.12.rst:1317
msgid ""
"Setting ``__package__`` or ``__cached__`` on a module is deprecated, and "
"will cease to be set or taken into consideration by the import system in "
"Python 3.14. (Contributed by Brett Cannon in :gh:`65961`.)"
msgstr ""
"Impostare ``__package__`` o ``__cached__`` in un modulo è deprecato, e "
"smetterà di essere impostato o considerato dall'import system in Python "
"3.14. (Contributo di Brett Cannon in :gh:`65961`.)"

#: whatsnew/3.12.rst:1321
msgid ""
"The bitwise inversion operator (``~``) on bool is deprecated. It will throw "
"an error in Python 3.14. Use ``not`` for logical negation of bools instead. "
"In the rare case that you really need the bitwise inversion of the "
"underlying ``int``, convert to int explicitly: ``~int(x)``. (Contributed by "
"Tim Hoffmann in :gh:`103487`.)"
msgstr ""
"L'operatore di inversione bit a bit (``~``) su bool è deprecato. Genererà un"
" errore in Python 3.14. Utilizzare ``not`` per la negazione logica dei bools"
" invece. Nel raro caso in cui sia davvero necessario l'inversione bit a bit "
"dell'``int`` sottostante, convertire esplicitamente in int: ``~int(x)``. "
"(Contributo di Tim Hoffmann in :gh:`103487`.)"

#: whatsnew/3.12.rst:1327
msgid ""
"Accessing :attr:`~codeobject.co_lnotab` on code objects was deprecated in "
"Python 3.10 via :pep:`626`, but it only got a proper "
":exc:`DeprecationWarning` in 3.12, therefore it will be removed in 3.14. "
"(Contributed by Nikita Sobolev in :gh:`101866`.)"
msgstr ""
"Accedere a :attr:`~codeobject.co_lnotab` sugli oggetti codice è deprecato in"
" Python 3.10 tramite :pep:`626`, ma ha ottenuto un vero e proprio "
":exc:`DeprecationWarning` solo in 3.12, quindi sarà rimosso in 3.14. "
"(Contributo di Nikita Sobolev in :gh:`101866`.)"

#: whatsnew/3.12.rst:1334
msgid "Pending Removal in Python 3.13"
msgstr "Rimozione pianificata in Python 3.13"

#: whatsnew/3.12.rst:1336
msgid ""
"The following modules and APIs have been deprecated in earlier Python "
"releases, and will be removed in Python 3.13."
msgstr ""
"I seguenti moduli e API sono stati deprecati in versioni precedenti di "
"Python e saranno rimossi in Python 3.13."

#: whatsnew/3.12.rst:1339
msgid "Modules (see :pep:`594`):"
msgstr "Moduli (vedi :pep:`594`):"



#: whatsnew/3.12.rst:1361
msgid "Other modules:"
msgstr "Altri moduli:"

#: whatsnew/3.12.rst:1363
msgid ":mod:`!lib2to3`, and the :program:`2to3` program (:gh:`84540`)"
msgstr ":mod:`!lib2to3`, e il programma :program:`2to3` (:gh:`84540`)"

#: whatsnew/3.12.rst:1455
msgid "APIs:"
msgstr "API:"

#: whatsnew/3.12.rst:1367
msgid ":class:`!configparser.LegacyInterpolation` (:gh:`90765`)"
msgstr ":class:`!configparser.LegacyInterpolation` (:gh:`90765`)"

#: whatsnew/3.12.rst:1368
msgid "``locale.resetlocale()`` (:gh:`90817`)"
msgstr "``locale.resetlocale()`` (:gh:`90817`)"

#: whatsnew/3.12.rst:1369
msgid ":meth:`!turtle.RawTurtle.settiltangle` (:gh:`50096`)"
msgstr ":meth:`!turtle.RawTurtle.settiltangle` (:gh:`50096`)"

#: whatsnew/3.12.rst:1370
msgid ":func:`!unittest.findTestCases` (:gh:`50096`)"
msgstr ":func:`!unittest.findTestCases` (:gh:`50096`)"

#: whatsnew/3.12.rst:1371
msgid ":func:`!unittest.getTestCaseNames` (:gh:`50096`)"
msgstr ":func:`!unittest.getTestCaseNames` (:gh:`50096`)"

#: whatsnew/3.12.rst:1372
msgid ":func:`!unittest.makeSuite` (:gh:`50096`)"
msgstr ":func:`!unittest.makeSuite` (:gh:`50096`)"

#: whatsnew/3.12.rst:1373
msgid ":meth:`!unittest.TestProgram.usageExit` (:gh:`67048`)"
msgstr ":meth:`!unittest.TestProgram.usageExit` (:gh:`67048`)"

#: whatsnew/3.12.rst:1374
msgid ":class:`!webbrowser.MacOSX` (:gh:`86421`)"
msgstr ":class:`!webbrowser.MacOSX` (:gh:`86421`)"

#: whatsnew/3.12.rst:1375
msgid ":class:`classmethod` descriptor chaining (:gh:`89519`)"
msgstr "Catena di descrittori :class:`classmethod` (:gh:`89519`)"

#: whatsnew/3.12.rst:1376
msgid ":mod:`importlib.resources` deprecated methods:"
msgstr "metodi deprecati :mod:`importlib.resources`:"

#: whatsnew/3.12.rst:1378
msgid "``contents()``"
msgstr "``contents()``"

#: whatsnew/3.12.rst:1379
msgid "``is_resource()``"
msgstr "``is_resource()``"

#: whatsnew/3.12.rst:1380
msgid "``open_binary()``"
msgstr "``open_binary()``"

#: whatsnew/3.12.rst:1381
msgid "``open_text()``"
msgstr "``open_text()``"

#: whatsnew/3.12.rst:1382
msgid "``path()``"
msgstr "``path()``"

#: whatsnew/3.12.rst:1383
msgid "``read_binary()``"
msgstr "``read_binary()``"

#: whatsnew/3.12.rst:1384
msgid "``read_text()``"
msgstr "``read_text()``"

#: whatsnew/3.12.rst:1386
msgid ""
"Use :func:`importlib.resources.files()` instead.  Refer to `importlib-"
"resources: Migrating from Legacy <https://importlib-"
"resources.readthedocs.io/en/latest/using.html#migrating-from-legacy>`_ "
"(:gh:`106531`)"
msgstr ""
"Usa :func:`importlib.resources.files()` al suo posto. Consulta `importlib-"
"resources: Migrating from Legacy <https://importlib-"
"resources.readthedocs.io/en/latest/using.html#migrating-from-legacy>`_ "
"(:gh:`106531`)"

#: whatsnew/3.12.rst:2351
msgid "Pending Removal in Python 3.14"
msgstr "Rimozione prevista in Python 3.14"

#: whatsnew/3.12.rst:1392
msgid ""
"The following APIs have been deprecated and will be removed in Python 3.14."
msgstr ""
"Le seguenti API sono state deprecate e verranno rimosse in Python 3.14."

#: whatsnew/3.12.rst:1395
msgid ""
":mod:`argparse`: The *type*, *choices*, and *metavar* parameters of "
":class:`!argparse.BooleanOptionalAction`"
msgstr ""
":mod:`argparse`: i parametri *type*, *choices*, e *metavar* di "
":class:`!argparse.BooleanOptionalAction`"

#: whatsnew/3.12.rst:1398
msgid ":mod:`ast`:"
msgstr ":mod:`ast`:"

#: whatsnew/3.12.rst:1408
msgid ":class:`!asyncio.MultiLoopChildWatcher`"
msgstr ":class:`!asyncio.MultiLoopChildWatcher`"

#: whatsnew/3.12.rst:1409
msgid ":class:`!asyncio.FastChildWatcher`"
msgstr ":class:`!asyncio.FastChildWatcher`"

#: whatsnew/3.12.rst:1410
msgid ":class:`!asyncio.AbstractChildWatcher`"
msgstr ":class:`!asyncio.AbstractChildWatcher`"

#: whatsnew/3.12.rst:1411
msgid ":class:`!asyncio.SafeChildWatcher`"
msgstr ":class:`!asyncio.SafeChildWatcher`"

#: whatsnew/3.12.rst:1412
msgid ":func:`!asyncio.set_child_watcher`"
msgstr ":func:`!asyncio.set_child_watcher`"

#: whatsnew/3.12.rst:1413
msgid ":func:`!asyncio.get_child_watcher`,"
msgstr ":func:`!asyncio.get_child_watcher`,"

#: whatsnew/3.12.rst:1414
msgid ":meth:`!asyncio.AbstractEventLoopPolicy.set_child_watcher`"
msgstr ":meth:`!asyncio.AbstractEventLoopPolicy.set_child_watcher`"

#: whatsnew/3.12.rst:1415
msgid ":meth:`!asyncio.AbstractEventLoopPolicy.get_child_watcher`"
msgstr ":meth:`!asyncio.AbstractEventLoopPolicy.get_child_watcher`"

#: whatsnew/3.12.rst:1417
msgid ":mod:`collections.abc`: :class:`!collections.abc.ByteString`."
msgstr ":mod:`collections.abc`: :class:`!collections.abc.ByteString`."

#: whatsnew/3.12.rst:1419
msgid ":mod:`email`: the *isdst* parameter in :func:`email.utils.localtime`."
msgstr ":mod:`email`: il parametro *isdst* in :func:`email.utils.localtime`."

#: whatsnew/3.12.rst:1421
msgid ":mod:`importlib.abc`:"
msgstr ":mod:`importlib.abc`:"

#: whatsnew/3.12.rst:1427
msgid ":mod:`itertools`: Support for copy, deepcopy, and pickle operations."
msgstr ""
":mod:`itertools`: Supporto per operazioni di copia, deepcopy e pickle."

#: whatsnew/3.12.rst:1429
msgid ":mod:`pkgutil`:"
msgstr ":mod:`pkgutil`:"

#: whatsnew/3.12.rst:1431
msgid ":func:`!pkgutil.find_loader`"
msgstr ":func:`!pkgutil.find_loader`"

#: whatsnew/3.12.rst:1432
msgid ":func:`!pkgutil.get_loader`."
msgstr ":func:`!pkgutil.get_loader`."

#: whatsnew/3.12.rst:1434
msgid ":mod:`pty`:"
msgstr ":mod:`pty`:"

#: whatsnew/3.12.rst:1436
msgid ":func:`!pty.master_open`"
msgstr ":func:`!pty.master_open`"

#: whatsnew/3.12.rst:1437
msgid ":func:`!pty.slave_open`"
msgstr ":func:`!pty.slave_open`"

#: whatsnew/3.12.rst:1439
msgid ":mod:`shutil`: The *onerror* argument of :func:`shutil.rmtree`"
msgstr ":mod:`shutil`: L'argomento *onerror* di :func:`shutil.rmtree`"

#: whatsnew/3.12.rst:1441
msgid ":mod:`typing`: :class:`!typing.ByteString`"
msgstr ":mod:`typing`: :class:`!typing.ByteString`"

#: whatsnew/3.12.rst:1443
msgid ""
":mod:`xml.etree.ElementTree`: Testing the truth value of an "
":class:`xml.etree.ElementTree.Element`."
msgstr ""
":mod:`xml.etree.ElementTree`: Verifica del valore di verità di un "
":class:`xml.etree.ElementTree.Element`."

#: whatsnew/3.12.rst:1445
msgid "The ``__package__`` and ``__cached__`` attributes on module objects."
msgstr "Gli attributi ``__package__`` e ``__cached__`` sugli oggetti modulo."

#: whatsnew/3.12.rst:1447
msgid "The :attr:`~codeobject.co_lnotab` attribute of code objects."
msgstr "L'attributo :attr:`~codeobject.co_lnotab` degli oggetti codice."

#: whatsnew/3.12.rst:2388
msgid "Pending Removal in Python 3.15"
msgstr "Rimozione in sospeso in Python 3.15"

#: whatsnew/3.12.rst:1452
msgid ""
"The following APIs have been deprecated and will be removed in Python 3.15."
msgstr ""
"Le seguenti API sono state deprecate e saranno rimosse in Python 3.15."

#: whatsnew/3.12.rst:1457
msgid ":func:`locale.getdefaultlocale` (:gh:`90817`)"
msgstr ":func:`locale.getdefaultlocale` (:gh:`90817`)"

#: whatsnew/3.12.rst:2406
msgid "Pending Removal in Future Versions"
msgstr "Rimozione in sospeso nelle versioni future"

#: whatsnew/3.12.rst:1463
msgid ""
"The following APIs were deprecated in earlier Python versions and will be "
"removed, although there is currently no date scheduled for their removal."
msgstr ""
"Le seguenti API sono state deprecate nelle versioni precedenti di Python e "
"saranno rimosse, anche se al momento non è prevista una data per la loro "
"rimozione."

#: whatsnew/3.12.rst:1466
msgid ":mod:`array`'s ``'u'`` format code (:gh:`57281`)"
msgstr "Il codice di formato ``'u'`` di :mod:`array` (:gh:`57281`)"

#: whatsnew/3.12.rst:1468
msgid ":class:`typing.Text` (:gh:`92332`)"
msgstr ":class:`typing.Text` (:gh:`92332`)"

#: whatsnew/3.12.rst:1470
msgid ""
"Currently Python accepts numeric literals immediately followed by keywords, "
"for example ``0in x``, ``1or x``, ``0if 1else 2``.  It allows confusing and "
"ambiguous expressions like ``[0x1for x in y]`` (which can be interpreted as "
"``[0x1 for x in y]`` or ``[0x1f or x in y]``). A syntax warning is raised if"
" the numeric literal is immediately followed by one of keywords "
":keyword:`and`, :keyword:`else`, :keyword:`for`, :keyword:`if`, "
":keyword:`in`, :keyword:`is` and :keyword:`or`. In a future release it will "
"be changed to a syntax error. (:gh:`87999`)"
msgstr ""
"Attualmente Python accetta letterali numerici seguiti immediatamente da "
"parole chiave, ad esempio ``0in x``, ``1or x``, ``0if 1else 2``. Permette "
"espressioni confuse e ambigue come ``[0x1for x in y]`` (che può essere "
"interpretato come ``[0x1 for x in y]`` o ``[0x1f or x in y]``). Viene "
"generato un avviso di sintassi se il letterale numerico è seguito "
"immediatamente da una delle parole chiave :keyword:`and`, :keyword:`else`, "
":keyword:`for`, :keyword:`if`, :keyword:`in`, :keyword:`is` e :keyword:`or`."
" In una versione futura verrà modificato in un errore di sintassi. "
"(:gh:`87999`)"

#: whatsnew/3.12.rst:2438
msgid "Removed"
msgstr "Rimosso"

#: whatsnew/3.12.rst:1484
msgid "asynchat and asyncore"
msgstr "asynchat e asyncore"

#: whatsnew/3.12.rst:1486
msgid ""
"These two modules have been removed according to the schedule in :pep:`594`,"
" having been deprecated in Python 3.6. Use :mod:`asyncio` instead. "
"(Contributed by Nikita Sobolev in :gh:`96580`.)"
msgstr ""
"Questi due moduli sono stati rimossi secondo il programma in :pep:`594`, "
"essendo stati deprecati in Python 3.6. Utilizzare :mod:`asyncio` invece. "
"(Contribuito da Nikita Sobolev in :gh:`96580`.)"

#: whatsnew/3.12.rst:1493
msgid "configparser"
msgstr "configparser"

#: whatsnew/3.12.rst:1495
msgid ""
"Several names deprecated in the :mod:`configparser` way back in 3.2 have "
"been removed per :gh:`89336`:"
msgstr ""
"Diversi nomi deprecati nel :mod:`configparser` fin dalla versione 3.2 sono "
"stati rimossi per :gh:`89336`:"

#: whatsnew/3.12.rst:1498
msgid ""
":class:`configparser.ParsingError` no longer has a ``filename`` attribute or"
" argument. Use the ``source`` attribute and argument instead."
msgstr ""
":class:`configparser.ParsingError` non ha più un attributo o argomento "
"``filename``. Utilizzare al suo posto l'attributo e l'argomento ``source``."

#: whatsnew/3.12.rst:1500
msgid ""
":mod:`configparser` no longer has a ``SafeConfigParser`` class. Use the "
"shorter :class:`~configparser.ConfigParser` name instead."
msgstr ""
":mod:`configparser` non ha più una classe ``SafeConfigParser``. Utilizzare "
"al suo posto il nome più breve :class:`~configparser.ConfigParser`."

#: whatsnew/3.12.rst:1502
msgid ""
":class:`configparser.ConfigParser` no longer has a ``readfp`` method. Use "
":meth:`~configparser.ConfigParser.read_file` instead."
msgstr ""
":class:`configparser.ConfigParser` non ha più un metodo ``readfp``. "
"Utilizzare al suo posto :meth:`~configparser.ConfigParser.read_file`."

#: whatsnew/3.12.rst:1506
msgid "distutils"
msgstr "distutils"

#: whatsnew/3.12.rst:1508
msgid ""
"Remove the :py:mod:`!distutils` package. It was deprecated in Python 3.10 by"
" :pep:`632` \"Deprecate distutils module\". For projects still using "
"``distutils`` and cannot be updated to something else, the ``setuptools`` "
"project can be installed: it still provides ``distutils``. (Contributed by "
"Victor Stinner in :gh:`92584`.)"
msgstr ""
"Rimozione del pacchetto :py:mod:`!distutils`. È stato deprecato in Python "
"3.10 da :pep:`632` \"Deprecazione del modulo distutils\". Per i progetti che"
" ancora utilizzano ``distutils`` e non possono essere aggiornati ad altro, "
"il progetto ``setuptools`` può essere installato: fornisce ancora "
"``distutils``. (Contribuito da Victor Stinner in :gh:`92584`.)"

#: whatsnew/3.12.rst:1515
msgid "ensurepip"
msgstr "ensurepip"

#: whatsnew/3.12.rst:1517
msgid ""
"Remove the bundled setuptools wheel from :mod:`ensurepip`, and stop "
"installing setuptools in environments created by :mod:`venv`."
msgstr ""
"Rimozione della ruota setuptools inclusa in :mod:`ensurepip`, e cessazione "
"dell'installazione di setuptools negli ambienti creati da :mod:`venv`."

#: whatsnew/3.12.rst:1520
msgid ""
"``pip (>= 22.1)`` does not require setuptools to be installed in the "
"environment. ``setuptools``-based (and ``distutils``-based) packages can "
"still be used with ``pip install``, since pip will provide ``setuptools`` in"
" the build environment it uses for building a package."
msgstr ""
"``pip (>= 22.1)`` non richiede che setuptools sia installato nell'ambiente. "
"I pacchetti basati su ``setuptools`` (e su ``distutils``) possono ancora "
"essere utilizzati con ``pip install``, poiché pip fornirà ``setuptools`` "
"nell'ambiente di build che utilizza per costruire un pacchetto."

#: whatsnew/3.12.rst:1526
msgid ""
"``easy_install``, ``pkg_resources``, ``setuptools`` and ``distutils`` are no"
" longer provided by default in environments created with ``venv`` or "
"bootstrapped with ``ensurepip``, since they are part of the ``setuptools`` "
"package. For projects relying on these at runtime, the ``setuptools`` "
"project should be declared as a dependency and installed separately "
"(typically, using pip)."
msgstr ""
"``easy_install``, ``pkg_resources``, ``setuptools`` e ``distutils`` non sono"
" più forniti di default negli ambienti creati con ``venv`` o bootstrap con "
"``ensurepip``, poiché fanno parte del pacchetto ``setuptools``. Per i "
"progetti che dipendono da questi a runtime, il progetto ``setuptools`` "
"dovrebbe essere dichiarato come una dipendenza e installato separatamente "
"(tipicamente, utilizzando pip)."

#: whatsnew/3.12.rst:1533
msgid "(Contributed by Pradyun Gedam in :gh:`95299`.)"
msgstr "(Contribuito da Pradyun Gedam in :gh:`95299`.)"

#: whatsnew/3.12.rst:1536
msgid "enum"
msgstr "enum"

#: whatsnew/3.12.rst:1538
msgid ""
"Remove :mod:`enum`'s ``EnumMeta.__getattr__``, which is no longer needed for"
" enum attribute access. (Contributed by Ethan Furman in :gh:`95083`.)"
msgstr ""
"Rimozione di ``EnumMeta.__getattr__`` di :mod:`enum`, che non è più "
"necessario per l'accesso agli attributi degli enum. (Contribuito da Ethan "
"Furman in :gh:`95083`.)"

#: whatsnew/3.12.rst:1543
msgid "ftplib"
msgstr "ftplib"

#: whatsnew/3.12.rst:1545
msgid ""
"Remove :mod:`ftplib`'s ``FTP_TLS.ssl_version`` class attribute: use the "
"*context* parameter instead. (Contributed by Victor Stinner in :gh:`94172`.)"
msgstr ""
"Rimozione dell'attributo di classe ``FTP_TLS.ssl_version`` di :mod:`ftplib`:"
" utilizzare invece il parametro *context*. (Contribuito da Victor Stinner in"
" :gh:`94172`.)"

#: whatsnew/3.12.rst:1550
msgid "gzip"
msgstr "gzip"

#: whatsnew/3.12.rst:1552
msgid ""
"Remove the ``filename`` attribute of :mod:`gzip`'s :class:`gzip.GzipFile`, "
"deprecated since Python 2.6, use the :attr:`~gzip.GzipFile.name` attribute "
"instead. In write mode, the ``filename`` attribute added ``'.gz'`` file "
"extension if it was not present. (Contributed by Victor Stinner in "
":gh:`94196`.)"
msgstr ""
"Rimozione dell'attributo ``filename`` di :class:`gzip.GzipFile` di "
":mod:`gzip`, deprecato dalla versione Python 2.6, utilizzare invece "
"l'attributo :attr:`~gzip.GzipFile.name`. In modalità scrittura, l'attributo "
"``filename`` aggiungeva l'estensione di file ``'.gz'`` se non era presente. "
"(Contribuito da Victor Stinner in :gh:`94196`.)"

#: whatsnew/3.12.rst:1559
msgid "hashlib"
msgstr "hashlib"

#: whatsnew/3.12.rst:1561
msgid ""
"Remove the pure Python implementation of :mod:`hashlib`'s "
":func:`hashlib.pbkdf2_hmac()`, deprecated in Python 3.10. Python 3.10 and "
"newer requires OpenSSL 1.1.1 (:pep:`644`): this OpenSSL version provides a C"
" implementation of :func:`~hashlib.pbkdf2_hmac()` which is faster. "
"(Contributed by Victor Stinner in :gh:`94199`.)"
msgstr ""
"Rimozione dell'implementazione pura in Python di "
":func:`hashlib.pbkdf2_hmac()` di :mod:`hashlib`, deprecato in Python 3.10. "
"Python 3.10 e versioni successive richiedono OpenSSL 1.1.1 (:pep:`644`): "
"questa versione di OpenSSL fornisce una implementazione in C di "
":func:`~hashlib.pbkdf2_hmac()` che è più veloce. (Contribuito da Victor "
"Stinner in :gh:`94199`.)"

#: whatsnew/3.12.rst:1595
msgid "importlib"
msgstr "importlib"

#: whatsnew/3.12.rst:1570
msgid ""
"Many previously deprecated cleanups in :mod:`importlib` have now been "
"completed:"
msgstr ""
"Molti di precedenti deprecazioni in :mod:`importlib` sono ora state "
"completate:"

#: whatsnew/3.12.rst:1573
msgid ""
"References to, and support for :meth:`!module_repr()` has been removed. "
"(Contributed by Barry Warsaw in :gh:`97850`.)"
msgstr ""
"I riferimenti a, e il supporto per :meth:`!module_repr()` sono stati "
"rimossi. (Contribuito da Barry Warsaw in :gh:`97850`.)"

#: whatsnew/3.12.rst:1576
msgid ""
"``importlib.util.set_package``, ``importlib.util.set_loader`` and "
"``importlib.util.module_for_loader`` have all been removed. (Contributed by "
"Brett Cannon and Nikita Sobolev in :gh:`65961` and :gh:`97850`.)"
msgstr ""
"``importlib.util.set_package``, ``importlib.util.set_loader`` e "
"``importlib.util.module_for_loader`` sono stati tutti rimossi. (Contribuito "
"da Brett Cannon e Nikita Sobolev in :gh:`65961` e :gh:`97850`.)"

#: whatsnew/3.12.rst:1580
msgid ""
"Support for ``find_loader()`` and ``find_module()`` APIs have been removed."
"  (Contributed by Barry Warsaw in :gh:`98040`.)"
msgstr ""
"Il supporto per le API ``find_loader()`` e ``find_module()`` è stato "
"rimosso.  (Contribuito da Barry Warsaw in :gh:`98040`.)"

#: whatsnew/3.12.rst:1583
msgid ""
"``importlib.abc.Finder``, ``pkgutil.ImpImporter``, and ``pkgutil.ImpLoader``"
" have been removed.  (Contributed by Barry Warsaw in :gh:`98040`.)"
msgstr ""
"``importlib.abc.Finder``, ``pkgutil.ImpImporter`` e ``pkgutil.ImpLoader`` "
"sono stati rimossi.  (Contribuito da Barry Warsaw in :gh:`98040`.)"

#: whatsnew/3.12.rst:1595
msgid "imp"
msgstr "imp"

#: whatsnew/3.12.rst:1589
msgid ""
"The :mod:`!imp` module has been removed.  (Contributed by Barry Warsaw in "
":gh:`98040`.)"
msgstr ""
"Il modulo :mod:`!imp` è stato rimosso.  (Contribuito da Barry Warsaw in "
":gh:`98040`.)"

#: whatsnew/3.12.rst:1592
msgid "To migrate, consult the following correspondence table:"
msgstr "Per migrare, consultare la seguente tabella di corrispondenza:"

#: whatsnew/3.12.rst:1597
msgid "``imp.NullImporter``"
msgstr "``imp.NullImporter``"

#: whatsnew/3.12.rst:1597
msgid "Insert ``None`` into ``sys.path_importer_cache``"
msgstr "Inserire ``None`` in ``sys.path_importer_cache``"

#: whatsnew/3.12.rst:1598
msgid "``imp.cache_from_source()``"
msgstr "``imp.cache_from_source()``"

#: whatsnew/3.12.rst:1598
msgid ":func:`importlib.util.cache_from_source`"
msgstr ":func:`importlib.util.cache_from_source`"

#: whatsnew/3.12.rst:1599
msgid "``imp.find_module()``"
msgstr "``imp.find_module()``"

#: whatsnew/3.12.rst:1599
msgid ":func:`importlib.util.find_spec`"
msgstr ":func:`importlib.util.find_spec`"

#: whatsnew/3.12.rst:1600
msgid "``imp.get_magic()``"
msgstr "``imp.get_magic()``"

#: whatsnew/3.12.rst:1600
msgid ":attr:`importlib.util.MAGIC_NUMBER`"
msgstr ":attr:`importlib.util.MAGIC_NUMBER`"

#: whatsnew/3.12.rst:1601
msgid "``imp.get_suffixes()``"
msgstr "``imp.get_suffixes()``"

#: whatsnew/3.12.rst:1601
msgid ""
":attr:`importlib.machinery.SOURCE_SUFFIXES`, "
":attr:`importlib.machinery.EXTENSION_SUFFIXES`, and "
":attr:`importlib.machinery.BYTECODE_SUFFIXES`"
msgstr ""
":attr:`importlib.machinery.SOURCE_SUFFIXES`, "
":attr:`importlib.machinery.EXTENSION_SUFFIXES`, e "
":attr:`importlib.machinery.BYTECODE_SUFFIXES`"

#: whatsnew/3.12.rst:1602
msgid "``imp.get_tag()``"
msgstr "``imp.get_tag()``"

#: whatsnew/3.12.rst:1602
msgid ":attr:`sys.implementation.cache_tag <sys.implementation>`"
msgstr ":attr:`sys.implementation.cache_tag <sys.implementation>`"

#: whatsnew/3.12.rst:1603
msgid "``imp.load_module()``"
msgstr "``imp.load_module()``"

#: whatsnew/3.12.rst:1603
msgid ":func:`importlib.import_module`"
msgstr ":func:`importlib.import_module`"

#: whatsnew/3.12.rst:1604
msgid "``imp.new_module(name)``"
msgstr "``imp.new_module(name)``"

#: whatsnew/3.12.rst:1604
msgid "``types.ModuleType(name)``"
msgstr "``types.ModuleType(name)``"

#: whatsnew/3.12.rst:1605
msgid "``imp.reload()``"
msgstr "``imp.reload()``"

#: whatsnew/3.12.rst:1605
msgid ":func:`importlib.reload`"
msgstr ":func:`importlib.reload`"

#: whatsnew/3.12.rst:1606
msgid "``imp.source_from_cache()``"
msgstr "``imp.source_from_cache()``"

#: whatsnew/3.12.rst:1606
msgid ":func:`importlib.util.source_from_cache`"
msgstr ":func:`importlib.util.source_from_cache`"

#: whatsnew/3.12.rst:1607
msgid "``imp.load_source()``"
msgstr "``imp.load_source()``"

#: whatsnew/3.12.rst:1607
msgid "*See below*"
msgstr "*Vedi sotto*"

#: whatsnew/3.12.rst:1610
msgid "Replace ``imp.load_source()`` with::"
msgstr "Sostituire ``imp.load_source()`` con::"

#: whatsnew/3.12.rst:1625
msgid "Remove :mod:`!imp` functions and attributes with no replacements:"
msgstr ""
"Rimuovere le funzioni e gli attributi di :mod:`!imp` senza sostituzioni:"

#: whatsnew/3.12.rst:1627
msgid "Undocumented functions:"
msgstr "Funzioni non documentate:"

#: whatsnew/3.12.rst:1629
msgid "``imp.init_builtin()``"
msgstr "``imp.init_builtin()``"

#: whatsnew/3.12.rst:1630
msgid "``imp.load_compiled()``"
msgstr "``imp.load_compiled()``"

#: whatsnew/3.12.rst:1631
msgid "``imp.load_dynamic()``"
msgstr "``imp.load_dynamic()``"

#: whatsnew/3.12.rst:1632
msgid "``imp.load_package()``"
msgstr "``imp.load_package()``"

#: whatsnew/3.12.rst:1634
msgid ""
"``imp.lock_held()``, ``imp.acquire_lock()``, ``imp.release_lock()``: the "
"locking scheme has changed in Python 3.3 to per-module locks."
msgstr ""
"``imp.lock_held()``, ``imp.acquire_lock()``, ``imp.release_lock()``: lo "
"schema di blocco è cambiato in Python 3.3 a blocchi per modulo."

#: whatsnew/3.12.rst:1636
msgid ""
"``imp.find_module()`` constants: ``SEARCH_ERROR``, ``PY_SOURCE``, "
"``PY_COMPILED``, ``C_EXTENSION``, ``PY_RESOURCE``, ``PKG_DIRECTORY``, "
"``C_BUILTIN``, ``PY_FROZEN``, ``PY_CODERESOURCE``, ``IMP_HOOK``."
msgstr ""
"Costanti di ``imp.find_module()``: ``SEARCH_ERROR``, ``PY_SOURCE``, "
"``PY_COMPILED``, ``C_EXTENSION``, ``PY_RESOURCE``, ``PKG_DIRECTORY``, "
"``C_BUILTIN``, ``PY_FROZEN``, ``PY_CODERESOURCE``, ``IMP_HOOK``."

#: whatsnew/3.12.rst:1641
msgid "io"
msgstr "io"

#: whatsnew/3.12.rst:1643
msgid ""
"Remove :mod:`io`'s ``io.OpenWrapper`` and ``_pyio.OpenWrapper``, deprecated "
"in Python 3.10: just use :func:`open` instead. The :func:`open` "
"(:func:`io.open`) function is a built-in function. Since Python 3.10, "
":func:`!_pyio.open` is also a static method. (Contributed by Victor Stinner "
"in :gh:`94169`.)"
msgstr ""
"Rimuovere ``io.OpenWrapper`` di :mod:`io` e ``_pyio.OpenWrapper``, deprecati"
" in Python 3.10: utilizzare semplicemente :func:`open`. La funzione "
":func:`open` (:func:`io.open`) è una funzione integrata. Dalla versione 3.10"
" di Python, :func:`!_pyio.open` è anche un metodo statico. (Contributo di "
"Victor Stinner in :gh:`94169`.)"

#: whatsnew/3.12.rst:1650
msgid "locale"
msgstr "locale"

#: whatsnew/3.12.rst:1652
msgid ""
"Remove :mod:`locale`'s :func:`!locale.format` function, deprecated in Python"
" 3.7: use :func:`locale.format_string` instead. (Contributed by Victor "
"Stinner in :gh:`94226`.)"
msgstr ""
"Rimuovere la funzione :func:`!locale.format` di :mod:`locale`, deprecata in "
"Python 3.7: usare invece :func:`locale.format_string`. (Contributo di Victor"
" Stinner in :gh:`94226`.)"

#: whatsnew/3.12.rst:1657
msgid "smtpd"
msgstr "smtpd"

#: whatsnew/3.12.rst:1659
msgid ""
"The ``smtpd`` module has been removed according to the schedule in "
":pep:`594`, having been deprecated in Python 3.4.7 and 3.5.4. Use the "
":pypi:`aiosmtpd` PyPI module or any other :mod:`asyncio`-based server "
"instead. (Contributed by Oleg Iarygin in :gh:`93243`.)"
msgstr ""
"Il modulo ``smtpd`` è stato rimosso secondo il programma di :pep:`594`, "
"essendo stato deprecato in Python 3.4.7 e 3.5.4. Utilizzare il modulo PyPI "
":pypi:`aiosmtpd` o qualsiasi altro server basato su :mod:`asyncio`. "
"(Contributo di Oleg Iarygin in :gh:`93243`.)"

#: whatsnew/3.12.rst:1668
msgid ""
"The following undocumented :mod:`sqlite3` features, deprecated in Python "
"3.10, are now removed:"
msgstr ""
"Le seguenti funzionalità non documentate di :mod:`sqlite3`, deprecate in "
"Python 3.10, sono ora rimosse:"

#: whatsnew/3.12.rst:1671
msgid "``sqlite3.enable_shared_cache()``"
msgstr "``sqlite3.enable_shared_cache()``"

#: whatsnew/3.12.rst:1672
msgid "``sqlite3.OptimizedUnicode``"
msgstr "``sqlite3.OptimizedUnicode``"

#: whatsnew/3.12.rst:1674
msgid ""
"If a shared cache must be used, open the database in URI mode using the "
"``cache=shared`` query parameter."
msgstr ""
"Se è necessario utilizzare una cache condivisa, aprire il database in "
"modalità URI utilizzando il parametro di query ``cache=shared``."

#: whatsnew/3.12.rst:1677
msgid ""
"The ``sqlite3.OptimizedUnicode`` text factory has been an alias for "
":class:`str` since Python 3.3. Code that previously set the text factory to "
"``OptimizedUnicode`` can either use ``str`` explicitly, or rely on the "
"default value which is also ``str``."
msgstr ""
"La text factory ``sqlite3.OptimizedUnicode`` è stata un alias per "
":class:`str` fin dalla versione 3.3 di Python. Il codice che precedentemente"
" impostava la text factory su ``OptimizedUnicode`` può utilizzare "
"esplicitamente ``str``, o affidarsi al valore predefinito che è anch'esso "
"``str``."

#: whatsnew/3.12.rst:1682
msgid "(Contributed by Erlend E. Aasland in :gh:`92548`.)"
msgstr "(Contributo di Erlend E. Aasland in :gh:`92548`.)"

#: whatsnew/3.12.rst:1685
msgid "ssl"
msgstr "ssl"

#: whatsnew/3.12.rst:1687
msgid ""
"Remove :mod:`ssl`'s :func:`!ssl.RAND_pseudo_bytes` function, deprecated in "
"Python 3.6: use :func:`os.urandom` or :func:`ssl.RAND_bytes` instead. "
"(Contributed by Victor Stinner in :gh:`94199`.)"
msgstr ""
"Rimuovere la funzione :func:`!ssl.RAND_pseudo_bytes` di :mod:`ssl`, "
"deprecata in Python 3.6: utilizzare invece :func:`os.urandom` o "
":func:`ssl.RAND_bytes`. (Contributo di Victor Stinner in :gh:`94199`.)"

#: whatsnew/3.12.rst:1691
msgid ""
"Remove the :func:`!ssl.match_hostname` function. It was deprecated in Python"
" 3.7. OpenSSL performs hostname matching since Python 3.7, Python no longer "
"uses the :func:`!ssl.match_hostname` function. (Contributed by Victor "
"Stinner in :gh:`94199`.)"
msgstr ""
"Rimuovere la funzione :func:`!ssl.match_hostname`. È stata deprecata in "
"Python 3.7. OpenSSL esegue il confronto degli hostname dalla versione 3.7 di"
" Python, Python non utilizza più la funzione :func:`!ssl.match_hostname`. "
"(Contributo di Victor Stinner in :gh:`94199`.)"

#: whatsnew/3.12.rst:1697
msgid ""
"Remove the :func:`!ssl.wrap_socket` function, deprecated in Python 3.7: "
"instead, create a :class:`ssl.SSLContext` object and call its "
":class:`ssl.SSLContext.wrap_socket` method. Any package that still uses "
":func:`!ssl.wrap_socket` is broken and insecure. The function neither sends "
"a SNI TLS extension nor validates the server hostname. Code is subject to "
":cwe:`295` (Improper Certificate Validation). (Contributed by Victor Stinner"
" in :gh:`94199`.)"
msgstr ""
"Rimuovere la funzione :func:`!ssl.wrap_socket`, deprecata in Python 3.7: "
"creare invece un oggetto :class:`ssl.SSLContext` e chiamare il suo metodo "
":class:`ssl.SSLContext.wrap_socket`. Qualsiasi pacchetto che utilizza ancora"
" :func:`!ssl.wrap_socket` è rotto e non sicuro. La funzione non invia né "
"un'estensione TLS SNI né valida l'hostname del server. Il codice è soggetto "
"a :cwe:`295` (Validazione Impropria del Certificato). (Contributo di Victor "
"Stinner in :gh:`94199`.)"

#: whatsnew/3.12.rst:1708
msgid "Remove many long-deprecated :mod:`unittest` features:"
msgstr ""
"Rimuovere molte funzionalità di :mod:`unittest` deprecate da lungo tempo:"

#: whatsnew/3.12.rst:1712
msgid "A number of :class:`~unittest.TestCase` method aliases:"
msgstr "Un certo numero di alias di metodo di :class:`~unittest.TestCase`:"

#: whatsnew/3.12.rst:1715
msgid "Deprecated alias"
msgstr "Alias deprecato"

#: whatsnew/3.12.rst:1715
msgid "Method Name"
msgstr "Nome del Metodo"

#: whatsnew/3.12.rst:1715
msgid "Deprecated in"
msgstr "Deprecato in"

#: whatsnew/3.12.rst:1717
msgid "``failUnless``"
msgstr "``failUnless``"

#: whatsnew/3.12.rst:1724
msgid ":meth:`.assertTrue`"
msgstr ":meth:`.assertTrue`"

#: whatsnew/3.12.rst:1718 whatsnew/3.12.rst:1720 whatsnew/3.12.rst:1722
#: whatsnew/3.12.rst:1723
msgid "3.1"
msgstr "3.1"

#: whatsnew/3.12.rst:1718
msgid "``failIf``"
msgstr "``failIf``"

#: whatsnew/3.12.rst:1718
msgid ":meth:`.assertFalse`"
msgstr ":meth:`.assertFalse`"

#: whatsnew/3.12.rst:1719
msgid "``failUnlessEqual``"
msgstr "``failUnlessEqual``"

#: whatsnew/3.12.rst:1725
msgid ":meth:`.assertEqual`"
msgstr ":meth:`.assertEqual`"

#: whatsnew/3.12.rst:1720
msgid "``failIfEqual``"
msgstr "``failIfEqual``"

#: whatsnew/3.12.rst:1726
msgid ":meth:`.assertNotEqual`"
msgstr ":meth:`.assertNotEqual`"

#: whatsnew/3.12.rst:1721
msgid "``failUnlessAlmostEqual``"
msgstr "``failUnlessAlmostEqual``"

#: whatsnew/3.12.rst:1727
msgid ":meth:`.assertAlmostEqual`"
msgstr ":meth:`.assertAlmostEqual`"

#: whatsnew/3.12.rst:1722
msgid "``failIfAlmostEqual``"
msgstr "``failIfAlmostEqual``"

#: whatsnew/3.12.rst:1728
msgid ":meth:`.assertNotAlmostEqual`"
msgstr ":meth:`.assertNotAlmostEqual`"

#: whatsnew/3.12.rst:1723
msgid "``failUnlessRaises``"
msgstr "``failUnlessRaises``"

#: whatsnew/3.12.rst:1723
msgid ":meth:`.assertRaises`"
msgstr ":meth:`.assertRaises`"

#: whatsnew/3.12.rst:1724
msgid "``assert_``"
msgstr "``assert_``"

#: whatsnew/3.12.rst:1725 whatsnew/3.12.rst:1727 whatsnew/3.12.rst:1729
#: whatsnew/3.12.rst:1730
msgid "3.2"
msgstr "3.2"

#: whatsnew/3.12.rst:1725
msgid "``assertEquals``"
msgstr "``assertEquals``"

#: whatsnew/3.12.rst:1726
msgid "``assertNotEquals``"
msgstr "``assertNotEquals``"

#: whatsnew/3.12.rst:1727
msgid "``assertAlmostEquals``"
msgstr "``assertAlmostEquals``"

#: whatsnew/3.12.rst:1728
msgid "``assertNotAlmostEquals``"
msgstr "``assertNotAlmostEquals``"

#: whatsnew/3.12.rst:1729
msgid "``assertRegexpMatches``"
msgstr "``assertRegexpMatches``"

#: whatsnew/3.12.rst:1729
msgid ":meth:`.assertRegex`"
msgstr ":meth:`.assertRegex`"

#: whatsnew/3.12.rst:1730
msgid "``assertRaisesRegexp``"
msgstr "``assertRaisesRegexp``"

#: whatsnew/3.12.rst:1730
msgid ":meth:`.assertRaisesRegex`"
msgstr ":meth:`.assertRaisesRegex`"

#: whatsnew/3.12.rst:1731
msgid "``assertNotRegexpMatches``"
msgstr "``assertNotRegexpMatches``"

#: whatsnew/3.12.rst:1731
msgid ":meth:`.assertNotRegex`"
msgstr ":meth:`.assertNotRegex`"

#: whatsnew/3.12.rst:1731
msgid "3.5"
msgstr "3.5"

#: whatsnew/3.12.rst:1734
msgid ""
"You can use https://github.com/isidentical/teyit to automatically modernise "
"your unit tests."
msgstr ""
"Puoi usare https://github.com/isidentical/teyit per modernizzare "
"automaticamente i tuoi test unitari."

#: whatsnew/3.12.rst:1737
msgid ""
"Undocumented and broken :class:`~unittest.TestCase` method "
"``assertDictContainsSubset`` (deprecated in Python 3.2)."
msgstr ""
"Metodo :class:`~unittest.TestCase` ``assertDictContainsSubset`` non "
"documentato e malfunzionante (deprecato in Python 3.2)."

#: whatsnew/3.12.rst:1740
msgid ""
"Undocumented :meth:`TestLoader.loadTestsFromModule "
"<unittest.TestLoader.loadTestsFromModule>` parameter *use_load_tests* "
"(deprecated and ignored since Python 3.5)."
msgstr ""
"Parametro non documentato :meth:`TestLoader.loadTestsFromModule "
"<unittest.TestLoader.loadTestsFromModule>` *use_load_tests* (deprecato e "
"ignorato da Python 3.5)."

#: whatsnew/3.12.rst:1744
msgid ""
"An alias of the :class:`~unittest.TextTestResult` class: ``_TextTestResult``"
" (deprecated in Python 3.2)."
msgstr ""
"Un alias della classe :class:`~unittest.TextTestResult`: ``_TextTestResult``"
" (deprecato in Python 3.2)."

#: whatsnew/3.12.rst:1747
msgid "(Contributed by Serhiy Storchaka in :gh:`89325`.)"
msgstr "(Contribuito da Serhiy Storchaka in :gh:`89325`.)"

#: whatsnew/3.12.rst:1750
msgid "webbrowser"
msgstr "webbrowser"

#: whatsnew/3.12.rst:1752
msgid ""
"Remove support for obsolete browsers from :mod:`webbrowser`. The removed "
"browsers include: Grail, Mosaic, Netscape, Galeon, Skipstone, Iceape, "
"Firebird, and Firefox versions 35 and below (:gh:`102871`)."
msgstr ""
"Rimuovi il supporto per i browser obsoleti da :mod:`webbrowser`. I browser "
"rimossi includono: Grail, Mosaic, Netscape, Galeon, Skipstone, Iceape, "
"Firebird e le versioni di Firefox fino alla 35 (:gh:`102871`)."

#: whatsnew/3.12.rst:1757
msgid "xml.etree.ElementTree"
msgstr "xml.etree.ElementTree"

#: whatsnew/3.12.rst:1759
msgid ""
"Remove the ``ElementTree.Element.copy()`` method of the pure Python "
"implementation, deprecated in Python 3.10, use the :func:`copy.copy` "
"function instead.  The C implementation of :mod:`xml.etree.ElementTree` has "
"no ``copy()`` method, only a ``__copy__()`` method. (Contributed by Victor "
"Stinner in :gh:`94383`.)"
msgstr ""
"Rimuovi il metodo ``ElementTree.Element.copy()`` dell'implementazione pura "
"in Python, deprecato in Python 3.10, usa invece la funzione "
":func:`copy.copy`. L'implementazione in C di :mod:`xml.etree.ElementTree` "
"non ha metodo ``copy()``, ma solo un metodo ``__copy__()``. (Contribuito da "
"Victor Stinner in :gh:`94383`.)"

#: whatsnew/3.12.rst:1766
msgid "zipimport"
msgstr "zipimport"

#: whatsnew/3.12.rst:1768
msgid ""
"Remove :mod:`zipimport`'s ``find_loader()`` and ``find_module()`` methods, "
"deprecated in Python 3.10: use the ``find_spec()`` method instead.  See "
":pep:`451` for the rationale. (Contributed by Victor Stinner in "
":gh:`94379`.)"
msgstr ""
"Rimuovi i metodi ``find_loader()`` e ``find_module()`` di :mod:`zipimport`, "
"deprecati in Python 3.10: usa invece il metodo ``find_spec()``. Vedi "
":pep:`451` per la spiegazione. (Contribuito da Victor Stinner in "
":gh:`94379`.)"

#: whatsnew/3.12.rst:1774
msgid "Others"
msgstr "Altri"

#: whatsnew/3.12.rst:1776
msgid ""
"Remove the ``suspicious`` rule from the documentation :file:`Makefile` and "
":file:`Doc/tools/rstlint.py`, both in favor of `sphinx-lint "
"<https://github.com/sphinx-contrib/sphinx-lint>`_. (Contributed by Julien "
"Palard in :gh:`98179`.)"
msgstr ""
"Rimuovi la regola ``suspicious`` dal :file:`Makefile` della documentazione e"
" da :file:`Doc/tools/rstlint.py`, entrambe a favore di `sphinx-lint "
"<https://github.com/sphinx-contrib/sphinx-lint>`_. (Contribuito da Julien "
"Palard in :gh:`98179`.)"

#: whatsnew/3.12.rst:1781
msgid ""
"Remove the *keyfile* and *certfile* parameters from the :mod:`ftplib`, "
":mod:`imaplib`, :mod:`poplib` and :mod:`smtplib` modules, and the "
"*key_file*, *cert_file* and *check_hostname* parameters from the "
":mod:`http.client` module, all deprecated since Python 3.6. Use the "
"*context* parameter (*ssl_context* in :mod:`imaplib`) instead. (Contributed "
"by Victor Stinner in :gh:`94172`.)"
msgstr ""
"Rimuovi i parametri *keyfile* e *certfile* dai moduli :mod:`ftplib`, "
":mod:`imaplib`, :mod:`poplib` e :mod:`smtplib`, e i parametri *key_file*, "
"*cert_file* e *check_hostname* dal modulo :mod:`http.client`, tutti "
"deprecati da Python 3.6. Usa invece il parametro *context* (*ssl_context* in"
" :mod:`imaplib`). (Contribuito da Victor Stinner in :gh:`94172`.)"

#: whatsnew/3.12.rst:1789
msgid ""
"Remove ``Jython`` compatibility hacks from several stdlib modules and tests."
" (Contributed by Nikita Sobolev in :gh:`99482`.)"
msgstr ""
"Rimuovi hack di compatibilità con ``Jython`` da diversi moduli e test della "
"stdlib. (Contribuito da Nikita Sobolev in :gh:`99482`.)"

#: whatsnew/3.12.rst:1792
msgid ""
"Remove ``_use_broken_old_ctypes_structure_semantics_`` flag from "
":mod:`ctypes` module. (Contributed by Nikita Sobolev in :gh:`99285`.)"
msgstr ""
"Rimuovi il flag ``_use_broken_old_ctypes_structure_semantics_`` dal modulo "
":mod:`ctypes`. (Contribuito da Nikita Sobolev in :gh:`99285`.)"

#: whatsnew/3.12.rst:2124
msgid "Porting to Python 3.12"
msgstr "Porting a Python 3.12"

#: whatsnew/3.12.rst:1802
msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr ""
"Questa sezione elenca i cambiamenti precedentemente descritti e altre "
"correzioni di bug che potrebbero richiedere modifiche al tuo codice."

#: whatsnew/3.12.rst:1806
msgid "Changes in the Python API"
msgstr "Modifiche nell'API di Python"

#: whatsnew/3.12.rst:1808
msgid ""
"More strict rules are now applied for numerical group references and group "
"names in regular expressions. Only sequence of ASCII digits is now accepted "
"as a numerical reference. The group name in bytes patterns and replacement "
"strings can now only contain ASCII letters and digits and underscore. "
"(Contributed by Serhiy Storchaka in :gh:`91760`.)"
msgstr ""
"Ora si applicano regole più severe per i riferimenti di gruppo numerici e i "
"nomi di gruppo nelle espressioni regolari. Sono accettati solo riferimenti "
"numerici che sono una sequenza di cifre ASCII. Il nome del gruppo nei "
"pattern in bytes e nelle stringhe di sostituzione ora può contenere solo "
"lettere e cifre ASCII e il carattere di sottolineatura. (Contribuito da "
"Serhiy Storchaka in :gh:`91760`.)"

#: whatsnew/3.12.rst:1815
msgid ""
"Remove ``randrange()`` functionality deprecated since Python 3.10.  "
"Formerly, ``randrange(10.0)`` losslessly converted to ``randrange(10)``. "
"Now, it raises a :exc:`TypeError`. Also, the exception raised for non-"
"integer values such as ``randrange(10.5)`` or ``randrange('10')`` has been "
"changed from :exc:`ValueError` to :exc:`TypeError`.  This also prevents bugs"
" where ``randrange(1e25)`` would silently select from a larger range than "
"``randrange(10**25)``. (Originally suggested by Serhiy Storchaka "
":gh:`86388`.)"
msgstr ""
"Rimosso il funzionamento di ``randrange()`` deprecato da Python 3.10. In "
"precedenza, ``randrange(10.0)`` veniva convertito senza perdita a "
"``randrange(10)``. Ora solleva un'eccezione :exc:`TypeError`. Inoltre, "
"l'eccezione sollevata per valori non interi come ``randrange(10.5)`` o "
"``randrange('10')`` è cambiata da :exc:`ValueError` a :exc:`TypeError`. "
"Questo impedisce anche bug dove ``randrange(1e25)`` selezionava "
"silenziosamente da un intervallo più ampio rispetto a ``randrange(10**25)``."
" (Originariamente suggerito da Serhiy Storchaka :gh:`86388`.)"

#: whatsnew/3.12.rst:1823
msgid ""
":class:`argparse.ArgumentParser` changed encoding and error handler for "
"reading arguments from file (e.g. ``fromfile_prefix_chars`` option) from "
"default text encoding (e.g. :func:`locale.getpreferredencoding(False) "
"<locale.getpreferredencoding>`) to :term:`filesystem encoding and error "
"handler`. Argument files should be encoded in UTF-8 instead of ANSI Codepage"
" on Windows."
msgstr ""
":class:`argparse.ArgumentParser` ha cambiato la codifica e il gestore di "
"errori per la lettura degli argomenti dai file (ad esempio l'opzione "
"``fromfile_prefix_chars``) dalla codifica di testo predefinita (ad esempio "
":func:`locale.getpreferredencoding(False) <locale.getpreferredencoding>`) a "
":term:`filesystem encoding and error handler`. I file degli argomenti "
"dovrebbero essere codificati in UTF-8 invece che in ANSI Codepage su "
"Windows."

#: whatsnew/3.12.rst:1829
msgid ""
"Remove the ``asyncore``-based ``smtpd`` module deprecated in Python 3.4.7 "
"and 3.5.4.  A recommended replacement is the :mod:`asyncio`-based "
":pypi:`aiosmtpd` PyPI module."
msgstr ""
"Rimosso il modulo ``smtpd`` basato su ``asyncore`` deprecato in Python 3.4.7"
" e 3.5.4. Una sostituzione raccomandata è il modulo PyPI "
":mod:`asyncio`-based :pypi:`aiosmtpd`."

#: whatsnew/3.12.rst:1833
msgid ""
":func:`shlex.split`: Passing ``None`` for *s* argument now raises an "
"exception, rather than reading :data:`sys.stdin`. The feature was deprecated"
" in Python 3.9. (Contributed by Victor Stinner in :gh:`94352`.)"
msgstr ""
":func:`shlex.split`: Passare ``None`` per l'argomento *s* ora solleva "
"un'eccezione, invece di leggere da :data:`sys.stdin`. La funzionalità è "
"stata deprecata in Python 3.9. (Contribuito da Victor Stinner in "
":gh:`94352`.)"

#: whatsnew/3.12.rst:1838
msgid ""
"The :mod:`os` module no longer accepts bytes-like paths, like "
":class:`bytearray` and :class:`memoryview` types: only the exact "
":class:`bytes` type is accepted for bytes strings. (Contributed by Victor "
"Stinner in :gh:`98393`.)"
msgstr ""
"Il modulo :mod:`os` non accetta più percorsi di tipo bytes, come "
":class:`bytearray` e :class:`memoryview`: solo il tipo esatto :class:`bytes`"
" è accettato per stringhe di tipo bytes. (Contribuito da Victor Stinner in "
":gh:`98393`.)"

#: whatsnew/3.12.rst:1843
msgid ""
":func:`syslog.openlog` and :func:`syslog.closelog` now fail if used in "
"subinterpreters. :func:`syslog.syslog` may still be used in subinterpreters,"
" but now only if :func:`syslog.openlog` has already been called in the main "
"interpreter. These new restrictions do not apply to the main interpreter, so"
" only a very small set of users might be affected. This change helps with "
"interpreter isolation.  Furthermore, :mod:`syslog` is a wrapper around "
"process-global resources, which are best managed from the main interpreter. "
"(Contributed by Donghee Na in :gh:`99127`.)"
msgstr ""
":func:`syslog.openlog` e :func:`syslog.closelog` ora falliscono se "
"utilizzati nei subinterpreti. :func:`syslog.syslog` può ancora essere usato "
"nei subinterpreti, ma solo se :func:`syslog.openlog` è stato già chiamato "
"nel main interpreter. Queste nuove restrizioni non si applicano al main "
"interpreter, quindi solo un insieme molto ristretto di utenti potrebbe "
"essere interessato. Questa modifica aiuta con l'isolamento degli interpreti."
" Inoltre, :mod:`syslog` è un wrapper attorno a risorse globali del processo,"
" che sono meglio gestite dal main interpreter. (Contribuito da Donghee Na in"
" :gh:`99127`.)"

#: whatsnew/3.12.rst:1852
msgid ""
"The undocumented locking behavior of :func:`~functools.cached_property` is "
"removed, because it locked across all instances of the class, leading to "
"high lock contention. This means that a cached property getter function "
"could now run more than once for a single instance, if two threads race. For"
" most simple cached properties (e.g. those that are idempotent and simply "
"calculate a value based on other attributes of the instance) this will be "
"fine.  If synchronization is needed, implement locking within the cached "
"property getter function or around multi-threaded access points."
msgstr ""
"Il comportamento di blocco non documentato di "
":func:`~functools.cached_property` è stato rimosso, perché bloccava tutte le"
" istanze della classe, portando a una forte contention dei lock. Questo "
"significa che ora una funzione getter della proprietà in cache potrebbe "
"essere eseguita più di una volta per una singola istanza, se due thread sono"
" in competizione. Per la maggior parte delle proprietà in cache semplici (ad"
" esempio quelle che sono idempotenti e calcolano semplicemente un valore "
"basato su altri attributi dell'istanza) questo sarà accettabile. Se è "
"necessaria la sincronizzazione, implementare il locking all'interno della "
"funzione getter della proprietà in cache o intorno ai punti di accesso "
"multi-thread."

#: whatsnew/3.12.rst:1865
msgid ""
"When extracting tar files using :mod:`tarfile` or "
":func:`shutil.unpack_archive`, pass the *filter* argument to limit features "
"that may be surprising or dangerous. See :ref:`tarfile-extraction-filter` "
"for details."
msgstr ""
"Quando si estraggono file tar usando :mod:`tarfile` o "
":func:`shutil.unpack_archive`, passare l'argomento *filter* per limitare le "
"funzionalità che possono essere sorprendenti o pericolose. Vedere "
":ref:`tarfile-extraction-filter` per i dettagli."

#: whatsnew/3.12.rst:1870
msgid ""
"The output of the :func:`tokenize.tokenize` and "
":func:`tokenize.generate_tokens` functions is now changed due to the changes"
" introduced in :pep:`701`. This means that ``STRING`` tokens are not emitted"
" any more for f-strings and the tokens described in :pep:`701` are now "
"produced instead: ``FSTRING_START``, ``FSTRING_MIDDLE`` and ``FSTRING_END`` "
"are now emitted for f-string \"string\" parts in addition to the appropriate"
" tokens for the tokenization in the expression components. For example for "
"the f-string ``f\"start {1+1} end\"`` the old version of the tokenizer "
"emitted::"
msgstr ""
"L'output delle funzioni :func:`tokenize.tokenize` e "
":func:`tokenize.generate_tokens` è ora cambiato a causa delle modifiche "
"introdotte in :pep:`701`. Questo significa che i token ``STRING`` non sono "
"più emessi per le f-string e i token descritti in :pep:`701` sono ora "
"prodotti al loro posto: ``FSTRING_START``, ``FSTRING_MIDDLE`` e "
"``FSTRING_END`` sono ora emessi per le parti \"string\" delle f-string in "
"aggiunta ai token appropriati per la tokenizzazione nei componenti di "
"espressione. Ad esempio, per la f-string ``f\"start {1+1} end\"`` la vecchia"
" versione del tokenizer emetteva::"

#: whatsnew/3.12.rst:1881
msgid "while the new version emits::"
msgstr "mentre la nuova versione emette::"

#: whatsnew/3.12.rst:1893
msgid ""
"Additionally, there may be some minor behavioral changes as a consequence of"
" the changes required to support :pep:`701`. Some of these changes include:"
msgstr ""
"Inoltre, potrebbero esserci alcuni cambiamenti comportamentali minori come "
"conseguenza delle modifiche necessarie per supportare :pep:`701`. Alcuni di "
"questi cambiamenti includono:"

#: whatsnew/3.12.rst:1896
msgid ""
"The ``type`` attribute of the tokens emitted when tokenizing some invalid "
"Python characters such as ``!`` has changed from ``ERRORTOKEN`` to ``OP``."
msgstr ""
"L'attributo ``type`` dei token emessi quando si tokenizzano alcuni caratteri"
" Python non validi come ``!`` è cambiato da ``ERRORTOKEN`` a ``OP``."

#: whatsnew/3.12.rst:1899
msgid ""
"Incomplete single-line strings now also raise :exc:`tokenize.TokenError` as "
"incomplete multiline strings do."
msgstr ""
"Le stringhe a riga singola incomplete ora sollevano "
":exc:`tokenize.TokenError` come fanno le stringhe multilinea incomplete."

#: whatsnew/3.12.rst:1902
msgid ""
"Some incomplete or invalid Python code now raises :exc:`tokenize.TokenError`"
" instead of returning arbitrary ``ERRORTOKEN`` tokens when tokenizing it."
msgstr ""
"Alcuni codici Python incompleti o non validi ora sollevano "
":exc:`tokenize.TokenError` invece di restituire token ``ERRORTOKEN`` "
"arbitrari durante la tokenizzazione."

#: whatsnew/3.12.rst:1905
msgid ""
"Mixing tabs and spaces as indentation in the same file is not supported "
"anymore and will raise a :exc:`TabError`."
msgstr ""
"La miscelazione di tabulazioni e spazi come indentazione nello stesso file "
"non è più supportata e genererà un'eccezione :exc:`TabError`."

#: whatsnew/3.12.rst:1908
msgid ""
"The :mod:`threading` module now expects the :mod:`!_thread` module to have "
"an ``_is_main_interpreter`` attribute.  It is a function with no arguments "
"that returns ``True`` if the current interpreter is the main interpreter."
msgstr ""
"Il modulo :mod:`threading` ora si aspetta che il modulo :mod:`!_thread` "
"abbia un attributo ``_is_main_interpreter``. È una funzione senza argomenti "
"che restituisce ``True`` se l'interprete corrente è il main interpreter."

#: whatsnew/3.12.rst:1913
msgid ""
"Any library or application that provides a custom ``_thread`` module should "
"provide ``_is_main_interpreter()``. (See :gh:`112826`.)"
msgstr ""
"Qualsiasi libreria o applicazione che fornisce un modulo ``_thread`` "
"personalizzato dovrebbe fornire ``_is_main_interpreter()``. (Vedere "
":gh:`112826`.)"

#: whatsnew/3.12.rst:1918
msgid "Build Changes"
msgstr "Modifiche alla Build"

#: whatsnew/3.12.rst:1920
msgid ""
"Python no longer uses :file:`setup.py` to build shared C extension modules. "
"Build parameters like headers and libraries are detected in ``configure`` "
"script. Extensions are built by :file:`Makefile`. Most extensions use ``pkg-"
"config`` and fall back to manual detection. (Contributed by Christian Heimes"
" in :gh:`93939`.)"
msgstr ""
"Python non utilizza più :file:`setup.py` per costruire moduli di estensione "
"C condivisi. I parametri di build come intestazioni e librerie sono rilevati"
" nello script ``configure``. Le estensioni sono costruite da "
":file:`Makefile`. La maggior parte delle estensioni utilizza ``pkg-config`` "
"e ricorre al rilevamento manuale. (Contribuito da Christian Heimes in "
":gh:`93939`.)"

#: whatsnew/3.12.rst:1926
msgid ""
"``va_start()`` with two parameters, like ``va_start(args, format),`` is now "
"required to build Python. ``va_start()`` is no longer called with a single "
"parameter. (Contributed by Kumar Aditya in :gh:`93207`.)"
msgstr ""
"``va_start()`` con due parametri, come ``va_start(args, format),`` è ora "
"richiesto per costruire Python. ``va_start()`` non viene più chiamato con un"
" solo parametro. (Contribuito da Kumar Aditya in :gh:`93207`.)"

#: whatsnew/3.12.rst:1931
msgid ""
"CPython now uses the ThinLTO option as the default link time optimization "
"policy if the Clang compiler accepts the flag. (Contributed by Donghee Na in"
" :gh:`89536`.)"
msgstr ""
"CPython ora utilizza l'opzione ThinLTO come politica predefinita di "
"ottimizzazione del tempo di link se il compilatore Clang accetta il flag. "
"(Contribuito da Donghee Na in :gh:`89536`.)"

#: whatsnew/3.12.rst:1935
msgid ""
"Add ``COMPILEALL_OPTS`` variable in :file:`Makefile` to override "
":mod:`compileall` options (default: ``-j0``) in ``make install``. Also "
"merged the 3 ``compileall`` commands into a single command to build .pyc "
"files for all optimization levels (0, 1, 2) at once. (Contributed by Victor "
"Stinner in :gh:`99289`.)"
msgstr ""
"Aggiunta la variabile ``COMPILEALL_OPTS`` in :file:`Makefile` per "
"sovrascrivere le opzioni di :mod:`compileall` (predefinito: ``-j0``) in "
"``make install``. Inoltre, combinati i 3 comandi ``compileall`` in un unico "
"comando per costruire i file .pyc per tutti i livelli di ottimizzazione (0, "
"1, 2) in una volta. (Contribuito da Victor Stinner in :gh:`99289`.)"

#: whatsnew/3.12.rst:1941
msgid "Add platform triplets for 64-bit LoongArch:"
msgstr "Aggiunti triplette di piattaforma per LoongArch a 64 bit:"

#: whatsnew/3.12.rst:1943
msgid "loongarch64-linux-gnusf"
msgstr "loongarch64-linux-gnusf"

#: whatsnew/3.12.rst:1944
msgid "loongarch64-linux-gnuf32"
msgstr "loongarch64-linux-gnuf32"

#: whatsnew/3.12.rst:1945
msgid "loongarch64-linux-gnu"
msgstr "loongarch64-linux-gnu"

#: whatsnew/3.12.rst:1947
msgid "(Contributed by Zhang Na in :gh:`90656`.)"
msgstr "(Contribuito da Zhang Na in :gh:`90656`.)"

#: whatsnew/3.12.rst:1949
msgid "``PYTHON_FOR_REGEN`` now require Python 3.10 or newer."
msgstr "``PYTHON_FOR_REGEN`` ora richiede Python 3.10 o versioni successive."

#: whatsnew/3.12.rst:1951
msgid ""
"Autoconf 2.71 and aclocal 1.16.4 is now required to regenerate "
":file:`!configure`. (Contributed by Christian Heimes in :gh:`89886`.)"
msgstr ""
"Autoconf 2.71 e aclocal 1.16.4 sono ora richiesti per rigenerare "
":file:`!configure`. (Contribuito da Christian Heimes in :gh:`89886`.)"

#: whatsnew/3.12.rst:1955
msgid ""
"Windows builds and macOS installers from python.org now use OpenSSL 3.0."
msgstr ""
"Le build di Windows e gli installer per macOS da python.org ora utilizzano "
"OpenSSL 3.0."

#: whatsnew/3.12.rst:1959
msgid "C API Changes"
msgstr "Modifiche all'API C"

#: whatsnew/3.12.rst:1966
msgid ""
":pep:`697`: Introduce the :ref:`Unstable C API tier <unstable-c-api>`, "
"intended for low-level tools like debuggers and JIT compilers. This API may "
"change in each minor release of CPython without deprecation warnings. Its "
"contents are marked by the ``PyUnstable_`` prefix in names."
msgstr ""
":pep:`697`: Introdotta la :ref:`Unstable C API tier <unstable-c-api>`, "
"destinata a strumenti di basso livello come debugger e compilatori JIT. "
"Questa API può cambiare in ogni rilascio minore di CPython senza avvisi di "
"deprecazione. I suoi contenuti sono contrassegnati dal prefisso "
"``PyUnstable_`` nei nomi."

#: whatsnew/3.12.rst:1972
msgid "Code object constructors:"
msgstr "Costruttori di oggetti Code:"

#: whatsnew/3.12.rst:1974
msgid "``PyUnstable_Code_New()`` (renamed from ``PyCode_New``)"
msgstr "``PyUnstable_Code_New()`` (rinominato da ``PyCode_New``)"

#: whatsnew/3.12.rst:1975
msgid ""
"``PyUnstable_Code_NewWithPosOnlyArgs()`` (renamed from "
"``PyCode_NewWithPosOnlyArgs``)"
msgstr ""
"``PyUnstable_Code_NewWithPosOnlyArgs()`` (rinominato da "
"``PyCode_NewWithPosOnlyArgs``)"

#: whatsnew/3.12.rst:1977
msgid "Extra storage for code objects (:pep:`523`):"
msgstr "Archiviazione extra per oggetti code (:pep:`523`):"

#: whatsnew/3.12.rst:1979
msgid ""
"``PyUnstable_Eval_RequestCodeExtraIndex()`` (renamed from "
"``_PyEval_RequestCodeExtraIndex``)"
msgstr ""
"``PyUnstable_Eval_RequestCodeExtraIndex()`` (rinominato da "
"``_PyEval_RequestCodeExtraIndex``)"

#: whatsnew/3.12.rst:1980
msgid "``PyUnstable_Code_GetExtra()`` (renamed from ``_PyCode_GetExtra``)"
msgstr "``PyUnstable_Code_GetExtra()`` (rinominato da ``_PyCode_GetExtra``)"

#: whatsnew/3.12.rst:1981
msgid "``PyUnstable_Code_SetExtra()`` (renamed from ``_PyCode_SetExtra``)"
msgstr "``PyUnstable_Code_SetExtra()`` (rinominato da ``_PyCode_SetExtra``)"

#: whatsnew/3.12.rst:1983
msgid ""
"The original names will continue to be available until the respective API "
"changes."
msgstr ""
"I nomi originali continueranno a essere disponibili fino alla rispettiva "
"modifica dell'API."

#: whatsnew/3.12.rst:1986
msgid "(Contributed by Petr Viktorin in :gh:`101101`.)"
msgstr "(Contribuito da Petr Viktorin in :gh:`101101`.)"

#: whatsnew/3.12.rst:1988
msgid ""
":pep:`697`: Add an API for extending types whose instance memory layout is "
"opaque:"
msgstr ""
":pep:`697`: Aggiunta un'API per estendere i tipi la cui struttura di memoria"
" delle istanze è opaca:"

#: whatsnew/3.12.rst:1991
msgid ""
":c:member:`PyType_Spec.basicsize` can be zero or negative to specify "
"inheriting or extending the base class size."
msgstr ""
":c:member:`PyType_Spec.basicsize` può essere zero o negativo per specificare"
" l'ereditarietà o l'estensione della dimensione della classe base."

#: whatsnew/3.12.rst:1993
msgid ""
":c:func:`PyObject_GetTypeData` and :c:func:`PyType_GetTypeDataSize` added to"
" allow access to subclass-specific instance data."
msgstr ""
":c:func:`PyObject_GetTypeData` e :c:func:`PyType_GetTypeDataSize` aggiunti "
"per consentire l'accesso ai dati di istanza specifici della sottoclasse."

#: whatsnew/3.12.rst:1995
msgid ""
":c:macro:`Py_TPFLAGS_ITEMS_AT_END` and :c:func:`PyObject_GetItemData` added "
"to allow safely extending certain variable-sized types, including "
":c:var:`PyType_Type`."
msgstr ""
":c:macro:`Py_TPFLAGS_ITEMS_AT_END` e :c:func:`PyObject_GetItemData` aggiunti"
" per consentire l'estensione sicura di determinati tipi a dimensione "
"variabile, incluso :c:var:`PyType_Type`."

#: whatsnew/3.12.rst:1998
msgid ""
":c:macro:`Py_RELATIVE_OFFSET` added to allow defining :c:type:`members "
"<PyMemberDef>` in terms of a subclass-specific struct."
msgstr ""
":c:macro:`Py_RELATIVE_OFFSET` aggiunto per consentire la definizione di "
":c:type:`membri <PyMemberDef>` in termini di una struttura specifica della "
"sottoclasse."

#: whatsnew/3.12.rst:2001
msgid "(Contributed by Petr Viktorin in :gh:`103509`.)"
msgstr "(Contribuito da Petr Viktorin in :gh:`103509`.)"

#: whatsnew/3.12.rst:2003
msgid ""
"Add the new :ref:`limited C API <limited-c-api>` function "
":c:func:`PyType_FromMetaclass`, which generalizes the existing "
":c:func:`PyType_FromModuleAndSpec` using an additional metaclass argument. "
"(Contributed by Wenzel Jakob in :gh:`93012`.)"
msgstr ""
"Aggiunta la nuova funzione della :ref:`limited C API <limited-c-api>` "
":c:func:`PyType_FromMetaclass`, che generalizza l'esistente "
":c:func:`PyType_FromModuleAndSpec` utilizzando un argomento metaclasse "
"aggiuntivo. (Contribuito da Wenzel Jakob in :gh:`93012`.)"

#: whatsnew/3.12.rst:2008
msgid ""
"API for creating objects that can be called using :ref:`the vectorcall "
"protocol <vectorcall>` was added to the :ref:`Limited API <stable>`:"
msgstr ""
"È stata aggiunta un'API per creare oggetti che possono essere chiamati "
"utilizzando :ref:`il protocollo vectorcall <vectorcall>` alla :ref:`Limited "
"API <stable>`:"

#: whatsnew/3.12.rst:2012
msgid ":c:macro:`Py_TPFLAGS_HAVE_VECTORCALL`"
msgstr ":c:macro:`Py_TPFLAGS_HAVE_VECTORCALL`"

#: whatsnew/3.12.rst:2013
msgid ":c:func:`PyVectorcall_NARGS`"
msgstr ":c:func:`PyVectorcall_NARGS`"

#: whatsnew/3.12.rst:2014
msgid ":c:func:`PyVectorcall_Call`"
msgstr ":c:func:`PyVectorcall_Call`"

#: whatsnew/3.12.rst:2015
msgid ":c:type:`vectorcallfunc`"
msgstr ":c:type:`vectorcallfunc`"

#: whatsnew/3.12.rst:2017
msgid ""
"The :c:macro:`Py_TPFLAGS_HAVE_VECTORCALL` flag is now removed from a class "
"when the class's :py:meth:`~object.__call__` method is reassigned. This "
"makes vectorcall safe to use with mutable types (i.e. heap types without the"
" immutable flag, :c:macro:`Py_TPFLAGS_IMMUTABLETYPE`). Mutable types that do"
" not override :c:member:`~PyTypeObject.tp_call` now inherit the "
"``Py_TPFLAGS_HAVE_VECTORCALL`` flag. (Contributed by Petr Viktorin in "
":gh:`93274`.)"
msgstr ""
"Il flag :c:macro:`Py_TPFLAGS_HAVE_VECTORCALL` viene ora rimosso da una "
"classe quando il metodo della classe :py:meth:`~object.__call__` viene "
"riassegnato. Questo rende sicuro l'uso di vectorcall con tipi mutabili (cioè"
" tipi di heap senza il flag immutabile, "
":c:macro:`Py_TPFLAGS_IMMUTABLETYPE`). I tipi mutabili che non sovrascrivono "
":c:member:`~PyTypeObject.tp_call` ora ereditano il flag "
"``Py_TPFLAGS_HAVE_VECTORCALL``. (Contributo di Petr Viktorin in "
":gh:`93274`.)"

#: whatsnew/3.12.rst:2025
msgid ""
"The :c:macro:`Py_TPFLAGS_MANAGED_DICT` and "
":c:macro:`Py_TPFLAGS_MANAGED_WEAKREF` flags have been added. This allows "
"extensions classes to support object ``__dict__`` and weakrefs with less "
"bookkeeping, using less memory and with faster access."
msgstr ""
"Sono stati aggiunti i flag :c:macro:`Py_TPFLAGS_MANAGED_DICT` e "
":c:macro:`Py_TPFLAGS_MANAGED_WEAKREF`. Questo consente alle classi estese di"
" supportare ``__dict__`` e weakref degli oggetti con meno gestione, usando "
"meno memoria e con accesso più rapido."

#: whatsnew/3.12.rst:2030
msgid ""
"API for performing calls using :ref:`the vectorcall protocol <vectorcall>` "
"was added to the :ref:`Limited API <stable>`:"
msgstr ""
"È stata aggiunta all' :ref:`Limited API <stable>` l'API per eseguire "
"chiamate utilizzando :ref:`il protocollo vectorcall <vectorcall>`:"

#: whatsnew/3.12.rst:2034
msgid ":c:func:`PyObject_Vectorcall`"
msgstr ":c:func:`PyObject_Vectorcall`"

#: whatsnew/3.12.rst:2035
msgid ":c:func:`PyObject_VectorcallMethod`"
msgstr ":c:func:`PyObject_VectorcallMethod`"

#: whatsnew/3.12.rst:2036
msgid ":c:macro:`PY_VECTORCALL_ARGUMENTS_OFFSET`"
msgstr ":c:macro:`PY_VECTORCALL_ARGUMENTS_OFFSET`"

#: whatsnew/3.12.rst:2038
msgid ""
"This means that both the incoming and outgoing ends of the vector call "
"protocol are now available in the :ref:`Limited API <stable>`. (Contributed "
"by Wenzel Jakob in :gh:`98586`.)"
msgstr ""
"Questo significa che entrambe le estremità, in entrata e in uscita, del "
"protocollo vectorcall sono ora disponibili nella :ref:`Limited API "
"<stable>`. (Contributo di Wenzel Jakob in :gh:`98586`.)"

#: whatsnew/3.12.rst:2042
msgid ""
"Add two new public functions, :c:func:`PyEval_SetProfileAllThreads` and "
":c:func:`PyEval_SetTraceAllThreads`, that allow to set tracing and profiling"
" functions in all running threads in addition to the calling one. "
"(Contributed by Pablo Galindo in :gh:`93503`.)"
msgstr ""
"Aggiunte due nuove funzioni pubbliche, :c:func:`PyEval_SetProfileAllThreads`"
" e :c:func:`PyEval_SetTraceAllThreads`, che permettono di impostare funzioni"
" di tracciamento e profilazione in tutti i thread in esecuzione oltre a "
"quello chiamante. (Contributo di Pablo Galindo in :gh:`93503`.)"

#: whatsnew/3.12.rst:2048
msgid ""
"Add new function :c:func:`PyFunction_SetVectorcall` to the C API which sets "
"the vectorcall field of a given :c:type:`PyFunctionObject`. (Contributed by "
"Andrew Frost in :gh:`92257`.)"
msgstr ""
"Aggiunta la nuova funzione :c:func:`PyFunction_SetVectorcall` alla C API che"
" imposta il campo vectorcall di un dato :c:type:`PyFunctionObject`. "
"(Contributo di Andrew Frost in :gh:`92257`.)"

#: whatsnew/3.12.rst:2052
msgid ""
"The C API now permits registering callbacks via :c:func:`PyDict_AddWatcher`,"
" :c:func:`PyDict_Watch` and related APIs to be called whenever a dictionary "
"is modified. This is intended for use by optimizing interpreters, JIT "
"compilers, or debuggers. (Contributed by Carl Meyer in :gh:`91052`.)"
msgstr ""
"La C API ora consente di registrare callback tramite "
":c:func:`PyDict_AddWatcher`, :c:func:`PyDict_Watch` e API correlate che "
"vengono chiamate ogni volta che un dizionario viene modificato. Questo è "
"inteso per l'uso da parte di interpreti ottimizzanti, compilatori JIT o "
"debugger. (Contributo di Carl Meyer in :gh:`91052`.)"

#: whatsnew/3.12.rst:2058
msgid ""
"Add :c:func:`PyType_AddWatcher` and :c:func:`PyType_Watch` API to register "
"callbacks to receive notification on changes to a type. (Contributed by Carl"
" Meyer in :gh:`91051`.)"
msgstr ""
"Aggiunte le API :c:func:`PyType_AddWatcher` e :c:func:`PyType_Watch` per "
"registrare callback che ricevono notifiche sulle modifiche a un tipo. "
"(Contributo di Carl Meyer in :gh:`91051`.)"

#: whatsnew/3.12.rst:2062
msgid ""
"Add :c:func:`PyCode_AddWatcher` and :c:func:`PyCode_ClearWatcher` APIs to "
"register callbacks to receive notification on creation and destruction of "
"code objects. (Contributed by Itamar Oren in :gh:`91054`.)"
msgstr ""
"Aggiunte le API :c:func:`PyCode_AddWatcher` e :c:func:`PyCode_ClearWatcher` "
"per registrare callback che ricevono notifiche sulla creazione e distruzione"
" di oggetti di codice. (Contributo di Itamar Oren in :gh:`91054`.)"

#: whatsnew/3.12.rst:2067
msgid ""
"Add :c:func:`PyFrame_GetVar` and :c:func:`PyFrame_GetVarString` functions to"
" get a frame variable by its name. (Contributed by Victor Stinner in "
":gh:`91248`.)"
msgstr ""
"Aggiunte le funzioni :c:func:`PyFrame_GetVar` e "
":c:func:`PyFrame_GetVarString` per ottenere una variabile di frame per nome."
" (Contributo di Victor Stinner in :gh:`91248`.)"

#: whatsnew/3.12.rst:2071
msgid ""
"Add :c:func:`PyErr_GetRaisedException` and "
":c:func:`PyErr_SetRaisedException` for saving and restoring the current "
"exception. These functions return and accept a single exception object, "
"rather than the triple arguments of the now-deprecated :c:func:`PyErr_Fetch`"
" and :c:func:`PyErr_Restore`. This is less error prone and a bit more "
"efficient. (Contributed by Mark Shannon in :gh:`101578`.)"
msgstr ""
"Aggiunte :c:func:`PyErr_GetRaisedException` e "
":c:func:`PyErr_SetRaisedException` per salvare e ripristinare l'eccezione "
"corrente. Queste funzioni restituiscono e accettano un singolo oggetto "
"eccezione, anziché i tre argomenti della ormai deprecata "
":c:func:`PyErr_Fetch` e :c:func:`PyErr_Restore`. Questo è meno soggetto a "
"errori e un po' più efficiente. (Contributo di Mark Shannon in "
":gh:`101578`.)"

#: whatsnew/3.12.rst:2079
msgid ""
"Add ``_PyErr_ChainExceptions1``, which takes an exception instance, to "
"replace the legacy-API ``_PyErr_ChainExceptions``, which is now deprecated. "
"(Contributed by Mark Shannon in :gh:`101578`.)"
msgstr ""
"Aggiunto ``_PyErr_ChainExceptions1``, che accetta un'istanza di eccezione, "
"per sostituire l'API legacy ``_PyErr_ChainExceptions``, che ora è deprecata."
" (Contributo di Mark Shannon in :gh:`101578`.)"

#: whatsnew/3.12.rst:2083
msgid ""
"Add :c:func:`PyException_GetArgs` and :c:func:`PyException_SetArgs` as "
"convenience functions for retrieving and modifying the "
":attr:`~BaseException.args` passed to the exception's constructor. "
"(Contributed by Mark Shannon in :gh:`101578`.)"
msgstr ""
"Aggiunte :c:func:`PyException_GetArgs` e :c:func:`PyException_SetArgs` come "
"funzioni di comodo per recuperare e modificare gli "
":attr:`~BaseException.args` passati al costruttore dell'eccezione. "
"(Contributo di Mark Shannon in :gh:`101578`.)"

#: whatsnew/3.12.rst:2088
msgid ""
"Add :c:func:`PyErr_DisplayException`, which takes an exception instance, to "
"replace the legacy-api :c:func:`!PyErr_Display`. (Contributed by Irit "
"Katriel in :gh:`102755`)."
msgstr ""
"Aggiunta :c:func:`PyErr_DisplayException`, che accetta un'istanza di "
"eccezione, per sostituire l'API legacy :c:func:`!PyErr_Display`. (Contributo"
" di Irit Katriel in :gh:`102755`)."

#: whatsnew/3.12.rst:2094
msgid ""
":pep:`683`: Introduce *Immortal Objects*, which allows objects to bypass "
"reference counts, and related changes to the C-API:"
msgstr ""
":pep:`683`: Introdurre *Immortal Objects*, che consente agli oggetti di "
"bypassare i conti di riferimento, e modifiche correlate alla C-API:"

#: whatsnew/3.12.rst:2097
msgid "``_Py_IMMORTAL_REFCNT``: The reference count that defines an object"
msgstr ""
"``_Py_IMMORTAL_REFCNT``: Il conteggio dei riferimenti che definisce un "
"oggetto"

#: whatsnew/3.12.rst:2098
msgid "as immortal."
msgstr "come immortale."

#: whatsnew/3.12.rst:2099
msgid ""
"``_Py_IsImmortal`` Checks if an object has the immortal reference count."
msgstr ""
"``_Py_IsImmortal`` Controlla se un oggetto ha il conteggio dei riferimenti "
"immortali."

#: whatsnew/3.12.rst:2100
msgid "``PyObject_HEAD_INIT`` This will now initialize reference count to"
msgstr ""
"``PyObject_HEAD_INIT`` Ora inizializzerà il conteggio dei riferimenti a"

#: whatsnew/3.12.rst:2101
msgid "``_Py_IMMORTAL_REFCNT`` when used with ``Py_BUILD_CORE``."
msgstr "``_Py_IMMORTAL_REFCNT`` quando usato con ``Py_BUILD_CORE``."


msgstr ""
"``SSTATE_INTERNED_IMMORTAL`` Un identificatore per oggetti Unicode internati"

#: whatsnew/3.12.rst:2103
msgid "that are immortal."
msgstr "che sono immortali."

#: whatsnew/3.12.rst:2104
msgid "``SSTATE_INTERNED_IMMORTAL_STATIC`` An identifier for interned unicode"
msgstr ""
"``SSTATE_INTERNED_IMMORTAL_STATIC`` Un identificatore per oggetti Unicode "
"internati"

#: whatsnew/3.12.rst:2105
msgid "objects that are immortal and static"
msgstr "che sono immortali e statici."


msgstr ""
"``sys.getunicodeinternedsize`` Restituisce il numero totale di oggetti "
"Unicode"

#: whatsnew/3.12.rst:2107
msgid ""
"objects that have been interned. This is now needed for :file:`refleak.py` "
"to correctly track reference counts and allocated blocks"
msgstr ""
"che sono stati internati. Questo è ora necessario per :file:`refleak.py` per"
" monitorare correttamente i conti di riferimenti e i blocchi allocati."

#: whatsnew/3.12.rst:2110
msgid "(Contributed by Eddie Elizondo in :gh:`84436`.)"
msgstr "(Contributo di Eddie Elizondo in :gh:`84436`.)"

#: whatsnew/3.12.rst:2112
msgid ""
":pep:`684`: Add the new :c:func:`Py_NewInterpreterFromConfig` function and "
":c:type:`PyInterpreterConfig`, which may be used to create sub-interpreters "
"with their own GILs. (See :ref:`whatsnew312-pep684` for more info.) "
"(Contributed by Eric Snow in :gh:`104110`.)"
msgstr ""
":pep:`684`: Aggiunta la nuova funzione :c:func:`Py_NewInterpreterFromConfig`"
" e :c:type:`PyInterpreterConfig`, che possono essere utilizzate per creare "
"sotto-interpreti con i propri GIL. (Vedi :ref:`whatsnew312-pep684` per "
"maggiori informazioni.) (Contributo di Eric Snow in :gh:`104110`.)"

#: whatsnew/3.12.rst:2118
msgid ""
"In the limited C API version 3.12, :c:func:`Py_INCREF` and "
":c:func:`Py_DECREF` functions are now implemented as opaque function calls "
"to hide implementation details. (Contributed by Victor Stinner in "
":gh:`105387`.)"
msgstr ""
"Nella versione 3.12 della limited C API, le funzioni :c:func:`Py_INCREF` e "
":c:func:`Py_DECREF` sono ora implementate come chiamate di funzione opache "
"per nascondere i dettagli dell'implementazione. (Contributo di Victor "
"Stinner in :gh:`105387`.)"

#: whatsnew/3.12.rst:2126
msgid ""
"Legacy Unicode APIs based on ``Py_UNICODE*`` representation has been "
"removed. Please migrate to APIs based on UTF-8 or ``wchar_t*``."
msgstr ""
"Le API Unicode legacy basate sulla rappresentazione ``Py_UNICODE*`` sono "
"state rimosse. Si prega di migrare alle API basate su UTF-8 o ``wchar_t*``."

#: whatsnew/3.12.rst:2129
msgid ""
"Argument parsing functions like :c:func:`PyArg_ParseTuple` doesn't support "
"``Py_UNICODE*`` based format (e.g. ``u``, ``Z``) anymore. Please migrate to "
"other formats for Unicode like ``s``, ``z``, ``es``, and ``U``."
msgstr ""
"Le funzioni di analisi degli argomenti come :c:func:`PyArg_ParseTuple` non "
"supportano più i formati basati su ``Py_UNICODE*`` (ad esempio ``u``, "
"``Z``). Si prega di migrare ad altri formati per Unicode come ``s``, ``z``, "
"``es`` e ``U``."

#: whatsnew/3.12.rst:2133
msgid ""
"``tp_weaklist`` for all static builtin types is always ``NULL``. This is an "
"internal-only field on ``PyTypeObject`` but we're pointing out the change in"
" case someone happens to be accessing the field directly anyway.  To avoid "
"breakage, consider using the existing public C-API instead, or, if "
"necessary, the (internal-only) ``_PyObject_GET_WEAKREFS_LISTPTR()`` macro."
msgstr ""
"``tp_weaklist`` per tutti i tipi built-in statici è sempre ``NULL``. Questo "
"è un campo solo interno su ``PyTypeObject``, ma segnaliamo la modifica nel "
"caso qualcuno lo stia accedendo direttamente. Per evitare interruzioni, si "
"consiglia di utilizzare invece la C-API pubblica esistente o, se necessario,"
" la macro (solo interna) ``_PyObject_GET_WEAKREFS_LISTPTR()``."

#: whatsnew/3.12.rst:2140
msgid ""
"This internal-only :c:member:`PyTypeObject.tp_subclasses` may now not be a "
"valid object pointer.  Its type was changed to :c:expr:`void *` to reflect "
"this.  We mention this in case someone happens to be accessing the internal-"
"only field directly."
msgstr ""
"Questo campo solo interno :c:member:`PyTypeObject.tp_subclasses` potrebbe "
"ora non essere un puntatore a oggetto valido. Il suo tipo è stato cambiato "
"in :c:expr:`void *` per riflettere questo. Menzioniamo questa modifica nel "
"caso qualcuno stia accedendo direttamente al campo solo interno."

#: whatsnew/3.12.rst:2145
msgid ""
"To get a list of subclasses, call the Python method "
":py:meth:`~class.__subclasses__` (using :c:func:`PyObject_CallMethod`, for "
"example)."
msgstr ""
"Per ottenere un elenco di sottoclassi, chiamare il metodo Python "
":py:meth:`~class.__subclasses__` (utilizzando ad esempio "
":c:func:`PyObject_CallMethod`)."

#: whatsnew/3.12.rst:2149
msgid ""
"Add support of more formatting options (left aligning, octals, uppercase "
"hexadecimals, :c:type:`intmax_t`, :c:type:`ptrdiff_t`, :c:type:`wchar_t` C "
"strings, variable width and precision) in :c:func:`PyUnicode_FromFormat` and"
" :c:func:`PyUnicode_FromFormatV`. (Contributed by Serhiy Storchaka in "
":gh:`98836`.)"
msgstr ""
"Aggiunto supporto per più opzioni di formattazione (allineamento a sinistra,"
" ottali, esadecimali maiuscoli, :c:type:`intmax_t`, :c:type:`ptrdiff_t`, "
"stringhe C :c:type:`wchar_t`, larghezza e precisione variabili) in "
":c:func:`PyUnicode_FromFormat` e :c:func:`PyUnicode_FromFormatV`. "
"(Contributo di Serhiy Storchaka in :gh:`98836`.)"

#: whatsnew/3.12.rst:2155
msgid ""
"An unrecognized format character in :c:func:`PyUnicode_FromFormat` and "
":c:func:`PyUnicode_FromFormatV` now sets a :exc:`SystemError`. In previous "
"versions it caused all the rest of the format string to be copied as-is to "
"the result string, and any extra arguments discarded. (Contributed by Serhiy"
" Storchaka in :gh:`95781`.)"
msgstr ""
"Un carattere di formato non riconosciuto in :c:func:`PyUnicode_FromFormat` e"
" :c:func:`PyUnicode_FromFormatV` ora imposta una :exc:`SystemError`. Nelle "
"versioni precedenti, causava la copia invariata del resto della stringa di "
"formato nella stringa di risultato e scartava eventuali argomenti extra. "
"(Contributo di Serhiy Storchaka in :gh:`95781`.)"

#: whatsnew/3.12.rst:2161
msgid ""
"Fix wrong sign placement in :c:func:`PyUnicode_FromFormat` and "
":c:func:`PyUnicode_FromFormatV`. (Contributed by Philip Georgi in "
":gh:`95504`.)"
msgstr ""
"Corretta la posizione errata del segno in :c:func:`PyUnicode_FromFormat` e "
":c:func:`PyUnicode_FromFormatV`. (Contributo di Philip Georgi in "
":gh:`95504`.)"

#: whatsnew/3.12.rst:2165
msgid ""
"Extension classes wanting to add a ``__dict__`` or weak reference slot "
"should use :c:macro:`Py_TPFLAGS_MANAGED_DICT` and "
":c:macro:`Py_TPFLAGS_MANAGED_WEAKREF` instead of ``tp_dictoffset`` and "
"``tp_weaklistoffset``, respectively. The use of ``tp_dictoffset`` and "
"``tp_weaklistoffset`` is still supported, but does not fully support "
"multiple inheritance (:gh:`95589`), and performance may be worse. Classes "


#: whatsnew/3.12.rst:2177
msgid ""
"The :c:func:`PyUnicode_FSDecoder` function no longer accepts bytes-like "
"paths, like :class:`bytearray` and :class:`memoryview` types: only the exact"
" :class:`bytes` type is accepted for bytes strings. (Contributed by Victor "
"Stinner in :gh:`98393`.)"
msgstr ""
"La funzione :c:func:`PyUnicode_FSDecoder` non accetta più percorsi simili a "
"byte, come :class:`bytearray` e tipi :class:`memoryview`: solo il tipo "
"esatto :class:`bytes` è accettato per le stringhe di byte. (Contributo di "
"Victor Stinner in :gh:`98393`.)"

#: whatsnew/3.12.rst:2182
msgid ""
"The :c:macro:`Py_CLEAR`, :c:macro:`Py_SETREF` and :c:macro:`Py_XSETREF` "
"macros now only evaluate their arguments once. If an argument has side "
"effects, these side effects are no longer duplicated. (Contributed by Victor"
" Stinner in :gh:`98724`.)"
msgstr ""
"Le macro :c:macro:`Py_CLEAR`, :c:macro:`Py_SETREF` e :c:macro:`Py_XSETREF` "
"ora valutano i loro argomenti solo una volta. Se un argomento ha effetti "
"collaterali, questi effetti collaterali non vengono più duplicati. "
"(Contributo di Victor Stinner in :gh:`98724`.)"

#: whatsnew/3.12.rst:2187
msgid ""
"The interpreter's error indicator is now always normalized. This means that "
":c:func:`PyErr_SetObject`, :c:func:`PyErr_SetString` and the other functions"
" that set the error indicator now normalize the exception before storing it."
" (Contributed by Mark Shannon in :gh:`101578`.)"
msgstr ""
"L'indicatore di errore dell'interprete è ora sempre normalizzato. Questo "
"significa che :c:func:`PyErr_SetObject`, :c:func:`PyErr_SetString` e le "
"altre funzioni che impostano l'indicatore di errore ora normalizzano "
"l'eccezione prima di memorizzarla. (Contributo di Mark Shannon in "
":gh:`101578`.)"

#: whatsnew/3.12.rst:2192
msgid ""
"``_Py_RefTotal`` is no longer authoritative and only kept around for ABI "
"compatibility.  Note that it is an internal global and only available on "
"debug builds.  If you happen to be using it then you'll need to start using "
"``_Py_GetGlobalRefTotal()``."
msgstr ""
"``_Py_RefTotal`` non è più autorevole e viene mantenuto solo per la "
"compatibilità ABI. Nota che è una globale interna e disponibile solo build "
"di debug. Se stai usando questa variabile, dovrai iniziare a usare "
"``_Py_GetGlobalRefTotal()``."

#: whatsnew/3.12.rst:2197
msgid ""
"The following functions now select an appropriate metaclass for the newly "
"created type:"
msgstr ""
"Le seguenti funzioni ora selezionano una metaclasse appropriata per il tipo "
"appena creato:"

#: whatsnew/3.12.rst:2200
msgid ":c:func:`PyType_FromSpec`"
msgstr ":c:func:`PyType_FromSpec`"

#: whatsnew/3.12.rst:2201
msgid ":c:func:`PyType_FromSpecWithBases`"
msgstr ":c:func:`PyType_FromSpecWithBases`"

#: whatsnew/3.12.rst:2202
msgid ":c:func:`PyType_FromModuleAndSpec`"
msgstr ":c:func:`PyType_FromModuleAndSpec`"

#: whatsnew/3.12.rst:2204
msgid ""
"Creating classes whose metaclass overrides :c:member:`~PyTypeObject.tp_new` "
"is deprecated, and in Python 3.14+ it will be disallowed. Note that these "
"functions ignore ``tp_new`` of the metaclass, possibly allowing incomplete "
"initialization."
msgstr ""
"Creare classi la cui metaclasse sovrascrive :c:member:`~PyTypeObject.tp_new`"
" è deprecato e in Python 3.14+ sarà disabilitato. Nota che queste funzioni "
"ignorano ``tp_new`` della metaclasse, possibilmente permettendo "
"un'inizializzazione incompleta."

#: whatsnew/3.12.rst:2209
msgid ""
"Note that :c:func:`PyType_FromMetaclass` (added in Python 3.12) already "
"disallows creating classes whose metaclass overrides ``tp_new`` "
"(:meth:`~object.__new__` in Python)."
msgstr ""
"Nota che :c:func:`PyType_FromMetaclass` (aggiunto in Python 3.12) già "
"impedisce la creazione di classi la cui metaclasse sovrascrive ``tp_new`` "
"(:meth:`~object.__new__` in Python)."

#: whatsnew/3.12.rst:2213
msgid ""
"Since ``tp_new`` overrides almost everything ``PyType_From*`` functions do, "
"the two are incompatible with each other. The existing behavior -- ignoring "
"the metaclass for several steps of type creation -- is unsafe in general, "
"since (meta)classes assume that ``tp_new`` was called. There is no simple "
"general workaround. One of the following may work for you:"
msgstr ""
"Poiché ``tp_new`` sovrascrive quasi tutto ciò che fanno le funzioni "
"``PyType_From*``, i due sono incompatibili tra loro. Il comportamento "
"esistente — ignorare la metaclasse per diversi passaggi della creazione del "
"tipo — è generalmente insicuro, poiché (meta)classi assumono che ``tp_new`` "
"sia stato chiamato. Non esiste una soluzione generale semplice. Una delle "
"seguenti opzioni potrebbe funzionare per te:"

#: whatsnew/3.12.rst:2220
msgid "If you control the metaclass, avoid using ``tp_new`` in it:"
msgstr "Se controlli la metaclasse, evita di usare ``tp_new`` in essa:"

#: whatsnew/3.12.rst:2222
msgid ""
"If initialization can be skipped, it can be done in "
":c:member:`~PyTypeObject.tp_init` instead."
msgstr ""
"Se l'inizializzazione può essere saltata, può essere fatta al contrario in "
":c:member:`~PyTypeObject.tp_init`."

#: whatsnew/3.12.rst:2224
msgid ""
"If the metaclass doesn't need to be instantiated from Python, set its "
"``tp_new`` to ``NULL`` using the "
":c:macro:`Py_TPFLAGS_DISALLOW_INSTANTIATION` flag. This makes it acceptable "
"for ``PyType_From*`` functions."
msgstr ""
"Se la metaclasse non ha bisogno di essere istanziata da Python, imposta il "
"suo ``tp_new`` su ``NULL`` utilizzando il flag "
":c:macro:`Py_TPFLAGS_DISALLOW_INSTANTIATION`. Ciò la rende accettabile per "
"le funzioni ``PyType_From*``."

#: whatsnew/3.12.rst:2229
msgid ""
"Avoid ``PyType_From*`` functions: if you don't need C-specific features "
"(slots or setting the instance size), create types by :ref:`calling <call>` "
"the metaclass."
msgstr ""
"Evita le funzioni ``PyType_From*``: se non ti servono funzionalità "
"specifiche di C (slot o impostazione della dimensione dell'istanza), crea "
"tipi tramite la :ref:`chiamata <call>` della metaclasse."

#: whatsnew/3.12.rst:2233
msgid ""
"If you *know* the ``tp_new`` can be skipped safely, filter the deprecation "
"warning out using :func:`warnings.catch_warnings` from Python."
msgstr ""
"Se *sai* che ``tp_new`` può essere saltato in sicurezza, filtra l'avviso di "
"deprecazione usando :func:`warnings.catch_warnings` da Python."

#: whatsnew/3.12.rst:2236
msgid ""
":c:var:`PyOS_InputHook` and :c:var:`PyOS_ReadlineFunctionPointer` are no "
"longer called in :ref:`subinterpreters <sub-interpreter-support>`. This is "
"because clients generally rely on process-wide global state (since these "
"callbacks have no way of recovering extension module state)."
msgstr ""
":c:var:`PyOS_InputHook` e :c:var:`PyOS_ReadlineFunctionPointer` non vengono "
"più chiamati in :ref:`subinterpreters <sub-interpreter-support>`. Questo "
"perché i client generalmente si affidano allo stato globale del processo "
"(poiché questi callback non hanno modo di recuperare lo stato del modulo di "
"estensione)."

#: whatsnew/3.12.rst:2241
msgid ""
"This also avoids situations where extensions may find themselves running in "
"a subinterpreter that they don't support (or haven't yet been loaded in). "
"See :gh:`104668` for more info."
msgstr ""
"Questo evita anche situazioni in cui le estensioni potrebbero trovarsi in "
"esecuzione in un subinterprete che non supportano (o non sono ancora state "
"caricate in). Vedi :gh:`104668` per ulteriori informazioni."

#: whatsnew/3.12.rst:2245
msgid ""
":c:struct:`PyLongObject` has had its internals changed for better "
"performance. Although the internals of :c:struct:`PyLongObject` are private,"
" they are used by some extension modules. The internal fields should no "
"longer be accessed directly, instead the API functions beginning "
"``PyLong_...`` should be used instead. Two new *unstable* API functions are "
"provided for efficient access to the value of :c:struct:`PyLongObject`\\s "
"which fit into a single machine word:"
msgstr ""
":c:struct:`PyLongObject` ha avuto i suoi interni cambiati per migliorare le "
"prestazioni. Sebbene gli interni di :c:struct:`PyLongObject` siano privati, "
"vengono utilizzati da alcuni moduli di estensione. I campi interni non "
"devono più essere acceduti direttamente, ma devono essere utilizzate le "
"funzioni API che iniziano con ``PyLong_...``. Vengono fornite due nuove "
"funzioni API *instabili* per un accesso efficiente al valore dei "
":c:struct:`PyLongObject`\\s che rientrano in una sola parola macchina:"

#: whatsnew/3.12.rst:2253
msgid ":c:func:`PyUnstable_Long_IsCompact`"
msgstr ":c:func:`PyUnstable_Long_IsCompact`"

#: whatsnew/3.12.rst:2254
msgid ":c:func:`PyUnstable_Long_CompactValue`"
msgstr ":c:func:`PyUnstable_Long_CompactValue`"

#: whatsnew/3.12.rst:2256
msgid ""
"Custom allocators, set via :c:func:`PyMem_SetAllocator`, are now required to"
" be thread-safe, regardless of memory domain.  Allocators that don't have "
"their own state, including \"hooks\", are not affected. If your custom "
"allocator is not already thread-safe and you need guidance then please "
"create a new GitHub issue and CC ``@ericsnowcurrently``."
msgstr ""
"Gli allocatori personalizzati, impostati tramite "
":c:func:`PyMem_SetAllocator`, sono ora richiesti per essere thread-safe, "
"indipendentemente dal dominio di memoria. Gli allocatori che non hanno uno "
"stato proprio, compresi i \"ganci\", non sono interessati. Se il tuo "
"allocatore personalizzato non è già thread-safe e hai bisogno di assistenza,"
" crea un nuovo problema su GitHub e CC ``@ericsnowcurrently``."

#: whatsnew/3.12.rst:2266
msgid ""
"In accordance with :pep:`699`, the ``ma_version_tag`` field in "
":c:type:`PyDictObject` is deprecated for extension modules. Accessing this "
"field will generate a compiler warning at compile time. This field will be "
"removed in Python 3.14. (Contributed by Ramvikrams and Kumar Aditya in "
":gh:`101193`. PEP by Ken Jin.)"
msgstr ""
"In conformità con :pep:`699`, il campo ``ma_version_tag`` in "
":c:type:`PyDictObject` è deprecato per i moduli di estensione. L'accesso a "
"questo campo genererà un avviso del compilatore al momento della "
"compilazione. Questo campo sarà rimosso in Python 3.14. (Contribuito da "
"Ramvikrams e Kumar Aditya in :gh:`101193`. PEP di Ken Jin.)"

#: whatsnew/3.12.rst:2271
msgid "Deprecate global configuration variable:"
msgstr "Deprecare la variabile di configurazione globale:"

#: whatsnew/3.12.rst:2358
msgid ":c:var:`Py_DebugFlag`: use :c:member:`PyConfig.parser_debug`"
msgstr ":c:var:`Py_DebugFlag`: usa :c:member:`PyConfig.parser_debug`"

#: whatsnew/3.12.rst:2359
msgid ":c:var:`Py_VerboseFlag`: use :c:member:`PyConfig.verbose`"
msgstr ":c:var:`Py_VerboseFlag`: usa :c:member:`PyConfig.verbose`"

#: whatsnew/3.12.rst:2360
msgid ":c:var:`Py_QuietFlag`: use :c:member:`PyConfig.quiet`"
msgstr ":c:var:`Py_QuietFlag`: usa :c:member:`PyConfig.quiet`"

#: whatsnew/3.12.rst:2361
msgid ":c:var:`Py_InteractiveFlag`: use :c:member:`PyConfig.interactive`"
msgstr ":c:var:`Py_InteractiveFlag`: usa :c:member:`PyConfig.interactive`"

#: whatsnew/3.12.rst:2362
msgid ":c:var:`Py_InspectFlag`: use :c:member:`PyConfig.inspect`"
msgstr ":c:var:`Py_InspectFlag`: usa :c:member:`PyConfig.inspect`"

#: whatsnew/3.12.rst:2363
msgid ":c:var:`Py_OptimizeFlag`: use :c:member:`PyConfig.optimization_level`"
msgstr ":c:var:`Py_OptimizeFlag`: usa :c:member:`PyConfig.optimization_level`"

#: whatsnew/3.12.rst:2364
msgid ":c:var:`Py_NoSiteFlag`: use :c:member:`PyConfig.site_import`"
msgstr ":c:var:`Py_NoSiteFlag`: usa :c:member:`PyConfig.site_import`"

#: whatsnew/3.12.rst:2365
msgid ":c:var:`Py_BytesWarningFlag`: use :c:member:`PyConfig.bytes_warning`"
msgstr ":c:var:`Py_BytesWarningFlag`: usa :c:member:`PyConfig.bytes_warning`"

#: whatsnew/3.12.rst:2366
msgid ":c:var:`Py_FrozenFlag`: use :c:member:`PyConfig.pathconfig_warnings`"
msgstr ":c:var:`Py_FrozenFlag`: usa :c:member:`PyConfig.pathconfig_warnings`"

#: whatsnew/3.12.rst:2367
msgid ""
":c:var:`Py_IgnoreEnvironmentFlag`: use :c:member:`PyConfig.use_environment`"
msgstr ""
":c:var:`Py_IgnoreEnvironmentFlag`: usa :c:member:`PyConfig.use_environment`"

#: whatsnew/3.12.rst:2368
msgid ""
":c:var:`Py_DontWriteBytecodeFlag`: use :c:member:`PyConfig.write_bytecode`"
msgstr ""
":c:var:`Py_DontWriteBytecodeFlag`: usa :c:member:`PyConfig.write_bytecode`"

#: whatsnew/3.12.rst:2369
msgid ""
":c:var:`Py_NoUserSiteDirectory`: use "
":c:member:`PyConfig.user_site_directory`"
msgstr ""
":c:var:`Py_NoUserSiteDirectory`: usa "
":c:member:`PyConfig.user_site_directory`"

#: whatsnew/3.12.rst:2370
msgid ""
":c:var:`Py_UnbufferedStdioFlag`: use :c:member:`PyConfig.buffered_stdio`"
msgstr ""
":c:var:`Py_UnbufferedStdioFlag`: usa :c:member:`PyConfig.buffered_stdio`"

#: whatsnew/3.12.rst:2371
msgid ""
":c:var:`Py_HashRandomizationFlag`: use :c:member:`PyConfig.use_hash_seed` "
"and :c:member:`PyConfig.hash_seed`"
msgstr ""
":c:var:`Py_HashRandomizationFlag`: usa :c:member:`PyConfig.use_hash_seed` e "
":c:member:`PyConfig.hash_seed`"

#: whatsnew/3.12.rst:2373
msgid ":c:var:`Py_IsolatedFlag`: use :c:member:`PyConfig.isolated`"
msgstr ":c:var:`Py_IsolatedFlag`: usa :c:member:`PyConfig.isolated`"

#: whatsnew/3.12.rst:2374
msgid ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: use "
":c:member:`PyPreConfig.legacy_windows_fs_encoding`"
msgstr ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: usa "
":c:member:`PyPreConfig.legacy_windows_fs_encoding`"

#: whatsnew/3.12.rst:2375
msgid ""
":c:var:`Py_LegacyWindowsStdioFlag`: use "
":c:member:`PyConfig.legacy_windows_stdio`"
msgstr ""
":c:var:`Py_LegacyWindowsStdioFlag`: usa "
":c:member:`PyConfig.legacy_windows_stdio`"

#: whatsnew/3.12.rst:2376
msgid ""
":c:var:`!Py_FileSystemDefaultEncoding`: use "
":c:member:`PyConfig.filesystem_encoding`"
msgstr ""
":c:var:`!Py_FileSystemDefaultEncoding`: usa "
":c:member:`PyConfig.filesystem_encoding`"

#: whatsnew/3.12.rst:2377
msgid ""
":c:var:`!Py_HasFileSystemDefaultEncoding`: use "
":c:member:`PyConfig.filesystem_encoding`"
msgstr ""
":c:var:`!Py_HasFileSystemDefaultEncoding`: usa "
":c:member:`PyConfig.filesystem_encoding`"

#: whatsnew/3.12.rst:2378
msgid ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: use "
":c:member:`PyConfig.filesystem_errors`"
msgstr ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: usa "
":c:member:`PyConfig.filesystem_errors`"

#: whatsnew/3.12.rst:2379
msgid ""
":c:var:`!Py_UTF8Mode`: use :c:member:`PyPreConfig.utf8_mode` (see "
":c:func:`Py_PreInitialize`)"
msgstr ""
":c:var:`!Py_UTF8Mode`: usa :c:member:`PyPreConfig.utf8_mode` (vedi "
":c:func:`Py_PreInitialize`)"

#: whatsnew/3.12.rst:2296
msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with "
":c:type:`PyConfig` instead. (Contributed by Victor Stinner in :gh:`77782`.)"
msgstr ""
"L'API :c:func:`Py_InitializeFromConfig` dovrebbe essere usata con "
":c:type:`PyConfig` invece. (Contribuito da Victor Stinner in :gh:`77782`.)"

#: whatsnew/3.12.rst:2300
msgid ""
"Creating :c:data:`immutable types <Py_TPFLAGS_IMMUTABLETYPE>` with mutable "
"bases is deprecated and will be disabled in Python 3.14. (:gh:`95388`)"
msgstr ""
"Creare :c:data:`tipi immutabili <Py_TPFLAGS_IMMUTABLETYPE>` con basi "
"mutabili è deprecato e verrà disabilitato in Python 3.14. (:gh:`95388`)"

#: whatsnew/3.12.rst:2303
msgid ""
"The :file:`structmember.h` header is deprecated, though it continues to be "
"available and there are no plans to remove it."
msgstr ""
"L'intestazione :file:`structmember.h` è deprecata, sebbene continui a essere"
" disponibile e non ci siano piani per rimuoverla."

#: whatsnew/3.12.rst:2306
msgid ""
"Its contents are now available just by including :file:`Python.h`, with a "
"``Py`` prefix added if it was missing:"
msgstr ""
"I suoi contenuti sono ora disponibili semplicemente includendo "
":file:`Python.h`, con un prefisso ``Py`` aggiunto se mancava:"

#: whatsnew/3.12.rst:2309
msgid ""
":c:struct:`PyMemberDef`, :c:func:`PyMember_GetOne` and "
":c:func:`PyMember_SetOne`"
msgstr ""
":c:struct:`PyMemberDef`, :c:func:`PyMember_GetOne` e "
":c:func:`PyMember_SetOne`"

#: whatsnew/3.12.rst:2311
msgid ""
"Type macros like :c:macro:`Py_T_INT`, :c:macro:`Py_T_DOUBLE`, etc. "
"(previously ``T_INT``, ``T_DOUBLE``, etc.)"
msgstr ""
"Macro di tipo come :c:macro:`Py_T_INT`, :c:macro:`Py_T_DOUBLE`, ecc. "
"(precedentemente ``T_INT``, ``T_DOUBLE``, ecc.)"

#: whatsnew/3.12.rst:2313
msgid ""
"The flags :c:macro:`Py_READONLY` (previously ``READONLY``) and "
":c:macro:`Py_AUDIT_READ` (previously all uppercase)"
msgstr ""
"Le bandiere :c:macro:`Py_READONLY` (precedentemente ``READONLY``) e "
":c:macro:`Py_AUDIT_READ` (precedentemente tutte maiuscole)"

#: whatsnew/3.12.rst:2316
msgid "Several items are not exposed from :file:`Python.h`:"
msgstr "Diversi elementi non sono esposti da :file:`Python.h`:"

#: whatsnew/3.12.rst:2318
msgid ":c:macro:`T_OBJECT` (use :c:macro:`Py_T_OBJECT_EX`)"
msgstr ":c:macro:`T_OBJECT` (usa :c:macro:`Py_T_OBJECT_EX`)"

#: whatsnew/3.12.rst:2319
msgid ":c:macro:`T_NONE` (previously undocumented, and pretty quirky)"
msgstr ""
":c:macro:`T_NONE` (precedentemente non documentato, e piuttosto strano)"

#: whatsnew/3.12.rst:2320
msgid "The macro ``WRITE_RESTRICTED`` which does nothing."
msgstr "La macro ``WRITE_RESTRICTED`` che non fa nulla."

#: whatsnew/3.12.rst:2321
msgid ""
"The macros ``RESTRICTED`` and ``READ_RESTRICTED``, equivalents of "
":c:macro:`Py_AUDIT_READ`."
msgstr ""
"Le macro ``RESTRICTED`` e ``READ_RESTRICTED``, equivalenti di "
":c:macro:`Py_AUDIT_READ`."

#: whatsnew/3.12.rst:2323
msgid ""
"In some configurations, ``<stddef.h>`` is not included from "
":file:`Python.h`. It should be included manually when using ``offsetof()``."
msgstr ""
"In alcune configurazioni, ``<stddef.h>`` non è incluso da :file:`Python.h`. "
"Va incluso manualmente quando si utilizza ``offsetof()``."

#: whatsnew/3.12.rst:2326
msgid ""
"The deprecated header continues to provide its original contents under the "
"original names. Your old code can stay unchanged, unless the extra include "
"and non-namespaced macros bother you greatly."
msgstr ""
"L'header deprecato continua a fornire i suoi contenuti originali sotto i "
"nomi originali. Il tuo vecchio codice può rimanere invariato, a meno che "
"l'inclusione extra e le macro non spaziati ti diano molto fastidio."

#: whatsnew/3.12.rst:2331
msgid ""
"(Contributed in :gh:`47146` by Petr Viktorin, based on earlier work by "
"Alexander Belopolsky and Matthias Braun.)"
msgstr ""
"(Contribuito in :gh:`47146` da Petr Viktorin, basato su lavori precedenti di"
" Alexander Belopolsky e Matthias Braun.)"

#: whatsnew/3.12.rst:2334
msgid ""
":c:func:`PyErr_Fetch` and :c:func:`PyErr_Restore` are deprecated. Use "
":c:func:`PyErr_GetRaisedException` and :c:func:`PyErr_SetRaisedException` "
"instead. (Contributed by Mark Shannon in :gh:`101578`.)"
msgstr ""
":c:func:`PyErr_Fetch` e :c:func:`PyErr_Restore` sono deprecate. Usa "
":c:func:`PyErr_GetRaisedException` e :c:func:`PyErr_SetRaisedException` "
"invece. (Contribuito da Mark Shannon in :gh:`101578`.)"

#: whatsnew/3.12.rst:2339
msgid ""
":c:func:`!PyErr_Display` is deprecated. Use :c:func:`PyErr_DisplayException`"
" instead. (Contributed by Irit Katriel in :gh:`102755`)."
msgstr ""
":c:func:`!PyErr_Display` è deprecata. Usa :c:func:`PyErr_DisplayException` "
"invece. (Contribuito da Irit Katriel in :gh:`102755`)."

#: whatsnew/3.12.rst:2342
msgid ""
"``_PyErr_ChainExceptions`` is deprecated. Use ``_PyErr_ChainExceptions1`` "
"instead. (Contributed by Irit Katriel in :gh:`102192`.)"
msgstr ""
"``_PyErr_ChainExceptions`` è deprecata. Usa ``_PyErr_ChainExceptions1`` "
"invece. (Contribuito da Irit Katriel in :gh:`102192`.)"

#: whatsnew/3.12.rst:2345
msgid ""
"Using :c:func:`PyType_FromSpec`, :c:func:`PyType_FromSpecWithBases` or "
":c:func:`PyType_FromModuleAndSpec` to create a class whose metaclass "
"overrides :c:member:`~PyTypeObject.tp_new` is deprecated. Call the metaclass"
" instead."
msgstr ""
"Usare :c:func:`PyType_FromSpec`, :c:func:`PyType_FromSpecWithBases` o "
":c:func:`PyType_FromModuleAndSpec` per creare una classe la cui metaclasse "
"sovrascrive :c:member:`~PyTypeObject.tp_new` è deprecato. Chiama "
"direttamente la metaclasse invece."

#: whatsnew/3.12.rst:2353
msgid ""
"The ``ma_version_tag`` field in :c:type:`PyDictObject` for extension modules"
" (:pep:`699`; :gh:`101193`)."
msgstr ""
"Il campo ``ma_version_tag`` in :c:type:`PyDictObject` per moduli di "
"estensione (:pep:`699`; :gh:`101193`)."

#: whatsnew/3.12.rst:2356
msgid "Global configuration variables:"
msgstr "Variabili di configurazione globali:"

#: whatsnew/3.12.rst:2381
msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with "
":c:type:`PyConfig` instead."
msgstr ""
"L'API :c:func:`Py_InitializeFromConfig` dovrebbe essere usata con "
":c:type:`PyConfig`."

#: whatsnew/3.12.rst:2384
msgid ""
"Creating :c:data:`immutable types <Py_TPFLAGS_IMMUTABLETYPE>` with mutable "
"bases (:gh:`95388`)."
msgstr ""
"Creare :c:data:`tipi immutabili <Py_TPFLAGS_IMMUTABLETYPE>` con basi "
"mutabili (:gh:`95388`)."

#: whatsnew/3.12.rst:2390
msgid ""
":c:func:`PyImport_ImportModuleNoBlock`: use :c:func:`PyImport_ImportModule`"
msgstr ""
":c:func:`PyImport_ImportModuleNoBlock`: usa :c:func:`PyImport_ImportModule`"

#: whatsnew/3.12.rst:2391
msgid ":c:type:`!Py_UNICODE_WIDE` type: use :c:type:`wchar_t`"
msgstr "Tipo :c:type:`!Py_UNICODE_WIDE`: usa :c:type:`wchar_t`"

#: whatsnew/3.12.rst:2392
msgid ":c:type:`Py_UNICODE` type: use :c:type:`wchar_t`"
msgstr "Tipo :c:type:`Py_UNICODE`: usa :c:type:`wchar_t`"

#: whatsnew/3.12.rst:2393
msgid "Python initialization functions:"
msgstr "Funzioni di inizializzazione di Python:"

#: whatsnew/3.12.rst:2395
msgid ""
":c:func:`PySys_ResetWarnOptions`: clear :data:`sys.warnoptions` and "
":data:`!warnings.filters`"
msgstr ""
":c:func:`PySys_ResetWarnOptions`: pulisce :data:`sys.warnoptions` e "
":data:`!warnings.filters`"

#: whatsnew/3.12.rst:2397
msgid ":c:func:`Py_GetExecPrefix`: get :data:`sys.exec_prefix`"
msgstr ":c:func:`Py_GetExecPrefix`: ottiene :data:`sys.exec_prefix`"

#: whatsnew/3.12.rst:2398
msgid ":c:func:`Py_GetPath`: get :data:`sys.path`"
msgstr ":c:func:`Py_GetPath`: ottiene :data:`sys.path`"

#: whatsnew/3.12.rst:2399
msgid ":c:func:`Py_GetPrefix`: get :data:`sys.prefix`"
msgstr ":c:func:`Py_GetPrefix`: ottiene :data:`sys.prefix`"

#: whatsnew/3.12.rst:2400
msgid ":c:func:`Py_GetProgramFullPath`: get :data:`sys.executable`"
msgstr ":c:func:`Py_GetProgramFullPath`: ottiene :data:`sys.executable`"

#: whatsnew/3.12.rst:2401
msgid ":c:func:`Py_GetProgramName`: get :data:`sys.executable`"
msgstr ":c:func:`Py_GetProgramName`: ottiene :data:`sys.executable`"

#: whatsnew/3.12.rst:2402
msgid ""
":c:func:`Py_GetPythonHome`: get :c:member:`PyConfig.home` or the "
":envvar:`PYTHONHOME` environment variable"
msgstr ""
":c:func:`Py_GetPythonHome`: ottiene :c:member:`PyConfig.home` o la variabile"
" d'ambiente :envvar:`PYTHONHOME`"

#: whatsnew/3.12.rst:2408
msgid ""
"The following APIs are deprecated and will be removed, although there is "
"currently no date scheduled for their removal."
msgstr ""
"Le seguenti API sono deprecate e verranno rimosse, anche se attualmente non "
"è prevista una data di rimozione."

#: whatsnew/3.12.rst:2411
msgid ":c:macro:`Py_TPFLAGS_HAVE_FINALIZE`: unneeded since Python 3.8"
msgstr ":c:macro:`Py_TPFLAGS_HAVE_FINALIZE`: non necessaria da Python 3.8"

#: whatsnew/3.12.rst:2412
msgid ":c:func:`PyErr_Fetch`: use :c:func:`PyErr_GetRaisedException`"
msgstr ":c:func:`PyErr_Fetch`: usa :c:func:`PyErr_GetRaisedException`"

#: whatsnew/3.12.rst:2413
msgid ""
":c:func:`PyErr_NormalizeException`: use :c:func:`PyErr_GetRaisedException`"
msgstr ""
":c:func:`PyErr_NormalizeException`: usa :c:func:`PyErr_GetRaisedException`"

#: whatsnew/3.12.rst:2414
msgid ":c:func:`PyErr_Restore`: use :c:func:`PyErr_SetRaisedException`"
msgstr ":c:func:`PyErr_Restore`: usa :c:func:`PyErr_SetRaisedException`"

#: whatsnew/3.12.rst:2415
msgid ""
":c:func:`PyModule_GetFilename`: use :c:func:`PyModule_GetFilenameObject`"
msgstr ""
":c:func:`PyModule_GetFilename`: usa :c:func:`PyModule_GetFilenameObject`"

#: whatsnew/3.12.rst:2416
msgid ":c:func:`PyOS_AfterFork`: use :c:func:`PyOS_AfterFork_Child`"
msgstr ":c:func:`PyOS_AfterFork`: usa :c:func:`PyOS_AfterFork_Child`"

#: whatsnew/3.12.rst:2417
msgid ""
":c:func:`PySlice_GetIndicesEx`: use :c:func:`PySlice_Unpack` and "
":c:func:`PySlice_AdjustIndices`"
msgstr ""
":c:func:`PySlice_GetIndicesEx`: usa :c:func:`PySlice_Unpack` e "
":c:func:`PySlice_AdjustIndices`"

#: whatsnew/3.12.rst:2418
msgid ":c:func:`!PyUnicode_AsDecodedObject`: use :c:func:`PyCodec_Decode`"
msgstr ":c:func:`!PyUnicode_AsDecodedObject`: usa :c:func:`PyCodec_Decode`"

#: whatsnew/3.12.rst:2419
msgid ":c:func:`!PyUnicode_AsDecodedUnicode`: use :c:func:`PyCodec_Decode`"
msgstr ":c:func:`!PyUnicode_AsDecodedUnicode`: usa :c:func:`PyCodec_Decode`"

#: whatsnew/3.12.rst:2420
msgid ":c:func:`!PyUnicode_AsEncodedObject`: use :c:func:`PyCodec_Encode`"
msgstr ":c:func:`!PyUnicode_AsEncodedObject`: usa :c:func:`PyCodec_Encode`"

#: whatsnew/3.12.rst:2421
msgid ":c:func:`!PyUnicode_AsEncodedUnicode`: use :c:func:`PyCodec_Encode`"
msgstr ":c:func:`!PyUnicode_AsEncodedUnicode`: usa :c:func:`PyCodec_Encode`"

#: whatsnew/3.12.rst:2422
msgid ":c:func:`PyUnicode_READY`: unneeded since Python 3.12"
msgstr ":c:func:`PyUnicode_READY`: non necessaria da Python 3.12"

#: whatsnew/3.12.rst:2423
msgid ":c:func:`!PyErr_Display`: use :c:func:`PyErr_DisplayException`"
msgstr ":c:func:`!PyErr_Display`: usa :c:func:`PyErr_DisplayException`"

#: whatsnew/3.12.rst:2424
msgid ":c:func:`!_PyErr_ChainExceptions`: use ``_PyErr_ChainExceptions1``"
msgstr ":c:func:`!_PyErr_ChainExceptions`: usa ``_PyErr_ChainExceptions1``"

#: whatsnew/3.12.rst:2425
msgid ""
":c:member:`!PyBytesObject.ob_shash` member: call :c:func:`PyObject_Hash` "
"instead"
msgstr ""
":c:member:`!PyBytesObject.ob_shash` member: chiama :c:func:`PyObject_Hash` "
"invece"

#: whatsnew/3.12.rst:2427
msgid ":c:member:`!PyDictObject.ma_version_tag` member"
msgstr ":c:member:`!PyDictObject.ma_version_tag` member"

#: whatsnew/3.12.rst:2428
msgid "Thread Local Storage (TLS) API:"
msgstr "API del Thread Local Storage (TLS):"

#: whatsnew/3.12.rst:2430
msgid ":c:func:`PyThread_create_key`: use :c:func:`PyThread_tss_alloc`"
msgstr ":c:func:`PyThread_create_key`: usa :c:func:`PyThread_tss_alloc`"

#: whatsnew/3.12.rst:2431
msgid ":c:func:`PyThread_delete_key`: use :c:func:`PyThread_tss_free`"
msgstr ":c:func:`PyThread_delete_key`: usa :c:func:`PyThread_tss_free`"

#: whatsnew/3.12.rst:2432
msgid ":c:func:`PyThread_set_key_value`: use :c:func:`PyThread_tss_set`"
msgstr ":c:func:`PyThread_set_key_value`: usa :c:func:`PyThread_tss_set`"

#: whatsnew/3.12.rst:2433
msgid ":c:func:`PyThread_get_key_value`: use :c:func:`PyThread_tss_get`"
msgstr ":c:func:`PyThread_get_key_value`: usa :c:func:`PyThread_tss_get`"

#: whatsnew/3.12.rst:2434
msgid ":c:func:`PyThread_delete_key_value`: use :c:func:`PyThread_tss_delete`"
msgstr ""
":c:func:`PyThread_delete_key_value`: usa :c:func:`PyThread_tss_delete`"

#: whatsnew/3.12.rst:2435
msgid ":c:func:`PyThread_ReInitTLS`: unneeded since Python 3.7"
msgstr ":c:func:`PyThread_ReInitTLS`: non necessaria da Python 3.7"

#: whatsnew/3.12.rst:2440
msgid ""
"Remove the :file:`token.h` header file. There was never any public tokenizer"
" C API. The :file:`token.h` header file was only designed to be used by "
"Python internals. (Contributed by Victor Stinner in :gh:`92651`.)"
msgstr ""
"Rimuovi il file di intestazione :file:`token.h`. Non c'è mai stata un'API "
"pubblica per il tokenizer C. Il file di intestazione :file:`token.h` è stato"
" progettato solo per essere usato dagli interni di Python. (Contribuito da "
"Victor Stinner in :gh:`92651`.)"

#: whatsnew/3.12.rst:2445
msgid "Legacy Unicode APIs have been removed. See :pep:`623` for detail."
msgstr ""
"Le API Unicode legacy sono state rimosse. Vedi :pep:`623` per i dettagli."

#: whatsnew/3.12.rst:2447
msgid ":c:macro:`!PyUnicode_WCHAR_KIND`"
msgstr ":c:macro:`!PyUnicode_WCHAR_KIND`"

#: whatsnew/3.12.rst:2448
msgid ":c:func:`!PyUnicode_AS_UNICODE`"
msgstr ":c:func:`!PyUnicode_AS_UNICODE`"

#: whatsnew/3.12.rst:2449
msgid ":c:func:`!PyUnicode_AsUnicode`"
msgstr ":c:func:`!PyUnicode_AsUnicode`"

#: whatsnew/3.12.rst:2450
msgid ":c:func:`!PyUnicode_AsUnicodeAndSize`"
msgstr ":c:func:`!PyUnicode_AsUnicodeAndSize`"

#: whatsnew/3.12.rst:2451
msgid ":c:func:`!PyUnicode_AS_DATA`"
msgstr ":c:func:`!PyUnicode_AS_DATA`"

#: whatsnew/3.12.rst:2452
msgid ":c:func:`!PyUnicode_FromUnicode`"
msgstr ":c:func:`!PyUnicode_FromUnicode`"

#: whatsnew/3.12.rst:2453
msgid ":c:func:`!PyUnicode_GET_SIZE`"
msgstr ":c:func:`!PyUnicode_GET_SIZE`"

#: whatsnew/3.12.rst:2454
msgid ":c:func:`!PyUnicode_GetSize`"
msgstr ":c:func:`!PyUnicode_GetSize`"

#: whatsnew/3.12.rst:2455
msgid ":c:func:`!PyUnicode_GET_DATA_SIZE`"
msgstr ":c:func:`!PyUnicode_GET_DATA_SIZE`"

#: whatsnew/3.12.rst:2457
msgid ""
"Remove the ``PyUnicode_InternImmortal()`` function macro. (Contributed by "
"Victor Stinner in :gh:`85858`.)"
msgstr ""

